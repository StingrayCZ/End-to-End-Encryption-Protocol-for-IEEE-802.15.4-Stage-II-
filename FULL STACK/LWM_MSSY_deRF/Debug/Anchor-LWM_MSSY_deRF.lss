
Anchor-LWM_MSSY_deRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00003906  0000399a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000936  0080022e  0080022e  000039c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006af5  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fc5  00000000  00000000  0000ab59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038e9  00000000  00000000  0000cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000129c  00000000  00000000  00010408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ea2  00000000  00000000  000116a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a32  00000000  00000000  00013546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  00018f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c1       	rjmp	.+544    	; 0x222 <__ctors_end>
       2:	00 00       	nop
       4:	2d c1       	rjmp	.+602    	; 0x260 <__bad_interrupt>
       6:	00 00       	nop
       8:	2b c1       	rjmp	.+598    	; 0x260 <__bad_interrupt>
       a:	00 00       	nop
       c:	29 c1       	rjmp	.+594    	; 0x260 <__bad_interrupt>
       e:	00 00       	nop
      10:	27 c1       	rjmp	.+590    	; 0x260 <__bad_interrupt>
      12:	00 00       	nop
      14:	25 c1       	rjmp	.+586    	; 0x260 <__bad_interrupt>
      16:	00 00       	nop
      18:	23 c1       	rjmp	.+582    	; 0x260 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	21 c1       	rjmp	.+578    	; 0x260 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1f c1       	rjmp	.+574    	; 0x260 <__bad_interrupt>
      22:	00 00       	nop
      24:	1d c1       	rjmp	.+570    	; 0x260 <__bad_interrupt>
      26:	00 00       	nop
      28:	1b c1       	rjmp	.+566    	; 0x260 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	19 c1       	rjmp	.+562    	; 0x260 <__bad_interrupt>
      2e:	00 00       	nop
      30:	17 c1       	rjmp	.+558    	; 0x260 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_13>
      38:	13 c1       	rjmp	.+550    	; 0x260 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	11 c1       	rjmp	.+546    	; 0x260 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0f c1       	rjmp	.+542    	; 0x260 <__bad_interrupt>
      42:	00 00       	nop
      44:	0d c1       	rjmp	.+538    	; 0x260 <__bad_interrupt>
      46:	00 00       	nop
      48:	0b c1       	rjmp	.+534    	; 0x260 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	09 c1       	rjmp	.+530    	; 0x260 <__bad_interrupt>
      4e:	00 00       	nop
      50:	07 c1       	rjmp	.+526    	; 0x260 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_21>
      58:	03 c1       	rjmp	.+518    	; 0x260 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	01 c1       	rjmp	.+514    	; 0x260 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ff c0       	rjmp	.+510    	; 0x260 <__bad_interrupt>
      62:	00 00       	nop
      64:	fd c0       	rjmp	.+506    	; 0x260 <__bad_interrupt>
      66:	00 00       	nop
      68:	fb c0       	rjmp	.+502    	; 0x260 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f9 c0       	rjmp	.+498    	; 0x260 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f7 c0       	rjmp	.+494    	; 0x260 <__bad_interrupt>
      72:	00 00       	nop
      74:	f5 c0       	rjmp	.+490    	; 0x260 <__bad_interrupt>
      76:	00 00       	nop
      78:	f3 c0       	rjmp	.+486    	; 0x260 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f1 c0       	rjmp	.+482    	; 0x260 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ef c0       	rjmp	.+478    	; 0x260 <__bad_interrupt>
      82:	00 00       	nop
      84:	ed c0       	rjmp	.+474    	; 0x260 <__bad_interrupt>
      86:	00 00       	nop
      88:	eb c0       	rjmp	.+470    	; 0x260 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e9 c0       	rjmp	.+466    	; 0x260 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_36>
      94:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_37>
      98:	e3 c0       	rjmp	.+454    	; 0x260 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e1 c0       	rjmp	.+450    	; 0x260 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	df c0       	rjmp	.+446    	; 0x260 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dd c0       	rjmp	.+442    	; 0x260 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__vector_42>
      ac:	d9 c0       	rjmp	.+434    	; 0x260 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d7 c0       	rjmp	.+430    	; 0x260 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d5 c0       	rjmp	.+426    	; 0x260 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d3 c0       	rjmp	.+422    	; 0x260 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d1 c0       	rjmp	.+418    	; 0x260 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cf c0       	rjmp	.+414    	; 0x260 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cd c0       	rjmp	.+410    	; 0x260 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	cb c0       	rjmp	.+406    	; 0x260 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c9 c0       	rjmp	.+402    	; 0x260 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c7 c0       	rjmp	.+398    	; 0x260 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c5 c0       	rjmp	.+394    	; 0x260 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c3 c0       	rjmp	.+390    	; 0x260 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c1 c0       	rjmp	.+386    	; 0x260 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bf c0       	rjmp	.+382    	; 0x260 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bd c0       	rjmp	.+378    	; 0x260 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	bb c0       	rjmp	.+374    	; 0x260 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b9 c0       	rjmp	.+370    	; 0x260 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b7 c0       	rjmp	.+366    	; 0x260 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b5 c0       	rjmp	.+362    	; 0x260 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b3 c0       	rjmp	.+358    	; 0x260 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b1 c0       	rjmp	.+354    	; 0x260 <__bad_interrupt>
      fe:	00 00       	nop
     100:	af c0       	rjmp	.+350    	; 0x260 <__bad_interrupt>
     102:	00 00       	nop
     104:	ad c0       	rjmp	.+346    	; 0x260 <__bad_interrupt>
     106:	00 00       	nop
     108:	ab c0       	rjmp	.+342    	; 0x260 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a9 c0       	rjmp	.+338    	; 0x260 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a7 c0       	rjmp	.+334    	; 0x260 <__bad_interrupt>
     112:	00 00       	nop
     114:	a5 c0       	rjmp	.+330    	; 0x260 <__bad_interrupt>
     116:	00 00       	nop
     118:	a3 c0       	rjmp	.+326    	; 0x260 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a1 c0       	rjmp	.+322    	; 0x260 <__bad_interrupt>
	...

00000120 <__trampolines_end>:
     120:	6e 61       	ori	r22, 0x1E	; 30
     122:	6e 00       	.word	0x006e	; ????

00000124 <__c.2332>:
     124:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     134:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     144:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     154:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     164:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     174:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     184:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     194:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1a4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1b4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1c4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1d4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1e4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1f4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     204:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     214:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000222 <__ctors_end>:
     222:	11 24       	eor	r1, r1
     224:	1f be       	out	0x3f, r1	; 63
     226:	cf ef       	ldi	r28, 0xFF	; 255
     228:	d1 e4       	ldi	r29, 0x41	; 65
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61

0000022e <__do_copy_data>:
     22e:	12 e0       	ldi	r17, 0x02	; 2
     230:	a0 e0       	ldi	r26, 0x00	; 0
     232:	b2 e0       	ldi	r27, 0x02	; 2
     234:	e6 e0       	ldi	r30, 0x06	; 6
     236:	f9 e3       	ldi	r31, 0x39	; 57
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0b bf       	out	0x3b, r16	; 59
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x14>
     23e:	07 90       	elpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	ae 32       	cpi	r26, 0x2E	; 46
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x10>

00000248 <__do_clear_bss>:
     248:	2b e0       	ldi	r18, 0x0B	; 11
     24a:	ae e2       	ldi	r26, 0x2E	; 46
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a4 36       	cpi	r26, 0x64	; 100
     254:	b2 07       	cpc	r27, r18
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
     258:	0e 94 65 09 	call	0x12ca	; 0x12ca <main>
     25c:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <_exit>

00000260 <__bad_interrupt>:
     260:	cf ce       	rjmp	.-610    	; 0x0 <__vectors>

00000262 <modulo>:

//////////////////////////////////
//// MODULO //////////////////////
//////////////////////////////////
int64_t modulo (int64_t *num, int64_t *mod)
{
     262:	4f 92       	push	r4
     264:	5f 92       	push	r5
     266:	6f 92       	push	r6
     268:	7f 92       	push	r7
     26a:	8f 92       	push	r8
     26c:	9f 92       	push	r9
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	28 97       	sbiw	r28, 0x08	; 8
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61

	long tempNum = *num;
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	a2 81       	ldd	r26, Z+2	; 0x02
     29a:	b3 81       	ldd	r27, Z+3	; 0x03

	if(tempNum > 0) // Je kladne
     29c:	18 16       	cp	r1, r24
     29e:	19 06       	cpc	r1, r25
     2a0:	1a 06       	cpc	r1, r26
     2a2:	1b 06       	cpc	r1, r27
     2a4:	6c f5       	brge	.+90     	; 0x300 <modulo+0x9e>
	{
		tempNum %= *mod;    // Vypocet modula
     2a6:	2c 01       	movw	r4, r24
     2a8:	3d 01       	movw	r6, r26
     2aa:	77 0c       	add	r7, r7
     2ac:	44 08       	sbc	r4, r4
     2ae:	54 2c       	mov	r5, r4
     2b0:	32 01       	movw	r6, r4
     2b2:	fb 01       	movw	r30, r22
     2b4:	a0 80       	ld	r10, Z
     2b6:	b1 80       	ldd	r11, Z+1	; 0x01
     2b8:	c2 80       	ldd	r12, Z+2	; 0x02
     2ba:	d3 80       	ldd	r13, Z+3	; 0x03
     2bc:	e4 80       	ldd	r14, Z+4	; 0x04
     2be:	f5 80       	ldd	r15, Z+5	; 0x05
     2c0:	06 81       	ldd	r16, Z+6	; 0x06
     2c2:	17 81       	ldd	r17, Z+7	; 0x07
     2c4:	28 2f       	mov	r18, r24
     2c6:	39 2f       	mov	r19, r25
     2c8:	4a 2f       	mov	r20, r26
     2ca:	5b 2f       	mov	r21, r27
     2cc:	64 2d       	mov	r22, r4
     2ce:	74 2d       	mov	r23, r4
     2d0:	84 2d       	mov	r24, r4
     2d2:	94 2d       	mov	r25, r4
     2d4:	0e 94 2b 19 	call	0x3256	; 0x3256 <__moddi3>
     2d8:	e2 2e       	mov	r14, r18
     2da:	f3 2e       	mov	r15, r19
     2dc:	b4 2f       	mov	r27, r20
     2de:	02 2f       	mov	r16, r18
     2e0:	13 2f       	mov	r17, r19
     2e2:	24 2f       	mov	r18, r20
     2e4:	35 2f       	mov	r19, r21

		return tempNum;     // Navrat vypocitane hodnoty cyklu
     2e6:	ae 2d       	mov	r26, r14
     2e8:	ff 2d       	mov	r31, r15
     2ea:	eb 2f       	mov	r30, r27
     2ec:	b3 2f       	mov	r27, r19
     2ee:	33 0f       	add	r19, r19
     2f0:	00 0b       	sbc	r16, r16
     2f2:	10 2f       	mov	r17, r16
     2f4:	98 01       	movw	r18, r16
     2f6:	60 2f       	mov	r22, r16
     2f8:	70 2f       	mov	r23, r16
     2fa:	80 2f       	mov	r24, r16
     2fc:	90 2f       	mov	r25, r16
     2fe:	5b c0       	rjmp	.+182    	; 0x3b6 <modulo+0x154>
	}

	else if(tempNum < 0)  // Je zaporne
     300:	bb 23       	and	r27, r27
     302:	0c f0       	brlt	.+2      	; 0x306 <modulo+0xa4>
     304:	50 c0       	rjmp	.+160    	; 0x3a6 <modulo+0x144>
	{
		tempNum *= (-1);  // uprava cisla zpet na kladne

		tempNum %= *mod;  // Vypocet modula
     306:	fb 01       	movw	r30, r22
     308:	f0 81       	ld	r31, Z
     30a:	f9 83       	std	Y+1, r31	; 0x01
     30c:	fb 01       	movw	r30, r22
     30e:	f1 81       	ldd	r31, Z+1	; 0x01
     310:	fa 83       	std	Y+2, r31	; 0x02
     312:	fb 01       	movw	r30, r22
     314:	f2 81       	ldd	r31, Z+2	; 0x02
     316:	fb 83       	std	Y+3, r31	; 0x03
     318:	fb 01       	movw	r30, r22
     31a:	f3 81       	ldd	r31, Z+3	; 0x03
     31c:	fc 83       	std	Y+4, r31	; 0x04
     31e:	fb 01       	movw	r30, r22
     320:	f4 81       	ldd	r31, Z+4	; 0x04
     322:	fd 83       	std	Y+5, r31	; 0x05
     324:	fb 01       	movw	r30, r22
     326:	f5 81       	ldd	r31, Z+5	; 0x05
     328:	fe 83       	std	Y+6, r31	; 0x06
     32a:	fb 01       	movw	r30, r22
     32c:	f6 81       	ldd	r31, Z+6	; 0x06
     32e:	ff 83       	std	Y+7, r31	; 0x07
     330:	fb 01       	movw	r30, r22
     332:	f7 81       	ldd	r31, Z+7	; 0x07
     334:	f8 87       	std	Y+8, r31	; 0x08

		tempNum = *mod - tempNum;  // Specialni uprava pro zaporne cislo
     336:	b0 95       	com	r27
     338:	a0 95       	com	r26
     33a:	90 95       	com	r25
     33c:	81 95       	neg	r24
     33e:	9f 4f       	sbci	r25, 0xFF	; 255
     340:	af 4f       	sbci	r26, 0xFF	; 255
     342:	bf 4f       	sbci	r27, 0xFF	; 255
     344:	2c 01       	movw	r4, r24
     346:	3d 01       	movw	r6, r26
     348:	77 0c       	add	r7, r7
     34a:	44 08       	sbc	r4, r4
     34c:	54 2c       	mov	r5, r4
     34e:	32 01       	movw	r6, r4
     350:	a9 80       	ldd	r10, Y+1	; 0x01
     352:	ba 80       	ldd	r11, Y+2	; 0x02
     354:	cb 80       	ldd	r12, Y+3	; 0x03
     356:	dc 80       	ldd	r13, Y+4	; 0x04
     358:	ed 80       	ldd	r14, Y+5	; 0x05
     35a:	fe 80       	ldd	r15, Y+6	; 0x06
     35c:	0f 81       	ldd	r16, Y+7	; 0x07
     35e:	1f 2f       	mov	r17, r31
     360:	28 2f       	mov	r18, r24
     362:	39 2f       	mov	r19, r25
     364:	4a 2f       	mov	r20, r26
     366:	5b 2f       	mov	r21, r27
     368:	64 2d       	mov	r22, r4
     36a:	74 2d       	mov	r23, r4
     36c:	84 2d       	mov	r24, r4
     36e:	94 2d       	mov	r25, r4
     370:	0e 94 2b 19 	call	0x3256	; 0x3256 <__moddi3>
     374:	82 2e       	mov	r8, r18
     376:	93 2e       	mov	r9, r19
     378:	a4 2e       	mov	r10, r20
     37a:	b5 2e       	mov	r11, r21
     37c:	09 81       	ldd	r16, Y+1	; 0x01
     37e:	1a 81       	ldd	r17, Y+2	; 0x02
     380:	2b 81       	ldd	r18, Y+3	; 0x03
     382:	3c 81       	ldd	r19, Y+4	; 0x04
     384:	08 19       	sub	r16, r8
     386:	19 09       	sbc	r17, r9
     388:	2a 09       	sbc	r18, r10
     38a:	3b 09       	sbc	r19, r11

		return tempNum;    // Navrat vypocitane hodnoty cyklu
     38c:	a0 2f       	mov	r26, r16
     38e:	f1 2f       	mov	r31, r17
     390:	e2 2f       	mov	r30, r18
     392:	b3 2f       	mov	r27, r19
     394:	33 0f       	add	r19, r19
     396:	00 0b       	sbc	r16, r16
     398:	10 2f       	mov	r17, r16
     39a:	98 01       	movw	r18, r16
     39c:	60 2f       	mov	r22, r16
     39e:	70 2f       	mov	r23, r16
     3a0:	80 2f       	mov	r24, r16
     3a2:	90 2f       	mov	r25, r16
     3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <modulo+0x154>
	}

	return 0;
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
}
     3b6:	2a 2f       	mov	r18, r26
     3b8:	3f 2f       	mov	r19, r31
     3ba:	4e 2f       	mov	r20, r30
     3bc:	5b 2f       	mov	r21, r27
     3be:	28 96       	adiw	r28, 0x08	; 8
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	7f 90       	pop	r7
     3e4:	6f 90       	pop	r6
     3e6:	5f 90       	pop	r5
     3e8:	4f 90       	pop	r4
     3ea:	08 95       	ret

000003ec <power>:

//////////////////////////////////
//// POWER ///////////////////////
//////////////////////////////////
int64_t power(int64_t *num, int64_t *pownum)
{
     3ec:	2f 92       	push	r2
     3ee:	3f 92       	push	r3
     3f0:	4f 92       	push	r4
     3f2:	5f 92       	push	r5
     3f4:	6f 92       	push	r6
     3f6:	7f 92       	push	r7
     3f8:	8f 92       	push	r8
     3fa:	9f 92       	push	r9
     3fc:	af 92       	push	r10
     3fe:	bf 92       	push	r11
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	2e 97       	sbiw	r28, 0x0e	; 14
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	dc 01       	movw	r26, r24
     422:	fb 01       	movw	r30, r22

	int64_t numpow = *num;
     424:	8c 91       	ld	r24, X
     426:	8d 83       	std	Y+5, r24	; 0x05
     428:	11 96       	adiw	r26, 0x01	; 1
     42a:	9c 91       	ld	r25, X
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	9e 83       	std	Y+6, r25	; 0x06
     430:	12 96       	adiw	r26, 0x02	; 2
     432:	8c 91       	ld	r24, X
     434:	12 97       	sbiw	r26, 0x02	; 2
     436:	8f 83       	std	Y+7, r24	; 0x07
     438:	13 96       	adiw	r26, 0x03	; 3
     43a:	9c 91       	ld	r25, X
     43c:	13 97       	sbiw	r26, 0x03	; 3
     43e:	98 87       	std	Y+8, r25	; 0x08
     440:	14 96       	adiw	r26, 0x04	; 4
     442:	8c 91       	ld	r24, X
     444:	14 97       	sbiw	r26, 0x04	; 4
     446:	89 87       	std	Y+9, r24	; 0x09
     448:	15 96       	adiw	r26, 0x05	; 5
     44a:	9c 91       	ld	r25, X
     44c:	15 97       	sbiw	r26, 0x05	; 5
     44e:	9a 87       	std	Y+10, r25	; 0x0a
     450:	16 96       	adiw	r26, 0x06	; 6
     452:	8c 91       	ld	r24, X
     454:	16 97       	sbiw	r26, 0x06	; 6
     456:	8b 87       	std	Y+11, r24	; 0x0b
     458:	17 96       	adiw	r26, 0x07	; 7
     45a:	9c 91       	ld	r25, X
     45c:	9c 87       	std	Y+12, r25	; 0x0c

	for(int i = 1; i < (*pownum); i++)
     45e:	80 81       	ld	r24, Z
     460:	89 83       	std	Y+1, r24	; 0x01
     462:	91 81       	ldd	r25, Z+1	; 0x01
     464:	9a 83       	std	Y+2, r25	; 0x02
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	8b 83       	std	Y+3, r24	; 0x03
     46a:	93 81       	ldd	r25, Z+3	; 0x03
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	94 80       	ldd	r9, Z+4	; 0x04
     470:	85 80       	ldd	r8, Z+5	; 0x05
     472:	76 80       	ldd	r7, Z+6	; 0x06
     474:	67 80       	ldd	r6, Z+7	; 0x07
     476:	29 81       	ldd	r18, Y+1	; 0x01
     478:	3a 81       	ldd	r19, Y+2	; 0x02
     47a:	48 2f       	mov	r20, r24
     47c:	59 2f       	mov	r21, r25
     47e:	69 2d       	mov	r22, r9
     480:	78 2d       	mov	r23, r8
     482:	87 2d       	mov	r24, r7
     484:	96 2d       	mov	r25, r6
     486:	a1 e0       	ldi	r26, 0x01	; 1
     488:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     48c:	09 f0       	breq	.+2      	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     48e:	0c f4       	brge	.+2      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     490:	48 c0       	rjmp	.+144    	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
     492:	4d 80       	ldd	r4, Y+5	; 0x05
     494:	5e 80       	ldd	r5, Y+6	; 0x06
     496:	bf 81       	ldd	r27, Y+7	; 0x07
     498:	a8 85       	ldd	r26, Y+8	; 0x08
     49a:	f9 85       	ldd	r31, Y+9	; 0x09
     49c:	ea 85       	ldd	r30, Y+10	; 0x0a
     49e:	2b 84       	ldd	r2, Y+11	; 0x0b
     4a0:	3c 84       	ldd	r3, Y+12	; 0x0c
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9e 87       	std	Y+14, r25	; 0x0e
     4a8:	8d 87       	std	Y+13, r24	; 0x0d
     4aa:	86 2d       	mov	r24, r6
     4ac:	67 2c       	mov	r6, r7
     4ae:	78 2c       	mov	r7, r8
     4b0:	89 2c       	mov	r8, r9
     4b2:	93 2c       	mov	r9, r3
     4b4:	38 2e       	mov	r3, r24
	{

		numpow *= *num;
     4b6:	ad 80       	ldd	r10, Y+5	; 0x05
     4b8:	be 80       	ldd	r11, Y+6	; 0x06
     4ba:	cf 80       	ldd	r12, Y+7	; 0x07
     4bc:	d8 84       	ldd	r13, Y+8	; 0x08
     4be:	e9 84       	ldd	r14, Y+9	; 0x09
     4c0:	fa 84       	ldd	r15, Y+10	; 0x0a
     4c2:	0b 85       	ldd	r16, Y+11	; 0x0b
     4c4:	1c 85       	ldd	r17, Y+12	; 0x0c
     4c6:	24 2d       	mov	r18, r4
     4c8:	35 2d       	mov	r19, r5
     4ca:	4b 2f       	mov	r20, r27
     4cc:	5a 2f       	mov	r21, r26
     4ce:	6f 2f       	mov	r22, r31
     4d0:	7e 2f       	mov	r23, r30
     4d2:	82 2d       	mov	r24, r2
     4d4:	99 2d       	mov	r25, r9
     4d6:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__muldi3>
     4da:	42 2e       	mov	r4, r18
     4dc:	53 2e       	mov	r5, r19
     4de:	b4 2f       	mov	r27, r20
     4e0:	a5 2f       	mov	r26, r21
     4e2:	f6 2f       	mov	r31, r22
     4e4:	e7 2f       	mov	r30, r23
     4e6:	28 2e       	mov	r2, r24
     4e8:	99 2e       	mov	r9, r25
int64_t power(int64_t *num, int64_t *pownum)
{

	int64_t numpow = *num;

	for(int i = 1; i < (*pownum); i++)
     4ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	9e 87       	std	Y+14, r25	; 0x0e
     4f2:	8d 87       	std	Y+13, r24	; 0x0d
     4f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     4f6:	99 0f       	add	r25, r25
     4f8:	99 0b       	sbc	r25, r25
     4fa:	2d 85       	ldd	r18, Y+13	; 0x0d
     4fc:	3e 85       	ldd	r19, Y+14	; 0x0e
     4fe:	49 2f       	mov	r20, r25
     500:	59 2f       	mov	r21, r25
     502:	69 2f       	mov	r22, r25
     504:	79 2f       	mov	r23, r25
     506:	89 2f       	mov	r24, r25
     508:	a9 80       	ldd	r10, Y+1	; 0x01
     50a:	ba 80       	ldd	r11, Y+2	; 0x02
     50c:	cb 80       	ldd	r12, Y+3	; 0x03
     50e:	dc 80       	ldd	r13, Y+4	; 0x04
     510:	e8 2c       	mov	r14, r8
     512:	f7 2c       	mov	r15, r7
     514:	06 2d       	mov	r16, r6
     516:	13 2d       	mov	r17, r3
     518:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
     51c:	64 f2       	brlt	.-104    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     51e:	39 2c       	mov	r3, r9
     520:	08 c0       	rjmp	.+16     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
//// POWER ///////////////////////
//////////////////////////////////
int64_t power(int64_t *num, int64_t *pownum)
{

	int64_t numpow = *num;
     522:	4d 80       	ldd	r4, Y+5	; 0x05
     524:	5e 80       	ldd	r5, Y+6	; 0x06
     526:	bf 81       	ldd	r27, Y+7	; 0x07
     528:	a8 85       	ldd	r26, Y+8	; 0x08
     52a:	f9 85       	ldd	r31, Y+9	; 0x09
     52c:	ea 85       	ldd	r30, Y+10	; 0x0a
     52e:	2b 84       	ldd	r2, Y+11	; 0x0b
     530:	3c 84       	ldd	r3, Y+12	; 0x0c

		numpow *= *num;
	}
	
	return numpow;
}
     532:	24 2d       	mov	r18, r4
     534:	35 2d       	mov	r19, r5
     536:	4b 2f       	mov	r20, r27
     538:	5a 2f       	mov	r21, r26
     53a:	6f 2f       	mov	r22, r31
     53c:	7e 2f       	mov	r23, r30
     53e:	82 2d       	mov	r24, r2
     540:	93 2d       	mov	r25, r3
     542:	2e 96       	adiw	r28, 0x0e	; 14
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	7f 90       	pop	r7
     568:	6f 90       	pop	r6
     56a:	5f 90       	pop	r5
     56c:	4f 90       	pop	r4
     56e:	3f 90       	pop	r3
     570:	2f 90       	pop	r2
     572:	08 95       	ret

00000574 <XPart>:

//////////////////////////////////
//// COMP. ARRAY X ///////////////
//////////////////////////////////
void XPart(int64_t  *P, int64_t  *A, int64_t  *B, int64_t  nums[])
{
     574:	2f 92       	push	r2
     576:	3f 92       	push	r3
     578:	4f 92       	push	r4
     57a:	5f 92       	push	r5
     57c:	6f 92       	push	r6
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	ea 97       	sbiw	r28, 0x3a	; 58
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	db 01       	movw	r26, r22
     5aa:	6a 01       	movw	r12, r20
     5ac:	02 2f       	mov	r16, r18
     5ae:	13 2f       	mov	r17, r19

	int64_t  p, a,b, mocnina, compute, x;

	p = *P;
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	42 81       	ldd	r20, Z+2	; 0x02
     5b8:	53 81       	ldd	r21, Z+3	; 0x03
     5ba:	64 81       	ldd	r22, Z+4	; 0x04
     5bc:	75 81       	ldd	r23, Z+5	; 0x05
     5be:	f6 80       	ldd	r15, Z+6	; 0x06
     5c0:	97 81       	ldd	r25, Z+7	; 0x07
     5c2:	29 83       	std	Y+1, r18	; 0x01
     5c4:	3a 83       	std	Y+2, r19	; 0x02
     5c6:	4b 83       	std	Y+3, r20	; 0x03
     5c8:	5c 83       	std	Y+4, r21	; 0x04
     5ca:	6d 83       	std	Y+5, r22	; 0x05
     5cc:	7e 83       	std	Y+6, r23	; 0x06
     5ce:	ff 82       	std	Y+7, r15	; 0x07
     5d0:	98 87       	std	Y+8, r25	; 0x08
	a = *A;
     5d2:	fc 91       	ld	r31, X
     5d4:	fb a7       	std	Y+43, r31	; 0x2b
     5d6:	11 96       	adiw	r26, 0x01	; 1
     5d8:	8c 91       	ld	r24, X
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	8c a7       	std	Y+44, r24	; 0x2c
     5de:	12 96       	adiw	r26, 0x02	; 2
     5e0:	ec 91       	ld	r30, X
     5e2:	12 97       	sbiw	r26, 0x02	; 2
     5e4:	ed a7       	std	Y+45, r30	; 0x2d
     5e6:	13 96       	adiw	r26, 0x03	; 3
     5e8:	fc 91       	ld	r31, X
     5ea:	13 97       	sbiw	r26, 0x03	; 3
     5ec:	fe a7       	std	Y+46, r31	; 0x2e
     5ee:	14 96       	adiw	r26, 0x04	; 4
     5f0:	8c 91       	ld	r24, X
     5f2:	14 97       	sbiw	r26, 0x04	; 4
     5f4:	8f a7       	std	Y+47, r24	; 0x2f
     5f6:	15 96       	adiw	r26, 0x05	; 5
     5f8:	ec 91       	ld	r30, X
     5fa:	15 97       	sbiw	r26, 0x05	; 5
     5fc:	e8 ab       	std	Y+48, r30	; 0x30
     5fe:	16 96       	adiw	r26, 0x06	; 6
     600:	fc 91       	ld	r31, X
     602:	16 97       	sbiw	r26, 0x06	; 6
     604:	f9 ab       	std	Y+49, r31	; 0x31
     606:	17 96       	adiw	r26, 0x07	; 7
     608:	8c 91       	ld	r24, X
     60a:	8a ab       	std	Y+50, r24	; 0x32
	b = *B;
     60c:	f6 01       	movw	r30, r12
     60e:	f0 81       	ld	r31, Z
     610:	fb ab       	std	Y+51, r31	; 0x33
     612:	f6 01       	movw	r30, r12
     614:	f1 81       	ldd	r31, Z+1	; 0x01
     616:	fc ab       	std	Y+52, r31	; 0x34
     618:	f6 01       	movw	r30, r12
     61a:	f2 81       	ldd	r31, Z+2	; 0x02
     61c:	fd ab       	std	Y+53, r31	; 0x35
     61e:	f6 01       	movw	r30, r12
     620:	f3 81       	ldd	r31, Z+3	; 0x03
     622:	fe ab       	std	Y+54, r31	; 0x36
     624:	f6 01       	movw	r30, r12
     626:	f4 81       	ldd	r31, Z+4	; 0x04
     628:	ff ab       	std	Y+55, r31	; 0x37
     62a:	f6 01       	movw	r30, r12
     62c:	f5 81       	ldd	r31, Z+5	; 0x05
     62e:	f8 af       	std	Y+56, r31	; 0x38
     630:	f6 01       	movw	r30, r12
     632:	f6 81       	ldd	r31, Z+6	; 0x06
     634:	f9 af       	std	Y+57, r31	; 0x39
     636:	f6 01       	movw	r30, r12
     638:	f7 81       	ldd	r31, Z+7	; 0x07
     63a:	fa af       	std	Y+58, r31	; 0x3a
	mocnina = 3; // Weierstrass method
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	89 87       	std	Y+9, r24	; 0x09
     640:	1a 86       	std	Y+10, r1	; 0x0a
     642:	1b 86       	std	Y+11, r1	; 0x0b
     644:	1c 86       	std	Y+12, r1	; 0x0c
     646:	1d 86       	std	Y+13, r1	; 0x0d
     648:	1e 86       	std	Y+14, r1	; 0x0e
     64a:	1f 86       	std	Y+15, r1	; 0x0f
     64c:	18 8a       	std	Y+16, r1	; 0x10

	// Weierstrass equation y^2 = x^3 + ax + b

	x = 0; // The first test is x=0, next ones are solved by for cycle
     64e:	19 8e       	std	Y+25, r1	; 0x19
     650:	1a 8e       	std	Y+26, r1	; 0x1a
     652:	1b 8e       	std	Y+27, r1	; 0x1b
     654:	1c 8e       	std	Y+28, r1	; 0x1c
     656:	1d 8e       	std	Y+29, r1	; 0x1d
     658:	1e 8e       	std	Y+30, r1	; 0x1e
     65a:	1f 8e       	std	Y+31, r1	; 0x1f
     65c:	18 a2       	std	Y+32, r1	; 0x20

	for(int64_t i = 0; i <= p; i++)
     65e:	8f 2d       	mov	r24, r15
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     666:	0c f4       	brge	.+2      	; 0x66a <XPart+0xf6>
     668:	91 c0       	rjmp	.+290    	; 0x78c <XPart+0x218>
     66a:	80 2e       	mov	r8, r16
     66c:	91 2e       	mov	r9, r17
     66e:	21 2c       	mov	r2, r1
     670:	31 2c       	mov	r3, r1
     672:	41 2c       	mov	r4, r1
     674:	51 2c       	mov	r5, r1
     676:	61 2c       	mov	r6, r1
     678:	71 2c       	mov	r7, r1
     67a:	19 a2       	std	Y+33, r1	; 0x21
     67c:	1a a2       	std	Y+34, r1	; 0x22
	{

		compute = power(&x, &mocnina) + a * x + b;
     67e:	be 01       	movw	r22, r28
     680:	67 5f       	subi	r22, 0xF7	; 247
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	ce 01       	movw	r24, r28
     686:	49 96       	adiw	r24, 0x19	; 25
     688:	b1 de       	rcall	.-670    	; 0x3ec <power>
     68a:	2b a3       	std	Y+35, r18	; 0x23
     68c:	3c a3       	std	Y+36, r19	; 0x24
     68e:	4d a3       	std	Y+37, r20	; 0x25
     690:	5e a3       	std	Y+38, r21	; 0x26
     692:	6f a3       	std	Y+39, r22	; 0x27
     694:	78 a7       	std	Y+40, r23	; 0x28
     696:	89 a7       	std	Y+41, r24	; 0x29
     698:	9a a7       	std	Y+42, r25	; 0x2a
     69a:	a9 8c       	ldd	r10, Y+25	; 0x19
     69c:	ba 8c       	ldd	r11, Y+26	; 0x1a
     69e:	cb 8c       	ldd	r12, Y+27	; 0x1b
     6a0:	dc 8c       	ldd	r13, Y+28	; 0x1c
     6a2:	ed 8c       	ldd	r14, Y+29	; 0x1d
     6a4:	fe 8c       	ldd	r15, Y+30	; 0x1e
     6a6:	0f 8d       	ldd	r16, Y+31	; 0x1f
     6a8:	18 a1       	ldd	r17, Y+32	; 0x20
     6aa:	2b a5       	ldd	r18, Y+43	; 0x2b
     6ac:	3c a5       	ldd	r19, Y+44	; 0x2c
     6ae:	4d a5       	ldd	r20, Y+45	; 0x2d
     6b0:	5e a5       	ldd	r21, Y+46	; 0x2e
     6b2:	6f a5       	ldd	r22, Y+47	; 0x2f
     6b4:	78 a9       	ldd	r23, Y+48	; 0x30
     6b6:	89 a9       	ldd	r24, Y+49	; 0x31
     6b8:	9a a9       	ldd	r25, Y+50	; 0x32
     6ba:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__muldi3>
     6be:	ab a0       	ldd	r10, Y+35	; 0x23
     6c0:	bc a0       	ldd	r11, Y+36	; 0x24
     6c2:	cd a0       	ldd	r12, Y+37	; 0x25
     6c4:	de a0       	ldd	r13, Y+38	; 0x26
     6c6:	ef a0       	ldd	r14, Y+39	; 0x27
     6c8:	f8 a4       	ldd	r15, Y+40	; 0x28
     6ca:	09 a5       	ldd	r16, Y+41	; 0x29
     6cc:	1a a5       	ldd	r17, Y+42	; 0x2a
     6ce:	0e 94 32 1a 	call	0x3464	; 0x3464 <__adddi3>
     6d2:	ab a8       	ldd	r10, Y+51	; 0x33
     6d4:	bc a8       	ldd	r11, Y+52	; 0x34
     6d6:	cd a8       	ldd	r12, Y+53	; 0x35
     6d8:	de a8       	ldd	r13, Y+54	; 0x36
     6da:	ef a8       	ldd	r14, Y+55	; 0x37
     6dc:	f8 ac       	ldd	r15, Y+56	; 0x38
     6de:	09 ad       	ldd	r16, Y+57	; 0x39
     6e0:	1a ad       	ldd	r17, Y+58	; 0x3a
     6e2:	0e 94 32 1a 	call	0x3464	; 0x3464 <__adddi3>
     6e6:	29 8b       	std	Y+17, r18	; 0x11
     6e8:	3a 8b       	std	Y+18, r19	; 0x12
     6ea:	4b 8b       	std	Y+19, r20	; 0x13
     6ec:	5c 8b       	std	Y+20, r21	; 0x14
     6ee:	6d 8b       	std	Y+21, r22	; 0x15
     6f0:	7e 8b       	std	Y+22, r23	; 0x16
     6f2:	8f 8b       	std	Y+23, r24	; 0x17
     6f4:	98 8f       	std	Y+24, r25	; 0x18

		nums[i] = modulo(&compute, &p);
     6f6:	be 01       	movw	r22, r28
     6f8:	6f 5f       	subi	r22, 0xFF	; 255
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	ce 01       	movw	r24, r28
     6fe:	41 96       	adiw	r24, 0x11	; 17
     700:	b0 dd       	rcall	.-1184   	; 0x262 <modulo>
     702:	f4 01       	movw	r30, r8
     704:	20 83       	st	Z, r18
     706:	31 83       	std	Z+1, r19	; 0x01
     708:	42 83       	std	Z+2, r20	; 0x02
     70a:	53 83       	std	Z+3, r21	; 0x03
     70c:	64 83       	std	Z+4, r22	; 0x04
     70e:	75 83       	std	Z+5, r23	; 0x05
     710:	86 83       	std	Z+6, r24	; 0x06
     712:	97 83       	std	Z+7, r25	; 0x07
     714:	f8 e0       	ldi	r31, 0x08	; 8
     716:	8f 0e       	add	r8, r31
     718:	91 1c       	adc	r9, r1

		x++;
     71a:	29 8d       	ldd	r18, Y+25	; 0x19
     71c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     71e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     720:	5c 8d       	ldd	r21, Y+28	; 0x1c
     722:	6d 8d       	ldd	r22, Y+29	; 0x1d
     724:	7e 8d       	ldd	r23, Y+30	; 0x1e
     726:	8f 8d       	ldd	r24, Y+31	; 0x1f
     728:	98 a1       	ldd	r25, Y+32	; 0x20
     72a:	a1 e0       	ldi	r26, 0x01	; 1
     72c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     730:	29 8f       	std	Y+25, r18	; 0x19
     732:	3a 8f       	std	Y+26, r19	; 0x1a
     734:	4b 8f       	std	Y+27, r20	; 0x1b
     736:	5c 8f       	std	Y+28, r21	; 0x1c
     738:	6d 8f       	std	Y+29, r22	; 0x1d
     73a:	7e 8f       	std	Y+30, r23	; 0x1e
     73c:	8f 8f       	std	Y+31, r24	; 0x1f
     73e:	98 a3       	std	Y+32, r25	; 0x20

	// Weierstrass equation y^2 = x^3 + ax + b

	x = 0; // The first test is x=0, next ones are solved by for cycle

	for(int64_t i = 0; i <= p; i++)
     740:	27 2d       	mov	r18, r7
     742:	36 2d       	mov	r19, r6
     744:	45 2d       	mov	r20, r5
     746:	54 2d       	mov	r21, r4
     748:	63 2d       	mov	r22, r3
     74a:	72 2d       	mov	r23, r2
     74c:	89 a1       	ldd	r24, Y+33	; 0x21
     74e:	9a a1       	ldd	r25, Y+34	; 0x22
     750:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     754:	a2 2e       	mov	r10, r18
     756:	b3 2e       	mov	r11, r19
     758:	c4 2e       	mov	r12, r20
     75a:	d5 2e       	mov	r13, r21
     75c:	e6 2e       	mov	r14, r22
     75e:	f7 2e       	mov	r15, r23
     760:	08 2f       	mov	r16, r24
     762:	19 2f       	mov	r17, r25
     764:	72 2e       	mov	r7, r18
     766:	63 2e       	mov	r6, r19
     768:	54 2e       	mov	r5, r20
     76a:	45 2e       	mov	r4, r21
     76c:	36 2e       	mov	r3, r22
     76e:	27 2e       	mov	r2, r23
     770:	89 a3       	std	Y+33, r24	; 0x21
     772:	9a a3       	std	Y+34, r25	; 0x22
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	3a 81       	ldd	r19, Y+2	; 0x02
     778:	4b 81       	ldd	r20, Y+3	; 0x03
     77a:	5c 81       	ldd	r21, Y+4	; 0x04
     77c:	6d 81       	ldd	r22, Y+5	; 0x05
     77e:	7e 81       	ldd	r23, Y+6	; 0x06
     780:	8f 81       	ldd	r24, Y+7	; 0x07
     782:	98 85       	ldd	r25, Y+8	; 0x08
     784:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
     788:	0c f0       	brlt	.+2      	; 0x78c <XPart+0x218>
     78a:	79 cf       	rjmp	.-270    	; 0x67e <XPart+0x10a>
		nums[i] = modulo(&compute, &p);

		x++;
	}

}
     78c:	ea 96       	adiw	r28, 0x3a	; 58
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	7f 90       	pop	r7
     7b2:	6f 90       	pop	r6
     7b4:	5f 90       	pop	r5
     7b6:	4f 90       	pop	r4
     7b8:	3f 90       	pop	r3
     7ba:	2f 90       	pop	r2
     7bc:	08 95       	ret

000007be <YPart>:

//////////////////////////////////
//// COMP. ARRAY Y and Y^2 ///////
//////////////////////////////////
void YPart(int64_t  *modulus, int64_t nums[])
{
     7be:	2f 92       	push	r2
     7c0:	3f 92       	push	r3
     7c2:	4f 92       	push	r4
     7c4:	5f 92       	push	r5
     7c6:	6f 92       	push	r6
     7c8:	7f 92       	push	r7
     7ca:	8f 92       	push	r8
     7cc:	9f 92       	push	r9
     7ce:	af 92       	push	r10
     7d0:	bf 92       	push	r11
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	a2 97       	sbiw	r28, 0x22	; 34
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	fc 01       	movw	r30, r24
     7f4:	4b 01       	movw	r8, r22

	int64_t iter, mod, mocnitel, number;

	// number aux. variable

	iter = *modulus;
     7f6:	20 81       	ld	r18, Z
     7f8:	31 81       	ldd	r19, Z+1	; 0x01
     7fa:	42 81       	ldd	r20, Z+2	; 0x02
     7fc:	53 81       	ldd	r21, Z+3	; 0x03
     7fe:	64 81       	ldd	r22, Z+4	; 0x04
     800:	75 81       	ldd	r23, Z+5	; 0x05
     802:	86 81       	ldd	r24, Z+6	; 0x06
     804:	97 81       	ldd	r25, Z+7	; 0x07
	mod = *modulus;
     806:	29 83       	std	Y+1, r18	; 0x01
     808:	3a 83       	std	Y+2, r19	; 0x02
     80a:	4b 83       	std	Y+3, r20	; 0x03
     80c:	5c 83       	std	Y+4, r21	; 0x04
     80e:	6d 83       	std	Y+5, r22	; 0x05
     810:	7e 83       	std	Y+6, r23	; 0x06
     812:	8f 83       	std	Y+7, r24	; 0x07
     814:	98 87       	std	Y+8, r25	; 0x08

	mocnitel = 2;   // Weierstrass method
     816:	e2 e0       	ldi	r30, 0x02	; 2
     818:	e9 87       	std	Y+9, r30	; 0x09
     81a:	1a 86       	std	Y+10, r1	; 0x0a
     81c:	1b 86       	std	Y+11, r1	; 0x0b
     81e:	1c 86       	std	Y+12, r1	; 0x0c
     820:	1d 86       	std	Y+13, r1	; 0x0d
     822:	1e 86       	std	Y+14, r1	; 0x0e
     824:	1f 86       	std	Y+15, r1	; 0x0f
     826:	18 8a       	std	Y+16, r1	; 0x10
	iter = ((iter - 1) / 2);  // Count of iteration
     828:	af ef       	ldi	r26, 0xFF	; 255
     82a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     82e:	f2 2e       	mov	r15, r18
     830:	03 2f       	mov	r16, r19
     832:	14 2f       	mov	r17, r20
     834:	b5 2f       	mov	r27, r21
     836:	f6 2f       	mov	r31, r22
     838:	e7 2f       	mov	r30, r23
     83a:	38 2e       	mov	r3, r24
     83c:	49 2e       	mov	r4, r25
     83e:	a0 e0       	ldi	r26, 0x00	; 0
     840:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     844:	5c f4       	brge	.+22     	; 0x85c <YPart+0x9e>
     846:	a1 e0       	ldi	r26, 0x01	; 1
     848:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     84c:	f2 2e       	mov	r15, r18
     84e:	03 2f       	mov	r16, r19
     850:	14 2f       	mov	r17, r20
     852:	b5 2f       	mov	r27, r21
     854:	f6 2f       	mov	r31, r22
     856:	e7 2f       	mov	r30, r23
     858:	38 2e       	mov	r3, r24
     85a:	49 2e       	mov	r4, r25
     85c:	2f 2d       	mov	r18, r15
     85e:	30 2f       	mov	r19, r16
     860:	41 2f       	mov	r20, r17
     862:	5b 2f       	mov	r21, r27
     864:	6f 2f       	mov	r22, r31
     866:	7e 2f       	mov	r23, r30
     868:	83 2d       	mov	r24, r3
     86a:	94 2d       	mov	r25, r4
     86c:	01 e0       	ldi	r16, 0x01	; 1
     86e:	0e 94 14 1a 	call	0x3428	; 0x3428 <__ashrdi3>
     872:	29 a3       	std	Y+33, r18	; 0x21
     874:	3a a3       	std	Y+34, r19	; 0x22
     876:	74 2e       	mov	r7, r20
     878:	65 2e       	mov	r6, r21
     87a:	56 2e       	mov	r5, r22
     87c:	47 2e       	mov	r4, r23
     87e:	38 2e       	mov	r3, r24
     880:	29 2e       	mov	r2, r25


	for(int64_t  i = 1; i <= iter; i++)
     882:	e1 e0       	ldi	r30, 0x01	; 1
     884:	e9 8f       	std	Y+25, r30	; 0x19
     886:	1a 8e       	std	Y+26, r1	; 0x1a
     888:	1b 8e       	std	Y+27, r1	; 0x1b
     88a:	1c 8e       	std	Y+28, r1	; 0x1c
     88c:	1d 8e       	std	Y+29, r1	; 0x1d
     88e:	1e 8e       	std	Y+30, r1	; 0x1e
     890:	1f 8e       	std	Y+31, r1	; 0x1f
     892:	18 a2       	std	Y+32, r1	; 0x20
     894:	a0 e0       	ldi	r26, 0x00	; 0
     896:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     89a:	09 f0       	breq	.+2      	; 0x89e <YPart+0xe0>
     89c:	0c f4       	brge	.+2      	; 0x8a0 <YPart+0xe2>
     89e:	4e c0       	rjmp	.+156    	; 0x93c <YPart+0x17e>
	{

		number = power(&i, &mocnitel);
     8a0:	be 01       	movw	r22, r28
     8a2:	67 5f       	subi	r22, 0xF7	; 247
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	ce 01       	movw	r24, r28
     8a8:	49 96       	adiw	r24, 0x19	; 25
     8aa:	a0 dd       	rcall	.-1216   	; 0x3ec <power>
     8ac:	29 8b       	std	Y+17, r18	; 0x11
     8ae:	3a 8b       	std	Y+18, r19	; 0x12
     8b0:	4b 8b       	std	Y+19, r20	; 0x13
     8b2:	5c 8b       	std	Y+20, r21	; 0x14
     8b4:	6d 8b       	std	Y+21, r22	; 0x15
     8b6:	7e 8b       	std	Y+22, r23	; 0x16
     8b8:	8f 8b       	std	Y+23, r24	; 0x17
     8ba:	98 8f       	std	Y+24, r25	; 0x18
		nums[i] = modulo(&number, &mod);
     8bc:	09 8d       	ldd	r16, Y+25	; 0x19
     8be:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8c0:	00 0f       	add	r16, r16
     8c2:	11 1f       	adc	r17, r17
     8c4:	00 0f       	add	r16, r16
     8c6:	11 1f       	adc	r17, r17
     8c8:	00 0f       	add	r16, r16
     8ca:	11 1f       	adc	r17, r17
     8cc:	08 0d       	add	r16, r8
     8ce:	19 1d       	adc	r17, r9
     8d0:	be 01       	movw	r22, r28
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	ce 01       	movw	r24, r28
     8d8:	41 96       	adiw	r24, 0x11	; 17
     8da:	c3 dc       	rcall	.-1658   	; 0x262 <modulo>
     8dc:	f8 01       	movw	r30, r16
     8de:	20 83       	st	Z, r18
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	42 83       	std	Z+2, r20	; 0x02
     8e4:	53 83       	std	Z+3, r21	; 0x03
     8e6:	64 83       	std	Z+4, r22	; 0x04
     8e8:	75 83       	std	Z+5, r23	; 0x05
     8ea:	86 83       	std	Z+6, r24	; 0x06
     8ec:	97 83       	std	Z+7, r25	; 0x07

	mocnitel = 2;   // Weierstrass method
	iter = ((iter - 1) / 2);  // Count of iteration


	for(int64_t  i = 1; i <= iter; i++)
     8ee:	29 8d       	ldd	r18, Y+25	; 0x19
     8f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8f2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8f4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8fc:	98 a1       	ldd	r25, Y+32	; 0x20
     8fe:	a1 e0       	ldi	r26, 0x01	; 1
     900:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     904:	a2 2e       	mov	r10, r18
     906:	b3 2e       	mov	r11, r19
     908:	c4 2e       	mov	r12, r20
     90a:	d5 2e       	mov	r13, r21
     90c:	e6 2e       	mov	r14, r22
     90e:	f7 2e       	mov	r15, r23
     910:	08 2f       	mov	r16, r24
     912:	19 2f       	mov	r17, r25
     914:	29 8f       	std	Y+25, r18	; 0x19
     916:	3a 8f       	std	Y+26, r19	; 0x1a
     918:	4b 8f       	std	Y+27, r20	; 0x1b
     91a:	5c 8f       	std	Y+28, r21	; 0x1c
     91c:	6d 8f       	std	Y+29, r22	; 0x1d
     91e:	7e 8f       	std	Y+30, r23	; 0x1e
     920:	8f 8f       	std	Y+31, r24	; 0x1f
     922:	98 a3       	std	Y+32, r25	; 0x20
     924:	29 a1       	ldd	r18, Y+33	; 0x21
     926:	3a a1       	ldd	r19, Y+34	; 0x22
     928:	47 2d       	mov	r20, r7
     92a:	56 2d       	mov	r21, r6
     92c:	65 2d       	mov	r22, r5
     92e:	74 2d       	mov	r23, r4
     930:	83 2d       	mov	r24, r3
     932:	92 2d       	mov	r25, r2
     934:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
     938:	0c f0       	brlt	.+2      	; 0x93c <YPart+0x17e>
     93a:	b2 cf       	rjmp	.-156    	; 0x8a0 <YPart+0xe2>
		number = power(&i, &mocnitel);
		nums[i] = modulo(&number, &mod);

	}

	nums[0] = 0;   // Fixed according the Weierstrass method
     93c:	f4 01       	movw	r30, r8
     93e:	10 82       	st	Z, r1
     940:	11 82       	std	Z+1, r1	; 0x01
     942:	12 82       	std	Z+2, r1	; 0x02
     944:	13 82       	std	Z+3, r1	; 0x03
     946:	14 82       	std	Z+4, r1	; 0x04
     948:	15 82       	std	Z+5, r1	; 0x05
     94a:	16 82       	std	Z+6, r1	; 0x06
     94c:	17 82       	std	Z+7, r1	; 0x07

     94e:	a2 96       	adiw	r28, 0x22	; 34
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	5f 90       	pop	r5
     978:	4f 90       	pop	r4
     97a:	3f 90       	pop	r3
     97c:	2f 90       	pop	r2
     97e:	08 95       	ret

00000980 <TheFirstPoint>:

//////////////////////////////////////////////////////
//// Finder of the first point and order of group ///
/////////////////////////////////////////////////////
void TheFirstPoint(int64_t *MOD, int64_t *A, int64_t *B, int64_t *Xfirst, int64_t *Yfirst, int64_t *OrderG)
{
     980:	2f 92       	push	r2
     982:	3f 92       	push	r3
     984:	4f 92       	push	r4
     986:	5f 92       	push	r5
     988:	6f 92       	push	r6
     98a:	7f 92       	push	r7
     98c:	8f 92       	push	r8
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	c8 5c       	subi	r28, 0xC8	; 200
     9aa:	de 43       	sbci	r29, 0x3E	; 62
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	db 01       	movw	r26, r22
     9b8:	c7 56       	subi	r28, 0x67	; 103
     9ba:	d1 4c       	sbci	r29, 0xC1	; 193
     9bc:	39 83       	std	Y+1, r19	; 0x01
     9be:	28 83       	st	Y, r18
     9c0:	c9 59       	subi	r28, 0x99	; 153
     9c2:	de 43       	sbci	r29, 0x3E	; 62
     9c4:	c5 56       	subi	r28, 0x65	; 101
     9c6:	d1 4c       	sbci	r29, 0xC1	; 193
     9c8:	19 83       	std	Y+1, r17	; 0x01
     9ca:	08 83       	st	Y, r16
     9cc:	cb 59       	subi	r28, 0x9B	; 155
     9ce:	de 43       	sbci	r29, 0x3E	; 62
     9d0:	ca 53       	subi	r28, 0x3A	; 58
     9d2:	d1 4c       	sbci	r29, 0xC1	; 193
     9d4:	f9 82       	std	Y+1, r15	; 0x01
     9d6:	e8 82       	st	Y, r14
     9d8:	c6 5c       	subi	r28, 0xC6	; 198
     9da:	de 43       	sbci	r29, 0x3E	; 62
	int64_t modulus, a, b;
	int64_t poleA[1000];
	int64_t poleB[1000];

	modulus = *MOD;
     9dc:	fc 01       	movw	r30, r24
     9de:	20 81       	ld	r18, Z
     9e0:	29 83       	std	Y+1, r18	; 0x01
     9e2:	21 81       	ldd	r18, Z+1	; 0x01
     9e4:	2a 83       	std	Y+2, r18	; 0x02
     9e6:	22 81       	ldd	r18, Z+2	; 0x02
     9e8:	2b 83       	std	Y+3, r18	; 0x03
     9ea:	23 81       	ldd	r18, Z+3	; 0x03
     9ec:	2c 83       	std	Y+4, r18	; 0x04
     9ee:	24 81       	ldd	r18, Z+4	; 0x04
     9f0:	2d 83       	std	Y+5, r18	; 0x05
     9f2:	25 81       	ldd	r18, Z+5	; 0x05
     9f4:	2e 83       	std	Y+6, r18	; 0x06
     9f6:	26 81       	ldd	r18, Z+6	; 0x06
     9f8:	2f 83       	std	Y+7, r18	; 0x07
     9fa:	87 81       	ldd	r24, Z+7	; 0x07
     9fc:	88 87       	std	Y+8, r24	; 0x08
	a = *A;
     9fe:	8c 91       	ld	r24, X
     a00:	89 87       	std	Y+9, r24	; 0x09
     a02:	11 96       	adiw	r26, 0x01	; 1
     a04:	8c 91       	ld	r24, X
     a06:	11 97       	sbiw	r26, 0x01	; 1
     a08:	8a 87       	std	Y+10, r24	; 0x0a
     a0a:	12 96       	adiw	r26, 0x02	; 2
     a0c:	8c 91       	ld	r24, X
     a0e:	12 97       	sbiw	r26, 0x02	; 2
     a10:	8b 87       	std	Y+11, r24	; 0x0b
     a12:	13 96       	adiw	r26, 0x03	; 3
     a14:	8c 91       	ld	r24, X
     a16:	13 97       	sbiw	r26, 0x03	; 3
     a18:	8c 87       	std	Y+12, r24	; 0x0c
     a1a:	14 96       	adiw	r26, 0x04	; 4
     a1c:	8c 91       	ld	r24, X
     a1e:	14 97       	sbiw	r26, 0x04	; 4
     a20:	8d 87       	std	Y+13, r24	; 0x0d
     a22:	15 96       	adiw	r26, 0x05	; 5
     a24:	8c 91       	ld	r24, X
     a26:	15 97       	sbiw	r26, 0x05	; 5
     a28:	8e 87       	std	Y+14, r24	; 0x0e
     a2a:	16 96       	adiw	r26, 0x06	; 6
     a2c:	8c 91       	ld	r24, X
     a2e:	16 97       	sbiw	r26, 0x06	; 6
     a30:	8f 87       	std	Y+15, r24	; 0x0f
     a32:	17 96       	adiw	r26, 0x07	; 7
     a34:	8c 91       	ld	r24, X
     a36:	88 8b       	std	Y+16, r24	; 0x10
	b = *B;
     a38:	da 01       	movw	r26, r20
     a3a:	8c 91       	ld	r24, X
     a3c:	89 8b       	std	Y+17, r24	; 0x11
     a3e:	11 96       	adiw	r26, 0x01	; 1
     a40:	8c 91       	ld	r24, X
     a42:	11 97       	sbiw	r26, 0x01	; 1
     a44:	8a 8b       	std	Y+18, r24	; 0x12
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8c 91       	ld	r24, X
     a4a:	12 97       	sbiw	r26, 0x02	; 2
     a4c:	8b 8b       	std	Y+19, r24	; 0x13
     a4e:	13 96       	adiw	r26, 0x03	; 3
     a50:	8c 91       	ld	r24, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	8c 8b       	std	Y+20, r24	; 0x14
     a56:	14 96       	adiw	r26, 0x04	; 4
     a58:	8c 91       	ld	r24, X
     a5a:	14 97       	sbiw	r26, 0x04	; 4
     a5c:	8d 8b       	std	Y+21, r24	; 0x15
     a5e:	15 96       	adiw	r26, 0x05	; 5
     a60:	8c 91       	ld	r24, X
     a62:	15 97       	sbiw	r26, 0x05	; 5
     a64:	8e 8b       	std	Y+22, r24	; 0x16
     a66:	16 96       	adiw	r26, 0x06	; 6
     a68:	8c 91       	ld	r24, X
     a6a:	16 97       	sbiw	r26, 0x06	; 6
     a6c:	8f 8b       	std	Y+23, r24	; 0x17
     a6e:	17 96       	adiw	r26, 0x07	; 7
     a70:	8c 91       	ld	r24, X
     a72:	88 8f       	std	Y+24, r24	; 0x18

	// Computing order
	int64_t order = 0;

	// Application A
	YPart (&modulus, poleA);
     a74:	be 01       	movw	r22, r28
     a76:	67 5e       	subi	r22, 0xE7	; 231
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	9f de       	rcall	.-706    	; 0x7be <YPart>

	// Iterations
	int64_t X_iter = modulus - 1;
     a80:	b9 81       	ldd	r27, Y+1	; 0x01
     a82:	c2 54       	subi	r28, 0x42	; 66
     a84:	d1 4c       	sbci	r29, 0xC1	; 193
     a86:	b8 83       	st	Y, r27
     a88:	ce 5b       	subi	r28, 0xBE	; 190
     a8a:	de 43       	sbci	r29, 0x3E	; 62
     a8c:	ea 81       	ldd	r30, Y+2	; 0x02
     a8e:	c1 54       	subi	r28, 0x41	; 65
     a90:	d1 4c       	sbci	r29, 0xC1	; 193
     a92:	e8 83       	st	Y, r30
     a94:	cf 5b       	subi	r28, 0xBF	; 191
     a96:	de 43       	sbci	r29, 0x3E	; 62
     a98:	fb 81       	ldd	r31, Y+3	; 0x03
     a9a:	c0 54       	subi	r28, 0x40	; 64
     a9c:	d1 4c       	sbci	r29, 0xC1	; 193
     a9e:	f8 83       	st	Y, r31
     aa0:	c0 5c       	subi	r28, 0xC0	; 192
     aa2:	de 43       	sbci	r29, 0x3E	; 62
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	cf 53       	subi	r28, 0x3F	; 63
     aa8:	d1 4c       	sbci	r29, 0xC1	; 193
     aaa:	88 83       	st	Y, r24
     aac:	c1 5c       	subi	r28, 0xC1	; 193
     aae:	de 43       	sbci	r29, 0x3E	; 62
     ab0:	9d 81       	ldd	r25, Y+5	; 0x05
     ab2:	ce 53       	subi	r28, 0x3E	; 62
     ab4:	d1 4c       	sbci	r29, 0xC1	; 193
     ab6:	98 83       	st	Y, r25
     ab8:	c2 5c       	subi	r28, 0xC2	; 194
     aba:	de 43       	sbci	r29, 0x3E	; 62
     abc:	ae 81       	ldd	r26, Y+6	; 0x06
     abe:	cd 53       	subi	r28, 0x3D	; 61
     ac0:	d1 4c       	sbci	r29, 0xC1	; 193
     ac2:	a8 83       	st	Y, r26
     ac4:	c3 5c       	subi	r28, 0xC3	; 195
     ac6:	de 43       	sbci	r29, 0x3E	; 62
     ac8:	bf 81       	ldd	r27, Y+7	; 0x07
     aca:	cc 53       	subi	r28, 0x3C	; 60
     acc:	d1 4c       	sbci	r29, 0xC1	; 193
     ace:	b8 83       	st	Y, r27
     ad0:	c4 5c       	subi	r28, 0xC4	; 196
     ad2:	de 43       	sbci	r29, 0x3E	; 62
     ad4:	e8 85       	ldd	r30, Y+8	; 0x08
     ad6:	cb 53       	subi	r28, 0x3B	; 59
     ad8:	d1 4c       	sbci	r29, 0xC1	; 193
     ada:	e8 83       	st	Y, r30
     adc:	c5 5c       	subi	r28, 0xC5	; 197
     ade:	de 43       	sbci	r29, 0x3E	; 62
     ae0:	c2 54       	subi	r28, 0x42	; 66
     ae2:	d1 4c       	sbci	r29, 0xC1	; 193
     ae4:	28 81       	ld	r18, Y
     ae6:	ce 5b       	subi	r28, 0xBE	; 190
     ae8:	de 43       	sbci	r29, 0x3E	; 62
     aea:	c1 54       	subi	r28, 0x41	; 65
     aec:	d1 4c       	sbci	r29, 0xC1	; 193
     aee:	38 81       	ld	r19, Y
     af0:	cf 5b       	subi	r28, 0xBF	; 191
     af2:	de 43       	sbci	r29, 0x3E	; 62
     af4:	4f 2f       	mov	r20, r31
     af6:	58 2f       	mov	r21, r24
     af8:	69 2f       	mov	r22, r25
     afa:	7a 2f       	mov	r23, r26
     afc:	8b 2f       	mov	r24, r27
     afe:	9e 2f       	mov	r25, r30
     b00:	af ef       	ldi	r26, 0xFF	; 255
     b02:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     b06:	32 2e       	mov	r3, r18
     b08:	43 2e       	mov	r4, r19
     b0a:	54 2e       	mov	r5, r20
     b0c:	65 2e       	mov	r6, r21
     b0e:	76 2e       	mov	r7, r22
     b10:	87 2e       	mov	r8, r23
     b12:	98 2e       	mov	r9, r24
     b14:	29 2e       	mov	r2, r25
	int64_t Y_iter = ((modulus - 1) / 2) + 1;
     b16:	e2 2f       	mov	r30, r18
     b18:	13 2f       	mov	r17, r19
     b1a:	04 2f       	mov	r16, r20
     b1c:	f5 2e       	mov	r15, r21
     b1e:	e6 2e       	mov	r14, r22
     b20:	d7 2e       	mov	r13, r23
     b22:	b8 2f       	mov	r27, r24
     b24:	f9 2f       	mov	r31, r25
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     b2c:	5c f4       	brge	.+22     	; 0xb44 <TheFirstPoint+0x1c4>
     b2e:	a1 e0       	ldi	r26, 0x01	; 1
     b30:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     b34:	e2 2f       	mov	r30, r18
     b36:	13 2f       	mov	r17, r19
     b38:	04 2f       	mov	r16, r20
     b3a:	f5 2e       	mov	r15, r21
     b3c:	e6 2e       	mov	r14, r22
     b3e:	d7 2e       	mov	r13, r23
     b40:	b8 2f       	mov	r27, r24
     b42:	f9 2f       	mov	r31, r25
     b44:	2e 2f       	mov	r18, r30
     b46:	31 2f       	mov	r19, r17
     b48:	40 2f       	mov	r20, r16
     b4a:	5f 2d       	mov	r21, r15
     b4c:	6e 2d       	mov	r22, r14
     b4e:	7d 2d       	mov	r23, r13
     b50:	8b 2f       	mov	r24, r27
     b52:	9f 2f       	mov	r25, r31
     b54:	01 e0       	ldi	r16, 0x01	; 1
     b56:	0e 94 14 1a 	call	0x3428	; 0x3428 <__ashrdi3>
     b5a:	a1 e0       	ldi	r26, 0x01	; 1
     b5c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     b60:	c3 56       	subi	r28, 0x63	; 99
     b62:	d1 4c       	sbci	r29, 0xC1	; 193
     b64:	28 83       	st	Y, r18
     b66:	cd 59       	subi	r28, 0x9D	; 157
     b68:	de 43       	sbci	r29, 0x3E	; 62
     b6a:	c2 56       	subi	r28, 0x62	; 98
     b6c:	d1 4c       	sbci	r29, 0xC1	; 193
     b6e:	38 83       	st	Y, r19
     b70:	ce 59       	subi	r28, 0x9E	; 158
     b72:	de 43       	sbci	r29, 0x3E	; 62
     b74:	c1 56       	subi	r28, 0x61	; 97
     b76:	d1 4c       	sbci	r29, 0xC1	; 193
     b78:	48 83       	st	Y, r20
     b7a:	cf 59       	subi	r28, 0x9F	; 159
     b7c:	de 43       	sbci	r29, 0x3E	; 62
     b7e:	c0 56       	subi	r28, 0x60	; 96
     b80:	d1 4c       	sbci	r29, 0xC1	; 193
     b82:	58 83       	st	Y, r21
     b84:	c0 5a       	subi	r28, 0xA0	; 160
     b86:	de 43       	sbci	r29, 0x3E	; 62
     b88:	cf 55       	subi	r28, 0x5F	; 95
     b8a:	d1 4c       	sbci	r29, 0xC1	; 193
     b8c:	68 83       	st	Y, r22
     b8e:	c1 5a       	subi	r28, 0xA1	; 161
     b90:	de 43       	sbci	r29, 0x3E	; 62
     b92:	ce 55       	subi	r28, 0x5E	; 94
     b94:	d1 4c       	sbci	r29, 0xC1	; 193
     b96:	78 83       	st	Y, r23
     b98:	c2 5a       	subi	r28, 0xA2	; 162
     b9a:	de 43       	sbci	r29, 0x3E	; 62
     b9c:	cd 55       	subi	r28, 0x5D	; 93
     b9e:	d1 4c       	sbci	r29, 0xC1	; 193
     ba0:	88 83       	st	Y, r24
     ba2:	c3 5a       	subi	r28, 0xA3	; 163
     ba4:	de 43       	sbci	r29, 0x3E	; 62
     ba6:	cc 55       	subi	r28, 0x5C	; 92
     ba8:	d1 4c       	sbci	r29, 0xC1	; 193
     baa:	98 83       	st	Y, r25
     bac:	c4 5a       	subi	r28, 0xA4	; 164
     bae:	de 43       	sbci	r29, 0x3E	; 62
	// Point64_ts
	int64_t x, y, y_neg;
	#endif // PRINT_ON

	// Application B
	XPart(&modulus, &a, &b, poleB);
     bb0:	9e 01       	movw	r18, r28
     bb2:	27 5a       	subi	r18, 0xA7	; 167
     bb4:	30 4e       	sbci	r19, 0xE0	; 224
     bb6:	ae 01       	movw	r20, r28
     bb8:	4f 5e       	subi	r20, 0xEF	; 239
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	be 01       	movw	r22, r28
     bbe:	67 5f       	subi	r22, 0xF7	; 247
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	d6 dc       	rcall	.-1620   	; 0x574 <XPart>

	for(int64_t  k = 0; k <= X_iter; k++)  // Give X's
     bc8:	23 2d       	mov	r18, r3
     bca:	34 2d       	mov	r19, r4
     bcc:	45 2d       	mov	r20, r5
     bce:	56 2d       	mov	r21, r6
     bd0:	67 2d       	mov	r22, r7
     bd2:	78 2d       	mov	r23, r8
     bd4:	89 2d       	mov	r24, r9
     bd6:	92 2d       	mov	r25, r2
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     bde:	0c f4       	brge	.+2      	; 0xbe2 <TheFirstPoint+0x262>
     be0:	e9 c2       	rjmp	.+1490   	; 0x11b4 <TheFirstPoint+0x834>
     be2:	fe 01       	movw	r30, r28
     be4:	e7 5a       	subi	r30, 0xA7	; 167
     be6:	f0 4e       	sbci	r31, 0xE0	; 224
     be8:	c4 54       	subi	r28, 0x44	; 68
     bea:	d1 4c       	sbci	r29, 0xC1	; 193
     bec:	f9 83       	std	Y+1, r31	; 0x01
     bee:	e8 83       	st	Y, r30
     bf0:	cc 5b       	subi	r28, 0xBC	; 188
     bf2:	de 43       	sbci	r29, 0x3E	; 62
     bf4:	cc 54       	subi	r28, 0x4C	; 76
     bf6:	d1 4c       	sbci	r29, 0xC1	; 193
     bf8:	18 82       	st	Y, r1
     bfa:	c4 5b       	subi	r28, 0xB4	; 180
     bfc:	de 43       	sbci	r29, 0x3E	; 62
     bfe:	cb 54       	subi	r28, 0x4B	; 75
     c00:	d1 4c       	sbci	r29, 0xC1	; 193
     c02:	18 82       	st	Y, r1
     c04:	c5 5b       	subi	r28, 0xB5	; 181
     c06:	de 43       	sbci	r29, 0x3E	; 62
     c08:	ca 54       	subi	r28, 0x4A	; 74
     c0a:	d1 4c       	sbci	r29, 0xC1	; 193
     c0c:	18 82       	st	Y, r1
     c0e:	c6 5b       	subi	r28, 0xB6	; 182
     c10:	de 43       	sbci	r29, 0x3E	; 62
     c12:	c9 54       	subi	r28, 0x49	; 73
     c14:	d1 4c       	sbci	r29, 0xC1	; 193
     c16:	18 82       	st	Y, r1
     c18:	c7 5b       	subi	r28, 0xB7	; 183
     c1a:	de 43       	sbci	r29, 0x3E	; 62
     c1c:	c8 54       	subi	r28, 0x48	; 72
     c1e:	d1 4c       	sbci	r29, 0xC1	; 193
     c20:	18 82       	st	Y, r1
     c22:	c8 5b       	subi	r28, 0xB8	; 184
     c24:	de 43       	sbci	r29, 0x3E	; 62
     c26:	c7 54       	subi	r28, 0x47	; 71
     c28:	d1 4c       	sbci	r29, 0xC1	; 193
     c2a:	18 82       	st	Y, r1
     c2c:	c9 5b       	subi	r28, 0xB9	; 185
     c2e:	de 43       	sbci	r29, 0x3E	; 62
     c30:	c6 54       	subi	r28, 0x46	; 70
     c32:	d1 4c       	sbci	r29, 0xC1	; 193
     c34:	18 82       	st	Y, r1
     c36:	ca 5b       	subi	r28, 0xBA	; 186
     c38:	de 43       	sbci	r29, 0x3E	; 62
     c3a:	c5 54       	subi	r28, 0x45	; 69
     c3c:	d1 4c       	sbci	r29, 0xC1	; 193
     c3e:	18 82       	st	Y, r1
     c40:	cb 5b       	subi	r28, 0xBB	; 187
     c42:	de 43       	sbci	r29, 0x3E	; 62
     c44:	c4 55       	subi	r28, 0x54	; 84
     c46:	d1 4c       	sbci	r29, 0xC1	; 193
     c48:	18 82       	st	Y, r1
     c4a:	cc 5a       	subi	r28, 0xAC	; 172
     c4c:	de 43       	sbci	r29, 0x3E	; 62
     c4e:	c3 55       	subi	r28, 0x53	; 83
     c50:	d1 4c       	sbci	r29, 0xC1	; 193
     c52:	18 82       	st	Y, r1
     c54:	cd 5a       	subi	r28, 0xAD	; 173
     c56:	de 43       	sbci	r29, 0x3E	; 62
     c58:	c2 55       	subi	r28, 0x52	; 82
     c5a:	d1 4c       	sbci	r29, 0xC1	; 193
     c5c:	18 82       	st	Y, r1
     c5e:	ce 5a       	subi	r28, 0xAE	; 174
     c60:	de 43       	sbci	r29, 0x3E	; 62
     c62:	c1 55       	subi	r28, 0x51	; 81
     c64:	d1 4c       	sbci	r29, 0xC1	; 193
     c66:	18 82       	st	Y, r1
     c68:	cf 5a       	subi	r28, 0xAF	; 175
     c6a:	de 43       	sbci	r29, 0x3E	; 62
     c6c:	c0 55       	subi	r28, 0x50	; 80
     c6e:	d1 4c       	sbci	r29, 0xC1	; 193
     c70:	18 82       	st	Y, r1
     c72:	c0 5b       	subi	r28, 0xB0	; 176
     c74:	de 43       	sbci	r29, 0x3E	; 62
     c76:	cf 54       	subi	r28, 0x4F	; 79
     c78:	d1 4c       	sbci	r29, 0xC1	; 193
     c7a:	18 82       	st	Y, r1
     c7c:	c1 5b       	subi	r28, 0xB1	; 177
     c7e:	de 43       	sbci	r29, 0x3E	; 62
     c80:	ce 54       	subi	r28, 0x4E	; 78
     c82:	d1 4c       	sbci	r29, 0xC1	; 193
     c84:	18 82       	st	Y, r1
     c86:	c2 5b       	subi	r28, 0xB2	; 178
     c88:	de 43       	sbci	r29, 0x3E	; 62
     c8a:	cd 54       	subi	r28, 0x4D	; 77
     c8c:	d1 4c       	sbci	r29, 0xC1	; 193
     c8e:	18 82       	st	Y, r1
     c90:	c3 5b       	subi	r28, 0xB3	; 179
     c92:	de 43       	sbci	r29, 0x3E	; 62
     c94:	f7 c1       	rjmp	.+1006   	; 0x1084 <TheFirstPoint+0x704>
	{
		for(int64_t  i = 0; i <= Y_iter; i++)  // Give Y's
		{
			if (poleA[i] == poleB[k])
     c96:	20 81       	ld	r18, Z
     c98:	31 81       	ldd	r19, Z+1	; 0x01
     c9a:	42 81       	ldd	r20, Z+2	; 0x02
     c9c:	53 81       	ldd	r21, Z+3	; 0x03
     c9e:	64 81       	ldd	r22, Z+4	; 0x04
     ca0:	75 81       	ldd	r23, Z+5	; 0x05
     ca2:	86 81       	ldd	r24, Z+6	; 0x06
     ca4:	97 81       	ldd	r25, Z+7	; 0x07
     ca6:	38 96       	adiw	r30, 0x08	; 8
     ca8:	cb 55       	subi	r28, 0x5B	; 91
     caa:	d1 4c       	sbci	r29, 0xC1	; 193
     cac:	a8 80       	ld	r10, Y
     cae:	c5 5a       	subi	r28, 0xA5	; 165
     cb0:	de 43       	sbci	r29, 0x3E	; 62
     cb2:	ca 55       	subi	r28, 0x5A	; 90
     cb4:	d1 4c       	sbci	r29, 0xC1	; 193
     cb6:	b8 80       	ld	r11, Y
     cb8:	c6 5a       	subi	r28, 0xA6	; 166
     cba:	de 43       	sbci	r29, 0x3E	; 62
     cbc:	c9 55       	subi	r28, 0x59	; 89
     cbe:	d1 4c       	sbci	r29, 0xC1	; 193
     cc0:	c8 80       	ld	r12, Y
     cc2:	c7 5a       	subi	r28, 0xA7	; 167
     cc4:	de 43       	sbci	r29, 0x3E	; 62
     cc6:	c8 55       	subi	r28, 0x58	; 88
     cc8:	d1 4c       	sbci	r29, 0xC1	; 193
     cca:	d8 80       	ld	r13, Y
     ccc:	c8 5a       	subi	r28, 0xA8	; 168
     cce:	de 43       	sbci	r29, 0x3E	; 62
     cd0:	c7 55       	subi	r28, 0x57	; 87
     cd2:	d1 4c       	sbci	r29, 0xC1	; 193
     cd4:	e8 80       	ld	r14, Y
     cd6:	c9 5a       	subi	r28, 0xA9	; 169
     cd8:	de 43       	sbci	r29, 0x3E	; 62
     cda:	c6 55       	subi	r28, 0x56	; 86
     cdc:	d1 4c       	sbci	r29, 0xC1	; 193
     cde:	f8 80       	ld	r15, Y
     ce0:	ca 5a       	subi	r28, 0xAA	; 170
     ce2:	de 43       	sbci	r29, 0x3E	; 62
     ce4:	c5 55       	subi	r28, 0x55	; 85
     ce6:	d1 4c       	sbci	r29, 0xC1	; 193
     ce8:	08 81       	ld	r16, Y
     cea:	cb 5a       	subi	r28, 0xAB	; 171
     cec:	de 43       	sbci	r29, 0x3E	; 62
     cee:	12 2d       	mov	r17, r2
     cf0:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <TheFirstPoint+0x378>
     cf6:	e3 c0       	rjmp	.+454    	; 0xebe <TheFirstPoint+0x53e>
			{
				if(order == 0)
     cf8:	c4 55       	subi	r28, 0x54	; 84
     cfa:	d1 4c       	sbci	r29, 0xC1	; 193
     cfc:	28 81       	ld	r18, Y
     cfe:	cc 5a       	subi	r28, 0xAC	; 172
     d00:	de 43       	sbci	r29, 0x3E	; 62
     d02:	c3 55       	subi	r28, 0x53	; 83
     d04:	d1 4c       	sbci	r29, 0xC1	; 193
     d06:	38 81       	ld	r19, Y
     d08:	cd 5a       	subi	r28, 0xAD	; 173
     d0a:	de 43       	sbci	r29, 0x3E	; 62
     d0c:	c2 55       	subi	r28, 0x52	; 82
     d0e:	d1 4c       	sbci	r29, 0xC1	; 193
     d10:	48 81       	ld	r20, Y
     d12:	ce 5a       	subi	r28, 0xAE	; 174
     d14:	de 43       	sbci	r29, 0x3E	; 62
     d16:	c1 55       	subi	r28, 0x51	; 81
     d18:	d1 4c       	sbci	r29, 0xC1	; 193
     d1a:	58 81       	ld	r21, Y
     d1c:	cf 5a       	subi	r28, 0xAF	; 175
     d1e:	de 43       	sbci	r29, 0x3E	; 62
     d20:	c0 55       	subi	r28, 0x50	; 80
     d22:	d1 4c       	sbci	r29, 0xC1	; 193
     d24:	68 81       	ld	r22, Y
     d26:	c0 5b       	subi	r28, 0xB0	; 176
     d28:	de 43       	sbci	r29, 0x3E	; 62
     d2a:	cf 54       	subi	r28, 0x4F	; 79
     d2c:	d1 4c       	sbci	r29, 0xC1	; 193
     d2e:	78 81       	ld	r23, Y
     d30:	c1 5b       	subi	r28, 0xB1	; 177
     d32:	de 43       	sbci	r29, 0x3E	; 62
     d34:	ce 54       	subi	r28, 0x4E	; 78
     d36:	d1 4c       	sbci	r29, 0xC1	; 193
     d38:	88 81       	ld	r24, Y
     d3a:	c2 5b       	subi	r28, 0xB2	; 178
     d3c:	de 43       	sbci	r29, 0x3E	; 62
     d3e:	cd 54       	subi	r28, 0x4D	; 77
     d40:	d1 4c       	sbci	r29, 0xC1	; 193
     d42:	98 81       	ld	r25, Y
     d44:	c3 5b       	subi	r28, 0xB3	; 179
     d46:	de 43       	sbci	r29, 0x3E	; 62
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
     d4e:	09 f0       	breq	.+2      	; 0xd52 <TheFirstPoint+0x3d2>
     d50:	63 c0       	rjmp	.+198    	; 0xe18 <TheFirstPoint+0x498>
				{

					*Xfirst = k;
     d52:	cc 54       	subi	r28, 0x4C	; 76
     d54:	d1 4c       	sbci	r29, 0xC1	; 193
     d56:	88 81       	ld	r24, Y
     d58:	c4 5b       	subi	r28, 0xB4	; 180
     d5a:	de 43       	sbci	r29, 0x3E	; 62
     d5c:	c7 56       	subi	r28, 0x67	; 103
     d5e:	d1 4c       	sbci	r29, 0xC1	; 193
     d60:	a8 81       	ld	r26, Y
     d62:	b9 81       	ldd	r27, Y+1	; 0x01
     d64:	c9 59       	subi	r28, 0x99	; 153
     d66:	de 43       	sbci	r29, 0x3E	; 62
     d68:	8c 93       	st	X, r24
     d6a:	cb 54       	subi	r28, 0x4B	; 75
     d6c:	d1 4c       	sbci	r29, 0xC1	; 193
     d6e:	98 81       	ld	r25, Y
     d70:	c5 5b       	subi	r28, 0xB5	; 181
     d72:	de 43       	sbci	r29, 0x3E	; 62
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	ca 54       	subi	r28, 0x4A	; 74
     d7c:	d1 4c       	sbci	r29, 0xC1	; 193
     d7e:	88 81       	ld	r24, Y
     d80:	c6 5b       	subi	r28, 0xB6	; 182
     d82:	de 43       	sbci	r29, 0x3E	; 62
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	8c 93       	st	X, r24
     d88:	12 97       	sbiw	r26, 0x02	; 2
     d8a:	c9 54       	subi	r28, 0x49	; 73
     d8c:	d1 4c       	sbci	r29, 0xC1	; 193
     d8e:	98 81       	ld	r25, Y
     d90:	c7 5b       	subi	r28, 0xB7	; 183
     d92:	de 43       	sbci	r29, 0x3E	; 62
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	9c 93       	st	X, r25
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	c8 54       	subi	r28, 0x48	; 72
     d9c:	d1 4c       	sbci	r29, 0xC1	; 193
     d9e:	88 81       	ld	r24, Y
     da0:	c8 5b       	subi	r28, 0xB8	; 184
     da2:	de 43       	sbci	r29, 0x3E	; 62
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	8c 93       	st	X, r24
     da8:	14 97       	sbiw	r26, 0x04	; 4
     daa:	c7 54       	subi	r28, 0x47	; 71
     dac:	d1 4c       	sbci	r29, 0xC1	; 193
     dae:	98 81       	ld	r25, Y
     db0:	c9 5b       	subi	r28, 0xB9	; 185
     db2:	de 43       	sbci	r29, 0x3E	; 62
     db4:	15 96       	adiw	r26, 0x05	; 5
     db6:	9c 93       	st	X, r25
     db8:	15 97       	sbiw	r26, 0x05	; 5
     dba:	c6 54       	subi	r28, 0x46	; 70
     dbc:	d1 4c       	sbci	r29, 0xC1	; 193
     dbe:	88 81       	ld	r24, Y
     dc0:	ca 5b       	subi	r28, 0xBA	; 186
     dc2:	de 43       	sbci	r29, 0x3E	; 62
     dc4:	16 96       	adiw	r26, 0x06	; 6
     dc6:	8c 93       	st	X, r24
     dc8:	16 97       	sbiw	r26, 0x06	; 6
     dca:	c5 54       	subi	r28, 0x45	; 69
     dcc:	d1 4c       	sbci	r29, 0xC1	; 193
     dce:	98 81       	ld	r25, Y
     dd0:	cb 5b       	subi	r28, 0xBB	; 187
     dd2:	de 43       	sbci	r29, 0x3E	; 62
     dd4:	17 96       	adiw	r26, 0x07	; 7
     dd6:	9c 93       	st	X, r25
					*Yfirst = i;
     dd8:	c5 56       	subi	r28, 0x65	; 101
     dda:	d1 4c       	sbci	r29, 0xC1	; 193
     ddc:	a8 81       	ld	r26, Y
     dde:	b9 81       	ldd	r27, Y+1	; 0x01
     de0:	cb 59       	subi	r28, 0x9B	; 155
     de2:	de 43       	sbci	r29, 0x3E	; 62
     de4:	3c 92       	st	X, r3
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	4c 92       	st	X, r4
     dea:	11 97       	sbiw	r26, 0x01	; 1
     dec:	12 96       	adiw	r26, 0x02	; 2
     dee:	5c 92       	st	X, r5
     df0:	12 97       	sbiw	r26, 0x02	; 2
     df2:	13 96       	adiw	r26, 0x03	; 3
     df4:	6c 92       	st	X, r6
     df6:	13 97       	sbiw	r26, 0x03	; 3
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	7c 92       	st	X, r7
     dfc:	14 97       	sbiw	r26, 0x04	; 4
     dfe:	15 96       	adiw	r26, 0x05	; 5
     e00:	8c 92       	st	X, r8
     e02:	15 97       	sbiw	r26, 0x05	; 5
     e04:	16 96       	adiw	r26, 0x06	; 6
     e06:	9c 92       	st	X, r9
     e08:	16 97       	sbiw	r26, 0x06	; 6
     e0a:	c8 53       	subi	r28, 0x38	; 56
     e0c:	d1 4c       	sbci	r29, 0xC1	; 193
     e0e:	88 81       	ld	r24, Y
     e10:	c8 5c       	subi	r28, 0xC8	; 200
     e12:	de 43       	sbci	r29, 0x3E	; 62
     e14:	17 96       	adiw	r26, 0x07	; 7
     e16:	8c 93       	st	X, r24
				printf("Jedna se o cisla %d a %d\n\r", poleA[i], poleB[k]);
				EMPTYLINE
				printf("Coordinates are [%4d,%4d] [%4d,%4d] \n\r", x, y, x, y_neg);
				#endif // PRINT_ON

				order++;
     e18:	c4 55       	subi	r28, 0x54	; 84
     e1a:	d1 4c       	sbci	r29, 0xC1	; 193
     e1c:	28 81       	ld	r18, Y
     e1e:	cc 5a       	subi	r28, 0xAC	; 172
     e20:	de 43       	sbci	r29, 0x3E	; 62
     e22:	c3 55       	subi	r28, 0x53	; 83
     e24:	d1 4c       	sbci	r29, 0xC1	; 193
     e26:	38 81       	ld	r19, Y
     e28:	cd 5a       	subi	r28, 0xAD	; 173
     e2a:	de 43       	sbci	r29, 0x3E	; 62
     e2c:	c2 55       	subi	r28, 0x52	; 82
     e2e:	d1 4c       	sbci	r29, 0xC1	; 193
     e30:	48 81       	ld	r20, Y
     e32:	ce 5a       	subi	r28, 0xAE	; 174
     e34:	de 43       	sbci	r29, 0x3E	; 62
     e36:	c1 55       	subi	r28, 0x51	; 81
     e38:	d1 4c       	sbci	r29, 0xC1	; 193
     e3a:	58 81       	ld	r21, Y
     e3c:	cf 5a       	subi	r28, 0xAF	; 175
     e3e:	de 43       	sbci	r29, 0x3E	; 62
     e40:	c0 55       	subi	r28, 0x50	; 80
     e42:	d1 4c       	sbci	r29, 0xC1	; 193
     e44:	68 81       	ld	r22, Y
     e46:	c0 5b       	subi	r28, 0xB0	; 176
     e48:	de 43       	sbci	r29, 0x3E	; 62
     e4a:	cf 54       	subi	r28, 0x4F	; 79
     e4c:	d1 4c       	sbci	r29, 0xC1	; 193
     e4e:	78 81       	ld	r23, Y
     e50:	c1 5b       	subi	r28, 0xB1	; 177
     e52:	de 43       	sbci	r29, 0x3E	; 62
     e54:	ce 54       	subi	r28, 0x4E	; 78
     e56:	d1 4c       	sbci	r29, 0xC1	; 193
     e58:	88 81       	ld	r24, Y
     e5a:	c2 5b       	subi	r28, 0xB2	; 178
     e5c:	de 43       	sbci	r29, 0x3E	; 62
     e5e:	cd 54       	subi	r28, 0x4D	; 77
     e60:	d1 4c       	sbci	r29, 0xC1	; 193
     e62:	98 81       	ld	r25, Y
     e64:	c3 5b       	subi	r28, 0xB3	; 179
     e66:	de 43       	sbci	r29, 0x3E	; 62
     e68:	a1 e0       	ldi	r26, 0x01	; 1
     e6a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     e6e:	c4 55       	subi	r28, 0x54	; 84
     e70:	d1 4c       	sbci	r29, 0xC1	; 193
     e72:	28 83       	st	Y, r18
     e74:	cc 5a       	subi	r28, 0xAC	; 172
     e76:	de 43       	sbci	r29, 0x3E	; 62
     e78:	c3 55       	subi	r28, 0x53	; 83
     e7a:	d1 4c       	sbci	r29, 0xC1	; 193
     e7c:	38 83       	st	Y, r19
     e7e:	cd 5a       	subi	r28, 0xAD	; 173
     e80:	de 43       	sbci	r29, 0x3E	; 62
     e82:	c2 55       	subi	r28, 0x52	; 82
     e84:	d1 4c       	sbci	r29, 0xC1	; 193
     e86:	48 83       	st	Y, r20
     e88:	ce 5a       	subi	r28, 0xAE	; 174
     e8a:	de 43       	sbci	r29, 0x3E	; 62
     e8c:	c1 55       	subi	r28, 0x51	; 81
     e8e:	d1 4c       	sbci	r29, 0xC1	; 193
     e90:	58 83       	st	Y, r21
     e92:	cf 5a       	subi	r28, 0xAF	; 175
     e94:	de 43       	sbci	r29, 0x3E	; 62
     e96:	c0 55       	subi	r28, 0x50	; 80
     e98:	d1 4c       	sbci	r29, 0xC1	; 193
     e9a:	68 83       	st	Y, r22
     e9c:	c0 5b       	subi	r28, 0xB0	; 176
     e9e:	de 43       	sbci	r29, 0x3E	; 62
     ea0:	cf 54       	subi	r28, 0x4F	; 79
     ea2:	d1 4c       	sbci	r29, 0xC1	; 193
     ea4:	78 83       	st	Y, r23
     ea6:	c1 5b       	subi	r28, 0xB1	; 177
     ea8:	de 43       	sbci	r29, 0x3E	; 62
     eaa:	ce 54       	subi	r28, 0x4E	; 78
     eac:	d1 4c       	sbci	r29, 0xC1	; 193
     eae:	88 83       	st	Y, r24
     eb0:	c2 5b       	subi	r28, 0xB2	; 178
     eb2:	de 43       	sbci	r29, 0x3E	; 62
     eb4:	cd 54       	subi	r28, 0x4D	; 77
     eb6:	d1 4c       	sbci	r29, 0xC1	; 193
     eb8:	98 83       	st	Y, r25
     eba:	c3 5b       	subi	r28, 0xB3	; 179
     ebc:	de 43       	sbci	r29, 0x3E	; 62
	// Application B
	XPart(&modulus, &a, &b, poleB);

	for(int64_t  k = 0; k <= X_iter; k++)  // Give X's
	{
		for(int64_t  i = 0; i <= Y_iter; i++)  // Give Y's
     ebe:	23 2d       	mov	r18, r3
     ec0:	34 2d       	mov	r19, r4
     ec2:	45 2d       	mov	r20, r5
     ec4:	56 2d       	mov	r21, r6
     ec6:	67 2d       	mov	r22, r7
     ec8:	78 2d       	mov	r23, r8
     eca:	89 2d       	mov	r24, r9
     ecc:	c8 53       	subi	r28, 0x38	; 56
     ece:	d1 4c       	sbci	r29, 0xC1	; 193
     ed0:	98 81       	ld	r25, Y
     ed2:	c8 5c       	subi	r28, 0xC8	; 200
     ed4:	de 43       	sbci	r29, 0x3E	; 62
     ed6:	a1 e0       	ldi	r26, 0x01	; 1
     ed8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     edc:	a2 2e       	mov	r10, r18
     ede:	b3 2e       	mov	r11, r19
     ee0:	c4 2e       	mov	r12, r20
     ee2:	d5 2e       	mov	r13, r21
     ee4:	e6 2e       	mov	r14, r22
     ee6:	f7 2e       	mov	r15, r23
     ee8:	08 2f       	mov	r16, r24
     eea:	19 2f       	mov	r17, r25
     eec:	32 2e       	mov	r3, r18
     eee:	43 2e       	mov	r4, r19
     ef0:	54 2e       	mov	r5, r20
     ef2:	65 2e       	mov	r6, r21
     ef4:	76 2e       	mov	r7, r22
     ef6:	87 2e       	mov	r8, r23
     ef8:	98 2e       	mov	r9, r24
     efa:	c8 53       	subi	r28, 0x38	; 56
     efc:	d1 4c       	sbci	r29, 0xC1	; 193
     efe:	98 83       	st	Y, r25
     f00:	c8 5c       	subi	r28, 0xC8	; 200
     f02:	de 43       	sbci	r29, 0x3E	; 62
     f04:	c3 56       	subi	r28, 0x63	; 99
     f06:	d1 4c       	sbci	r29, 0xC1	; 193
     f08:	28 81       	ld	r18, Y
     f0a:	cd 59       	subi	r28, 0x9D	; 157
     f0c:	de 43       	sbci	r29, 0x3E	; 62
     f0e:	c2 56       	subi	r28, 0x62	; 98
     f10:	d1 4c       	sbci	r29, 0xC1	; 193
     f12:	38 81       	ld	r19, Y
     f14:	ce 59       	subi	r28, 0x9E	; 158
     f16:	de 43       	sbci	r29, 0x3E	; 62
     f18:	c1 56       	subi	r28, 0x61	; 97
     f1a:	d1 4c       	sbci	r29, 0xC1	; 193
     f1c:	48 81       	ld	r20, Y
     f1e:	cf 59       	subi	r28, 0x9F	; 159
     f20:	de 43       	sbci	r29, 0x3E	; 62
     f22:	c0 56       	subi	r28, 0x60	; 96
     f24:	d1 4c       	sbci	r29, 0xC1	; 193
     f26:	58 81       	ld	r21, Y
     f28:	c0 5a       	subi	r28, 0xA0	; 160
     f2a:	de 43       	sbci	r29, 0x3E	; 62
     f2c:	cf 55       	subi	r28, 0x5F	; 95
     f2e:	d1 4c       	sbci	r29, 0xC1	; 193
     f30:	68 81       	ld	r22, Y
     f32:	c1 5a       	subi	r28, 0xA1	; 161
     f34:	de 43       	sbci	r29, 0x3E	; 62
     f36:	ce 55       	subi	r28, 0x5E	; 94
     f38:	d1 4c       	sbci	r29, 0xC1	; 193
     f3a:	78 81       	ld	r23, Y
     f3c:	c2 5a       	subi	r28, 0xA2	; 162
     f3e:	de 43       	sbci	r29, 0x3E	; 62
     f40:	cd 55       	subi	r28, 0x5D	; 93
     f42:	d1 4c       	sbci	r29, 0xC1	; 193
     f44:	88 81       	ld	r24, Y
     f46:	c3 5a       	subi	r28, 0xA3	; 163
     f48:	de 43       	sbci	r29, 0x3E	; 62
     f4a:	cc 55       	subi	r28, 0x5C	; 92
     f4c:	d1 4c       	sbci	r29, 0xC1	; 193
     f4e:	98 81       	ld	r25, Y
     f50:	c4 5a       	subi	r28, 0xA4	; 164
     f52:	de 43       	sbci	r29, 0x3E	; 62
     f54:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
     f58:	0c f0       	brlt	.+2      	; 0xf5c <TheFirstPoint+0x5dc>
     f5a:	9d ce       	rjmp	.-710    	; 0xc96 <TheFirstPoint+0x316>
	#endif // PRINT_ON

	// Application B
	XPart(&modulus, &a, &b, poleB);

	for(int64_t  k = 0; k <= X_iter; k++)  // Give X's
     f5c:	cc 54       	subi	r28, 0x4C	; 76
     f5e:	d1 4c       	sbci	r29, 0xC1	; 193
     f60:	28 81       	ld	r18, Y
     f62:	c4 5b       	subi	r28, 0xB4	; 180
     f64:	de 43       	sbci	r29, 0x3E	; 62
     f66:	cb 54       	subi	r28, 0x4B	; 75
     f68:	d1 4c       	sbci	r29, 0xC1	; 193
     f6a:	38 81       	ld	r19, Y
     f6c:	c5 5b       	subi	r28, 0xB5	; 181
     f6e:	de 43       	sbci	r29, 0x3E	; 62
     f70:	ca 54       	subi	r28, 0x4A	; 74
     f72:	d1 4c       	sbci	r29, 0xC1	; 193
     f74:	48 81       	ld	r20, Y
     f76:	c6 5b       	subi	r28, 0xB6	; 182
     f78:	de 43       	sbci	r29, 0x3E	; 62
     f7a:	c9 54       	subi	r28, 0x49	; 73
     f7c:	d1 4c       	sbci	r29, 0xC1	; 193
     f7e:	58 81       	ld	r21, Y
     f80:	c7 5b       	subi	r28, 0xB7	; 183
     f82:	de 43       	sbci	r29, 0x3E	; 62
     f84:	c8 54       	subi	r28, 0x48	; 72
     f86:	d1 4c       	sbci	r29, 0xC1	; 193
     f88:	68 81       	ld	r22, Y
     f8a:	c8 5b       	subi	r28, 0xB8	; 184
     f8c:	de 43       	sbci	r29, 0x3E	; 62
     f8e:	c7 54       	subi	r28, 0x47	; 71
     f90:	d1 4c       	sbci	r29, 0xC1	; 193
     f92:	78 81       	ld	r23, Y
     f94:	c9 5b       	subi	r28, 0xB9	; 185
     f96:	de 43       	sbci	r29, 0x3E	; 62
     f98:	c6 54       	subi	r28, 0x46	; 70
     f9a:	d1 4c       	sbci	r29, 0xC1	; 193
     f9c:	88 81       	ld	r24, Y
     f9e:	ca 5b       	subi	r28, 0xBA	; 186
     fa0:	de 43       	sbci	r29, 0x3E	; 62
     fa2:	c5 54       	subi	r28, 0x45	; 69
     fa4:	d1 4c       	sbci	r29, 0xC1	; 193
     fa6:	98 81       	ld	r25, Y
     fa8:	cb 5b       	subi	r28, 0xBB	; 187
     faa:	de 43       	sbci	r29, 0x3E	; 62
     fac:	a1 e0       	ldi	r26, 0x01	; 1
     fae:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
     fb2:	a2 2e       	mov	r10, r18
     fb4:	b3 2e       	mov	r11, r19
     fb6:	c4 2e       	mov	r12, r20
     fb8:	d5 2e       	mov	r13, r21
     fba:	e6 2e       	mov	r14, r22
     fbc:	f7 2e       	mov	r15, r23
     fbe:	08 2f       	mov	r16, r24
     fc0:	19 2f       	mov	r17, r25
     fc2:	cc 54       	subi	r28, 0x4C	; 76
     fc4:	d1 4c       	sbci	r29, 0xC1	; 193
     fc6:	28 83       	st	Y, r18
     fc8:	c4 5b       	subi	r28, 0xB4	; 180
     fca:	de 43       	sbci	r29, 0x3E	; 62
     fcc:	cb 54       	subi	r28, 0x4B	; 75
     fce:	d1 4c       	sbci	r29, 0xC1	; 193
     fd0:	38 83       	st	Y, r19
     fd2:	c5 5b       	subi	r28, 0xB5	; 181
     fd4:	de 43       	sbci	r29, 0x3E	; 62
     fd6:	ca 54       	subi	r28, 0x4A	; 74
     fd8:	d1 4c       	sbci	r29, 0xC1	; 193
     fda:	48 83       	st	Y, r20
     fdc:	c6 5b       	subi	r28, 0xB6	; 182
     fde:	de 43       	sbci	r29, 0x3E	; 62
     fe0:	c9 54       	subi	r28, 0x49	; 73
     fe2:	d1 4c       	sbci	r29, 0xC1	; 193
     fe4:	58 83       	st	Y, r21
     fe6:	c7 5b       	subi	r28, 0xB7	; 183
     fe8:	de 43       	sbci	r29, 0x3E	; 62
     fea:	c8 54       	subi	r28, 0x48	; 72
     fec:	d1 4c       	sbci	r29, 0xC1	; 193
     fee:	68 83       	st	Y, r22
     ff0:	c8 5b       	subi	r28, 0xB8	; 184
     ff2:	de 43       	sbci	r29, 0x3E	; 62
     ff4:	c7 54       	subi	r28, 0x47	; 71
     ff6:	d1 4c       	sbci	r29, 0xC1	; 193
     ff8:	78 83       	st	Y, r23
     ffa:	c9 5b       	subi	r28, 0xB9	; 185
     ffc:	de 43       	sbci	r29, 0x3E	; 62
     ffe:	c6 54       	subi	r28, 0x46	; 70
    1000:	d1 4c       	sbci	r29, 0xC1	; 193
    1002:	88 83       	st	Y, r24
    1004:	ca 5b       	subi	r28, 0xBA	; 186
    1006:	de 43       	sbci	r29, 0x3E	; 62
    1008:	c5 54       	subi	r28, 0x45	; 69
    100a:	d1 4c       	sbci	r29, 0xC1	; 193
    100c:	98 83       	st	Y, r25
    100e:	cb 5b       	subi	r28, 0xBB	; 187
    1010:	de 43       	sbci	r29, 0x3E	; 62
    1012:	c4 54       	subi	r28, 0x44	; 68
    1014:	d1 4c       	sbci	r29, 0xC1	; 193
    1016:	e8 81       	ld	r30, Y
    1018:	f9 81       	ldd	r31, Y+1	; 0x01
    101a:	cc 5b       	subi	r28, 0xBC	; 188
    101c:	de 43       	sbci	r29, 0x3E	; 62
    101e:	38 96       	adiw	r30, 0x08	; 8
    1020:	c4 54       	subi	r28, 0x44	; 68
    1022:	d1 4c       	sbci	r29, 0xC1	; 193
    1024:	f9 83       	std	Y+1, r31	; 0x01
    1026:	e8 83       	st	Y, r30
    1028:	cc 5b       	subi	r28, 0xBC	; 188
    102a:	de 43       	sbci	r29, 0x3E	; 62
    102c:	c2 54       	subi	r28, 0x42	; 66
    102e:	d1 4c       	sbci	r29, 0xC1	; 193
    1030:	28 81       	ld	r18, Y
    1032:	ce 5b       	subi	r28, 0xBE	; 190
    1034:	de 43       	sbci	r29, 0x3E	; 62
    1036:	c1 54       	subi	r28, 0x41	; 65
    1038:	d1 4c       	sbci	r29, 0xC1	; 193
    103a:	38 81       	ld	r19, Y
    103c:	cf 5b       	subi	r28, 0xBF	; 191
    103e:	de 43       	sbci	r29, 0x3E	; 62
    1040:	c0 54       	subi	r28, 0x40	; 64
    1042:	d1 4c       	sbci	r29, 0xC1	; 193
    1044:	48 81       	ld	r20, Y
    1046:	c0 5c       	subi	r28, 0xC0	; 192
    1048:	de 43       	sbci	r29, 0x3E	; 62
    104a:	cf 53       	subi	r28, 0x3F	; 63
    104c:	d1 4c       	sbci	r29, 0xC1	; 193
    104e:	58 81       	ld	r21, Y
    1050:	c1 5c       	subi	r28, 0xC1	; 193
    1052:	de 43       	sbci	r29, 0x3E	; 62
    1054:	ce 53       	subi	r28, 0x3E	; 62
    1056:	d1 4c       	sbci	r29, 0xC1	; 193
    1058:	68 81       	ld	r22, Y
    105a:	c2 5c       	subi	r28, 0xC2	; 194
    105c:	de 43       	sbci	r29, 0x3E	; 62
    105e:	cd 53       	subi	r28, 0x3D	; 61
    1060:	d1 4c       	sbci	r29, 0xC1	; 193
    1062:	78 81       	ld	r23, Y
    1064:	c3 5c       	subi	r28, 0xC3	; 195
    1066:	de 43       	sbci	r29, 0x3E	; 62
    1068:	cc 53       	subi	r28, 0x3C	; 60
    106a:	d1 4c       	sbci	r29, 0xC1	; 193
    106c:	88 81       	ld	r24, Y
    106e:	c4 5c       	subi	r28, 0xC4	; 196
    1070:	de 43       	sbci	r29, 0x3E	; 62
    1072:	cb 53       	subi	r28, 0x3B	; 59
    1074:	d1 4c       	sbci	r29, 0xC1	; 193
    1076:	98 81       	ld	r25, Y
    1078:	c5 5c       	subi	r28, 0xC5	; 197
    107a:	de 43       	sbci	r29, 0x3E	; 62
    107c:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpdi2>
    1080:	09 f4       	brne	.+2      	; 0x1084 <TheFirstPoint+0x704>
    1082:	c0 c0       	rjmp	.+384    	; 0x1204 <TheFirstPoint+0x884>
	{
		for(int64_t  i = 0; i <= Y_iter; i++)  // Give Y's
    1084:	c3 56       	subi	r28, 0x63	; 99
    1086:	d1 4c       	sbci	r29, 0xC1	; 193
    1088:	28 81       	ld	r18, Y
    108a:	cd 59       	subi	r28, 0x9D	; 157
    108c:	de 43       	sbci	r29, 0x3E	; 62
    108e:	c2 56       	subi	r28, 0x62	; 98
    1090:	d1 4c       	sbci	r29, 0xC1	; 193
    1092:	38 81       	ld	r19, Y
    1094:	ce 59       	subi	r28, 0x9E	; 158
    1096:	de 43       	sbci	r29, 0x3E	; 62
    1098:	c1 56       	subi	r28, 0x61	; 97
    109a:	d1 4c       	sbci	r29, 0xC1	; 193
    109c:	48 81       	ld	r20, Y
    109e:	cf 59       	subi	r28, 0x9F	; 159
    10a0:	de 43       	sbci	r29, 0x3E	; 62
    10a2:	c0 56       	subi	r28, 0x60	; 96
    10a4:	d1 4c       	sbci	r29, 0xC1	; 193
    10a6:	58 81       	ld	r21, Y
    10a8:	c0 5a       	subi	r28, 0xA0	; 160
    10aa:	de 43       	sbci	r29, 0x3E	; 62
    10ac:	cf 55       	subi	r28, 0x5F	; 95
    10ae:	d1 4c       	sbci	r29, 0xC1	; 193
    10b0:	68 81       	ld	r22, Y
    10b2:	c1 5a       	subi	r28, 0xA1	; 161
    10b4:	de 43       	sbci	r29, 0x3E	; 62
    10b6:	ce 55       	subi	r28, 0x5E	; 94
    10b8:	d1 4c       	sbci	r29, 0xC1	; 193
    10ba:	78 81       	ld	r23, Y
    10bc:	c2 5a       	subi	r28, 0xA2	; 162
    10be:	de 43       	sbci	r29, 0x3E	; 62
    10c0:	cd 55       	subi	r28, 0x5D	; 93
    10c2:	d1 4c       	sbci	r29, 0xC1	; 193
    10c4:	88 81       	ld	r24, Y
    10c6:	c3 5a       	subi	r28, 0xA3	; 163
    10c8:	de 43       	sbci	r29, 0x3E	; 62
    10ca:	cc 55       	subi	r28, 0x5C	; 92
    10cc:	d1 4c       	sbci	r29, 0xC1	; 193
    10ce:	98 81       	ld	r25, Y
    10d0:	c4 5a       	subi	r28, 0xA4	; 164
    10d2:	de 43       	sbci	r29, 0x3E	; 62
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__cmpdi2_s8>
    10da:	0c f4       	brge	.+2      	; 0x10de <TheFirstPoint+0x75e>
    10dc:	3f cf       	rjmp	.-386    	; 0xf5c <TheFirstPoint+0x5dc>
		{
			if (poleA[i] == poleB[k])
    10de:	c4 54       	subi	r28, 0x44	; 68
    10e0:	d1 4c       	sbci	r29, 0xC1	; 193
    10e2:	e8 81       	ld	r30, Y
    10e4:	f9 81       	ldd	r31, Y+1	; 0x01
    10e6:	cc 5b       	subi	r28, 0xBC	; 188
    10e8:	de 43       	sbci	r29, 0x3E	; 62
    10ea:	f0 81       	ld	r31, Z
    10ec:	cb 55       	subi	r28, 0x5B	; 91
    10ee:	d1 4c       	sbci	r29, 0xC1	; 193
    10f0:	f8 83       	st	Y, r31
    10f2:	c5 5a       	subi	r28, 0xA5	; 165
    10f4:	de 43       	sbci	r29, 0x3E	; 62
    10f6:	c4 54       	subi	r28, 0x44	; 68
    10f8:	d1 4c       	sbci	r29, 0xC1	; 193
    10fa:	e8 81       	ld	r30, Y
    10fc:	f9 81       	ldd	r31, Y+1	; 0x01
    10fe:	cc 5b       	subi	r28, 0xBC	; 188
    1100:	de 43       	sbci	r29, 0x3E	; 62
    1102:	f1 81       	ldd	r31, Z+1	; 0x01
    1104:	ca 55       	subi	r28, 0x5A	; 90
    1106:	d1 4c       	sbci	r29, 0xC1	; 193
    1108:	f8 83       	st	Y, r31
    110a:	c6 5a       	subi	r28, 0xA6	; 166
    110c:	de 43       	sbci	r29, 0x3E	; 62
    110e:	c4 54       	subi	r28, 0x44	; 68
    1110:	d1 4c       	sbci	r29, 0xC1	; 193
    1112:	e8 81       	ld	r30, Y
    1114:	f9 81       	ldd	r31, Y+1	; 0x01
    1116:	cc 5b       	subi	r28, 0xBC	; 188
    1118:	de 43       	sbci	r29, 0x3E	; 62
    111a:	f2 81       	ldd	r31, Z+2	; 0x02
    111c:	c9 55       	subi	r28, 0x59	; 89
    111e:	d1 4c       	sbci	r29, 0xC1	; 193
    1120:	f8 83       	st	Y, r31
    1122:	c7 5a       	subi	r28, 0xA7	; 167
    1124:	de 43       	sbci	r29, 0x3E	; 62
    1126:	c4 54       	subi	r28, 0x44	; 68
    1128:	d1 4c       	sbci	r29, 0xC1	; 193
    112a:	e8 81       	ld	r30, Y
    112c:	f9 81       	ldd	r31, Y+1	; 0x01
    112e:	cc 5b       	subi	r28, 0xBC	; 188
    1130:	de 43       	sbci	r29, 0x3E	; 62
    1132:	f3 81       	ldd	r31, Z+3	; 0x03
    1134:	c8 55       	subi	r28, 0x58	; 88
    1136:	d1 4c       	sbci	r29, 0xC1	; 193
    1138:	f8 83       	st	Y, r31
    113a:	c8 5a       	subi	r28, 0xA8	; 168
    113c:	de 43       	sbci	r29, 0x3E	; 62
    113e:	c4 54       	subi	r28, 0x44	; 68
    1140:	d1 4c       	sbci	r29, 0xC1	; 193
    1142:	e8 81       	ld	r30, Y
    1144:	f9 81       	ldd	r31, Y+1	; 0x01
    1146:	cc 5b       	subi	r28, 0xBC	; 188
    1148:	de 43       	sbci	r29, 0x3E	; 62
    114a:	f4 81       	ldd	r31, Z+4	; 0x04
    114c:	c7 55       	subi	r28, 0x57	; 87
    114e:	d1 4c       	sbci	r29, 0xC1	; 193
    1150:	f8 83       	st	Y, r31
    1152:	c9 5a       	subi	r28, 0xA9	; 169
    1154:	de 43       	sbci	r29, 0x3E	; 62
    1156:	c4 54       	subi	r28, 0x44	; 68
    1158:	d1 4c       	sbci	r29, 0xC1	; 193
    115a:	e8 81       	ld	r30, Y
    115c:	f9 81       	ldd	r31, Y+1	; 0x01
    115e:	cc 5b       	subi	r28, 0xBC	; 188
    1160:	de 43       	sbci	r29, 0x3E	; 62
    1162:	f5 81       	ldd	r31, Z+5	; 0x05
    1164:	c6 55       	subi	r28, 0x56	; 86
    1166:	d1 4c       	sbci	r29, 0xC1	; 193
    1168:	f8 83       	st	Y, r31
    116a:	ca 5a       	subi	r28, 0xAA	; 170
    116c:	de 43       	sbci	r29, 0x3E	; 62
    116e:	c4 54       	subi	r28, 0x44	; 68
    1170:	d1 4c       	sbci	r29, 0xC1	; 193
    1172:	e8 81       	ld	r30, Y
    1174:	f9 81       	ldd	r31, Y+1	; 0x01
    1176:	cc 5b       	subi	r28, 0xBC	; 188
    1178:	de 43       	sbci	r29, 0x3E	; 62
    117a:	f6 81       	ldd	r31, Z+6	; 0x06
    117c:	c5 55       	subi	r28, 0x55	; 85
    117e:	d1 4c       	sbci	r29, 0xC1	; 193
    1180:	f8 83       	st	Y, r31
    1182:	cb 5a       	subi	r28, 0xAB	; 171
    1184:	de 43       	sbci	r29, 0x3E	; 62
    1186:	c4 54       	subi	r28, 0x44	; 68
    1188:	d1 4c       	sbci	r29, 0xC1	; 193
    118a:	e8 81       	ld	r30, Y
    118c:	f9 81       	ldd	r31, Y+1	; 0x01
    118e:	cc 5b       	subi	r28, 0xBC	; 188
    1190:	de 43       	sbci	r29, 0x3E	; 62
    1192:	27 80       	ldd	r2, Z+7	; 0x07
    1194:	fe 01       	movw	r30, r28
    1196:	79 96       	adiw	r30, 0x19	; 25
    1198:	31 2c       	mov	r3, r1
    119a:	41 2c       	mov	r4, r1
    119c:	51 2c       	mov	r5, r1
    119e:	61 2c       	mov	r6, r1
    11a0:	71 2c       	mov	r7, r1
    11a2:	81 2c       	mov	r8, r1
    11a4:	91 2c       	mov	r9, r1
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	c8 53       	subi	r28, 0x38	; 56
    11aa:	d1 4c       	sbci	r29, 0xC1	; 193
    11ac:	b8 83       	st	Y, r27
    11ae:	c8 5c       	subi	r28, 0xC8	; 200
    11b0:	de 43       	sbci	r29, 0x3E	; 62
    11b2:	71 cd       	rjmp	.-1310   	; 0xc96 <TheFirstPoint+0x316>
	modulus = *MOD;
	a = *A;
	b = *B;

	// Computing order
	int64_t order = 0;
    11b4:	c4 55       	subi	r28, 0x54	; 84
    11b6:	d1 4c       	sbci	r29, 0xC1	; 193
    11b8:	18 82       	st	Y, r1
    11ba:	cc 5a       	subi	r28, 0xAC	; 172
    11bc:	de 43       	sbci	r29, 0x3E	; 62
    11be:	c3 55       	subi	r28, 0x53	; 83
    11c0:	d1 4c       	sbci	r29, 0xC1	; 193
    11c2:	18 82       	st	Y, r1
    11c4:	cd 5a       	subi	r28, 0xAD	; 173
    11c6:	de 43       	sbci	r29, 0x3E	; 62
    11c8:	c2 55       	subi	r28, 0x52	; 82
    11ca:	d1 4c       	sbci	r29, 0xC1	; 193
    11cc:	18 82       	st	Y, r1
    11ce:	ce 5a       	subi	r28, 0xAE	; 174
    11d0:	de 43       	sbci	r29, 0x3E	; 62
    11d2:	c1 55       	subi	r28, 0x51	; 81
    11d4:	d1 4c       	sbci	r29, 0xC1	; 193
    11d6:	18 82       	st	Y, r1
    11d8:	cf 5a       	subi	r28, 0xAF	; 175
    11da:	de 43       	sbci	r29, 0x3E	; 62
    11dc:	c0 55       	subi	r28, 0x50	; 80
    11de:	d1 4c       	sbci	r29, 0xC1	; 193
    11e0:	18 82       	st	Y, r1
    11e2:	c0 5b       	subi	r28, 0xB0	; 176
    11e4:	de 43       	sbci	r29, 0x3E	; 62
    11e6:	cf 54       	subi	r28, 0x4F	; 79
    11e8:	d1 4c       	sbci	r29, 0xC1	; 193
    11ea:	18 82       	st	Y, r1
    11ec:	c1 5b       	subi	r28, 0xB1	; 177
    11ee:	de 43       	sbci	r29, 0x3E	; 62
    11f0:	ce 54       	subi	r28, 0x4E	; 78
    11f2:	d1 4c       	sbci	r29, 0xC1	; 193
    11f4:	18 82       	st	Y, r1
    11f6:	c2 5b       	subi	r28, 0xB2	; 178
    11f8:	de 43       	sbci	r29, 0x3E	; 62
    11fa:	cd 54       	subi	r28, 0x4D	; 77
    11fc:	d1 4c       	sbci	r29, 0xC1	; 193
    11fe:	18 82       	st	Y, r1
    1200:	c3 5b       	subi	r28, 0xB3	; 179
    1202:	de 43       	sbci	r29, 0x3E	; 62
			}
		}

	}

	order *= 2;
    1204:	c4 55       	subi	r28, 0x54	; 84
    1206:	d1 4c       	sbci	r29, 0xC1	; 193
    1208:	28 81       	ld	r18, Y
    120a:	cc 5a       	subi	r28, 0xAC	; 172
    120c:	de 43       	sbci	r29, 0x3E	; 62
    120e:	c3 55       	subi	r28, 0x53	; 83
    1210:	d1 4c       	sbci	r29, 0xC1	; 193
    1212:	38 81       	ld	r19, Y
    1214:	cd 5a       	subi	r28, 0xAD	; 173
    1216:	de 43       	sbci	r29, 0x3E	; 62
    1218:	c2 55       	subi	r28, 0x52	; 82
    121a:	d1 4c       	sbci	r29, 0xC1	; 193
    121c:	48 81       	ld	r20, Y
    121e:	ce 5a       	subi	r28, 0xAE	; 174
    1220:	de 43       	sbci	r29, 0x3E	; 62
    1222:	c1 55       	subi	r28, 0x51	; 81
    1224:	d1 4c       	sbci	r29, 0xC1	; 193
    1226:	58 81       	ld	r21, Y
    1228:	cf 5a       	subi	r28, 0xAF	; 175
    122a:	de 43       	sbci	r29, 0x3E	; 62
    122c:	c0 55       	subi	r28, 0x50	; 80
    122e:	d1 4c       	sbci	r29, 0xC1	; 193
    1230:	68 81       	ld	r22, Y
    1232:	c0 5b       	subi	r28, 0xB0	; 176
    1234:	de 43       	sbci	r29, 0x3E	; 62
    1236:	cf 54       	subi	r28, 0x4F	; 79
    1238:	d1 4c       	sbci	r29, 0xC1	; 193
    123a:	78 81       	ld	r23, Y
    123c:	c1 5b       	subi	r28, 0xB1	; 177
    123e:	de 43       	sbci	r29, 0x3E	; 62
    1240:	ce 54       	subi	r28, 0x4E	; 78
    1242:	d1 4c       	sbci	r29, 0xC1	; 193
    1244:	88 81       	ld	r24, Y
    1246:	c2 5b       	subi	r28, 0xB2	; 178
    1248:	de 43       	sbci	r29, 0x3E	; 62
    124a:	cd 54       	subi	r28, 0x4D	; 77
    124c:	d1 4c       	sbci	r29, 0xC1	; 193
    124e:	98 81       	ld	r25, Y
    1250:	c3 5b       	subi	r28, 0xB3	; 179
    1252:	de 43       	sbci	r29, 0x3E	; 62
    1254:	01 e0       	ldi	r16, 0x01	; 1
    1256:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__ashldi3>
	order += 1;

	*OrderG = order;
    125a:	a1 e0       	ldi	r26, 0x01	; 1
    125c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__adddi3_s8>
    1260:	ca 53       	subi	r28, 0x3A	; 58
    1262:	d1 4c       	sbci	r29, 0xC1	; 193
    1264:	a8 81       	ld	r26, Y
    1266:	b9 81       	ldd	r27, Y+1	; 0x01
    1268:	c6 5c       	subi	r28, 0xC6	; 198
    126a:	de 43       	sbci	r29, 0x3E	; 62
    126c:	2c 93       	st	X, r18
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	3c 93       	st	X, r19
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	12 96       	adiw	r26, 0x02	; 2
    1276:	4c 93       	st	X, r20
    1278:	12 97       	sbiw	r26, 0x02	; 2
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	5c 93       	st	X, r21
    127e:	13 97       	sbiw	r26, 0x03	; 3
    1280:	14 96       	adiw	r26, 0x04	; 4
    1282:	6c 93       	st	X, r22
    1284:	14 97       	sbiw	r26, 0x04	; 4
    1286:	15 96       	adiw	r26, 0x05	; 5
    1288:	7c 93       	st	X, r23
    128a:	15 97       	sbiw	r26, 0x05	; 5
    128c:	16 96       	adiw	r26, 0x06	; 6
    128e:	8c 93       	st	X, r24
    1290:	16 97       	sbiw	r26, 0x06	; 6
    1292:	17 96       	adiw	r26, 0x07	; 7
    1294:	9c 93       	st	X, r25
}
    1296:	c8 53       	subi	r28, 0x38	; 56
    1298:	d1 4c       	sbci	r29, 0xC1	; 193
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	9f 90       	pop	r9
    12ba:	8f 90       	pop	r8
    12bc:	7f 90       	pop	r7
    12be:	6f 90       	pop	r6
    12c0:	5f 90       	pop	r5
    12c2:	4f 90       	pop	r4
    12c4:	3f 90       	pop	r3
    12c6:	2f 90       	pop	r2
    12c8:	08 95       	ret

000012ca <main>:
/*******************************************************************************/


/************************************************************************/
int main(void)
{
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	e0 97       	sbiw	r28, 0x30	; 48
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61

//#ifdef USB_DEBUG
usb_init();
    12de:	0e 94 9f 14 	call	0x293e	; 0x293e <usb_init>
/* redirect standard input/output (like printf()) to USB stream */

stdout = &usb_stream;
    12e2:	ee e5       	ldi	r30, 0x5E	; 94
    12e4:	fb e0       	ldi	r31, 0x0B	; 11
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	92 e0       	ldi	r25, 0x02	; 2
    12ea:	93 83       	std	Z+3, r25	; 0x03
    12ec:	82 83       	std	Z+2, r24	; 0x02
stdin  = &usb_stream;
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
//#endif



SYS_Init();while(1)
    12f2:	0e 94 9a 13 	call	0x2734	; 0x2734 <SYS_Init>
{
	
	
	int64_t modi, aa, bb, XFF, YFF, OOG;
			
			modi = 17;
    12f6:	0f 2e       	mov	r0, r31
    12f8:	f1 e1       	ldi	r31, 0x11	; 17
    12fa:	af 2e       	mov	r10, r31
    12fc:	f0 2d       	mov	r31, r0
			aa = 2;
    12fe:	68 94       	set
    1300:	bb 24       	eor	r11, r11
    1302:	b1 f8       	bld	r11, 1
			//TheFirstPoint(&modulus, &a, &b, &Xfirst, &Yfirst, &OrderG);
			
			TheFirstPoint(&modi, &aa, &bb, &XFF, &YFF, &OOG);
			
			
			printf("\n\r[TESTZ ZU]: Xfirst is %zu", XFF);
    1304:	0f 2e       	mov	r0, r31
    1306:	f2 e1       	ldi	r31, 0x12	; 18
    1308:	cf 2e       	mov	r12, r31
    130a:	f2 e0       	ldi	r31, 0x02	; 2
    130c:	df 2e       	mov	r13, r31
    130e:	f0 2d       	mov	r31, r0



SYS_Init();while(1)
{
SYS_TaskHandler();
    1310:	0e 94 a1 13 	call	0x2742	; 0x2742 <SYS_TaskHandler>
{
	
	
	int64_t modi, aa, bb, XFF, YFF, OOG;
			
			modi = 17;
    1314:	a9 a6       	std	Y+41, r10	; 0x29
    1316:	1a a6       	std	Y+42, r1	; 0x2a
    1318:	1b a6       	std	Y+43, r1	; 0x2b
    131a:	1c a6       	std	Y+44, r1	; 0x2c
    131c:	1d a6       	std	Y+45, r1	; 0x2d
    131e:	1e a6       	std	Y+46, r1	; 0x2e
    1320:	1f a6       	std	Y+47, r1	; 0x2f
    1322:	18 aa       	std	Y+48, r1	; 0x30
			aa = 2;
    1324:	b9 a2       	std	Y+33, r11	; 0x21
    1326:	1a a2       	std	Y+34, r1	; 0x22
    1328:	1b a2       	std	Y+35, r1	; 0x23
    132a:	1c a2       	std	Y+36, r1	; 0x24
    132c:	1d a2       	std	Y+37, r1	; 0x25
    132e:	1e a2       	std	Y+38, r1	; 0x26
    1330:	1f a2       	std	Y+39, r1	; 0x27
    1332:	18 a6       	std	Y+40, r1	; 0x28
			bb = 2;
    1334:	b9 8e       	std	Y+25, r11	; 0x19
    1336:	1a 8e       	std	Y+26, r1	; 0x1a
    1338:	1b 8e       	std	Y+27, r1	; 0x1b
    133a:	1c 8e       	std	Y+28, r1	; 0x1c
    133c:	1d 8e       	std	Y+29, r1	; 0x1d
    133e:	1e 8e       	std	Y+30, r1	; 0x1e
    1340:	1f 8e       	std	Y+31, r1	; 0x1f
    1342:	18 a2       	std	Y+32, r1	; 0x20
			
			//TheFirstPoint(&modulus, &a, &b, &Xfirst, &Yfirst, &OrderG);
			
			TheFirstPoint(&modi, &aa, &bb, &XFF, &YFF, &OOG);
    1344:	ce 01       	movw	r24, r28
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	7c 01       	movw	r14, r24
    134a:	8e 01       	movw	r16, r28
    134c:	07 5f       	subi	r16, 0xF7	; 247
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	9e 01       	movw	r18, r28
    1352:	2f 5e       	subi	r18, 0xEF	; 239
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	ae 01       	movw	r20, r28
    1358:	47 5e       	subi	r20, 0xE7	; 231
    135a:	5f 4f       	sbci	r21, 0xFF	; 255
    135c:	be 01       	movw	r22, r28
    135e:	6f 5d       	subi	r22, 0xDF	; 223
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	88 96       	adiw	r24, 0x28	; 40
    1364:	0d db       	rcall	.-2534   	; 0x980 <TheFirstPoint>
			
			
			printf("\n\r[TESTZ ZU]: Xfirst is %zu", XFF);
    1366:	88 8d       	ldd	r24, Y+24	; 0x18
    1368:	8f 93       	push	r24
    136a:	8f 89       	ldd	r24, Y+23	; 0x17
    136c:	8f 93       	push	r24
    136e:	8e 89       	ldd	r24, Y+22	; 0x16
    1370:	8f 93       	push	r24
    1372:	8d 89       	ldd	r24, Y+21	; 0x15
    1374:	8f 93       	push	r24
    1376:	8c 89       	ldd	r24, Y+20	; 0x14
    1378:	8f 93       	push	r24
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	8f 93       	push	r24
    137e:	8a 89       	ldd	r24, Y+18	; 0x12
    1380:	8f 93       	push	r24
    1382:	89 89       	ldd	r24, Y+17	; 0x11
    1384:	8f 93       	push	r24
    1386:	df 92       	push	r13
    1388:	cf 92       	push	r12
    138a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <printf>
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	bb cf       	rjmp	.-138    	; 0x1310 <main+0x46>

0000139a <__vector_21>:
 * @brief ISR for BMA150-triggered interrupts. Invokes user defined callbacks
 * if there are any. Remember that depending on the set sensivity (motion
 * duration/-threshold) these interrupts may occur with high frequency!
 */
ISR(TIMER0_COMPA_vect)
{
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	0b b6       	in	r0, 0x3b	; 59
    13a6:	0f 92       	push	r0
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    // if there is an user callback, invoke it
    if(bma150_isr_cb!=NULL)
    13c0:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <__data_end>
    13c4:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <__data_end+0x1>
    13c8:	30 97       	sbiw	r30, 0x00	; 0
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__vector_21+0x34>
        bma150_isr_cb();
    13cc:	09 95       	icall
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0b be       	out	0x3b, r0	; 59
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    13f4:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	a8 95       	wdr
    13fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1400:	88 61       	ori	r24, 0x18	; 24
    1402:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1406:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    140a:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    140c:	e1 e6       	ldi	r30, 0x61	; 97
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	80 83       	st	Z, r24
  CLKPR = 0;
    1414:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1416:	78 94       	sei

  HAL_TimerInit();
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <HAL_TimerInit>
    141a:	08 95       	ret

0000141c <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	16 c0       	rjmp	.+44     	; 0x144c <HAL_TimerDelay>
    1420:	08 95       	ret

00001422 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1422:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <halTimerIrqCount>

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    1426:	80 e1       	ldi	r24, 0x10	; 16
    1428:	97 e2       	ldi	r25, 0x27	; 39
    142a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    142e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
  TCCR4B = (1 << WGM12);              // CTC mode
    1432:	e1 ea       	ldi	r30, 0xA1	; 161
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	88 e0       	ldi	r24, 0x08	; 8
    1438:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    143a:	80 81       	ld	r24, Z
    143c:	82 60       	ori	r24, 0x02	; 2
    143e:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1440:	e2 e7       	ldi	r30, 0x72	; 114
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	82 60       	ori	r24, 0x02	; 2
    1448:	80 83       	st	Z, r24
    144a:	08 95       	ret

0000144c <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    144c:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
    1450:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
    1454:	82 0f       	add	r24, r18
    1456:	93 1f       	adc	r25, r19
    1458:	ea ea       	ldi	r30, 0xAA	; 170
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1460:	20 81       	ld	r18, Z
    1462:	31 81       	ldd	r19, Z+1	; 0x01
    1464:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1468:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    146c:	82 17       	cp	r24, r18
    146e:	93 07       	cpc	r25, r19
    1470:	50 f4       	brcc	.+20     	; 0x1486 <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    1472:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
    1476:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	82 1b       	sub	r24, r18
    1480:	93 0b       	sbc	r25, r19
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    148a:	ca 9b       	sbis	0x19, 2	; 25
    148c:	fe cf       	rjmp	.-4      	; 0x148a <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    148e:	08 95       	ret

00001490 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    1490:	1f 92       	push	r1
    1492:	0f 92       	push	r0
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	0f 92       	push	r0
    1498:	11 24       	eor	r1, r1
    149a:	8f 93       	push	r24
  halTimerIrqCount++;
    149c:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <halTimerIrqCount>
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <halTimerIrqCount>
}
    14a6:	8f 91       	pop	r24
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	8f 93       	push	r24
  halSleepTimerEvent = true;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <halSleepTimerEvent>
}
    14c4:	8f 91       	pop	r24
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <__vector_37>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	0b b6       	in	r0, 0x3b	; 59
    14dc:	0f 92       	push	r0
    14de:	8f 93       	push	r24
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
  udrEmpty = true;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
    14ea:	e9 ec       	ldi	r30, 0xC9	; 201
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7d       	andi	r24, 0xDF	; 223
    14f2:	80 83       	st	Z, r24
}
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	8f 91       	pop	r24
    14fa:	0f 90       	pop	r0
    14fc:	0b be       	out	0x3b, r0	; 59
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	0f 90       	pop	r0
    1504:	1f 90       	pop	r1
    1506:	18 95       	reti

00001508 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	0b b6       	in	r0, 0x3b	; 59
    1514:	0f 92       	push	r0
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    152e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  uint8_t byte = UDRx;
    1532:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    1536:	8c 71       	andi	r24, 0x1C	; 28
    1538:	59 f5       	brne	.+86     	; 0x1590 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
    153a:	e3 e3       	ldi	r30, 0x33	; 51
    153c:	f2 e0       	ldi	r31, 0x02	; 2
    153e:	46 81       	ldd	r20, Z+6	; 0x06
    1540:	57 81       	ldd	r21, Z+7	; 0x07
    1542:	84 81       	ldd	r24, Z+4	; 0x04
    1544:	95 81       	ldd	r25, Z+5	; 0x05
    1546:	48 17       	cp	r20, r24
    1548:	59 07       	cpc	r21, r25
    154a:	11 f1       	breq	.+68     	; 0x1590 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    154c:	40 85       	ldd	r20, Z+8	; 0x08
    154e:	51 85       	ldd	r21, Z+9	; 0x09
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	bc 01       	movw	r22, r24
    1556:	6f 5f       	subi	r22, 0xFF	; 255
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	73 83       	std	Z+3, r23	; 0x03
    155c:	62 83       	std	Z+2, r22	; 0x02
    155e:	da 01       	movw	r26, r20
    1560:	a8 0f       	add	r26, r24
    1562:	b9 1f       	adc	r27, r25
    1564:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    1566:	22 81       	ldd	r18, Z+2	; 0x02
    1568:	33 81       	ldd	r19, Z+3	; 0x03
    156a:	84 81       	ldd	r24, Z+4	; 0x04
    156c:	95 81       	ldd	r25, Z+5	; 0x05
    156e:	28 17       	cp	r18, r24
    1570:	39 07       	cpc	r19, r25
    1572:	21 f4       	brne	.+8      	; 0x157c <__vector_36+0x74>
      rxFifo.tail = 0;
    1574:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <rxFifo+0x3>
    1578:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <rxFifo+0x2>
    rxFifo.bytes++;
    157c:	e3 e3       	ldi	r30, 0x33	; 51
    157e:	f2 e0       	ldi	r31, 0x02	; 2
    1580:	86 81       	ldd	r24, Z+6	; 0x06
    1582:	97 81       	ldd	r25, Z+7	; 0x07
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	97 83       	std	Z+7, r25	; 0x07
    1588:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0b be       	out	0x3b, r0	; 59
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
    15b6:	e6 e3       	ldi	r30, 0x36	; 54
    15b8:	fb e0       	ldi	r31, 0x0B	; 11
    15ba:	14 82       	std	Z+4, r1	; 0x04
    15bc:	15 82       	std	Z+5, r1	; 0x05
    15be:	11 82       	std	Z+1, r1	; 0x01
    15c0:	10 82       	st	Z, r1
    15c2:	17 a2       	std	Z+39, r1	; 0x27
    15c4:	16 a2       	std	Z+38, r1	; 0x26
    15c6:	ec e3       	ldi	r30, 0x3C	; 60
    15c8:	fb e0       	ldi	r31, 0x0B	; 11
    15ca:	8c e5       	ldi	r24, 0x5C	; 92
    15cc:	9b e0       	ldi	r25, 0x0B	; 11
    15ce:	11 92       	st	Z+, r1
    15d0:	11 92       	st	Z+, r1
    15d2:	e8 17       	cp	r30, r24
    15d4:	f9 07       	cpc	r31, r25
    15d6:	d9 f7       	brne	.-10     	; 0x15ce <NWK_Init+0x18>
    15d8:	0f d6       	rcall	.+3102   	; 0x21f8 <nwkTxInit>
    15da:	2c d3       	rcall	.+1624   	; 0x1c34 <nwkRxInit>
    15dc:	db d0       	rcall	.+438    	; 0x1794 <nwkFrameInit>
    15de:	32 d0       	rcall	.+100    	; 0x1644 <nwkDataReqInit>
    15e0:	5e c1       	rjmp	.+700    	; 0x189e <nwkRouteInit>
    15e2:	08 95       	ret

000015e4 <NWK_OpenEndpoint>:
    15e4:	e8 2f       	mov	r30, r24
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	e4 5c       	subi	r30, 0xC4	; 196
    15ee:	f4 4f       	sbci	r31, 0xF4	; 244
    15f0:	71 83       	std	Z+1, r23	; 0x01
    15f2:	60 83       	st	Z, r22
    15f4:	08 95       	ret

000015f6 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    15f6:	66 d3       	rcall	.+1740   	; 0x1cc4 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    15f8:	fe d6       	rcall	.+3580   	; 0x23f6 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    15fa:	29 c0       	rjmp	.+82     	; 0x164e <nwkDataReqTaskHandler>
    15fc:	08 95       	ret

000015fe <nwkDataReqTxConf>:
    15fe:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <nwkDataReqQueue>
    nwkDataReqQueue = req;
  }
  else
  {
    req->next = nwkDataReqQueue;
    nwkDataReqQueue = req;
    1602:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <nwkDataReqQueue+0x1>
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	d9 f0       	breq	.+54     	; 0x1640 <nwkDataReqTxConf+0x42>
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	33 81       	ldd	r19, Z+3	; 0x03
    160e:	82 17       	cp	r24, r18
    1610:	93 07       	cpc	r25, r19
    1612:	89 f4       	brne	.+34     	; 0x1636 <nwkDataReqTxConf+0x38>
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <nwkDataReqTxConf+0x22>
    1616:	22 81       	ldd	r18, Z+2	; 0x02
    1618:	33 81       	ldd	r19, Z+3	; 0x03
    161a:	28 17       	cp	r18, r24
    161c:	39 07       	cpc	r19, r25
    161e:	59 f4       	brne	.+22     	; 0x1636 <nwkDataReqTxConf+0x38>
    1620:	dc 01       	movw	r26, r24
    1622:	ad 57       	subi	r26, 0x7D	; 125
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	2c 91       	ld	r18, X
    1628:	27 87       	std	Z+15, r18	; 0x0f
    162a:	13 96       	adiw	r26, 0x03	; 3
    162c:	2c 91       	ld	r18, X
    162e:	20 8b       	std	Z+16, r18	; 0x10
    1630:	22 e0       	ldi	r18, 0x02	; 2
    1632:	24 83       	std	Z+4, r18	; 0x04
    1634:	05 c0       	rjmp	.+10     	; 0x1640 <nwkDataReqTxConf+0x42>
    1636:	01 90       	ld	r0, Z+
    1638:	f0 81       	ld	r31, Z
    163a:	e0 2d       	mov	r30, r0
    163c:	30 97       	sbiw	r30, 0x00	; 0
    163e:	59 f7       	brne	.-42     	; 0x1616 <nwkDataReqTxConf+0x18>
    1640:	eb c0       	rjmp	.+470    	; 0x1818 <nwkFrameFree>
    1642:	08 95       	ret

00001644 <nwkDataReqInit>:
    1644:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <nwkDataReqQueue+0x1>
    1648:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <nwkDataReqQueue>
    164c:	08 95       	ret

0000164e <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1656:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <nwkDataReqQueue>
    165a:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <nwkDataReqQueue+0x1>
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	09 f4       	brne	.+2      	; 0x1664 <nwkDataReqTaskHandler+0x16>
    1662:	93 c0       	rjmp	.+294    	; 0x178a <nwkDataReqTaskHandler+0x13c>
    1664:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	88 23       	and	r24, r24
    166a:	21 f0       	breq	.+8      	; 0x1674 <nwkDataReqTaskHandler+0x26>
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	09 f4       	brne	.+2      	; 0x1672 <nwkDataReqTaskHandler+0x24>
    1670:	66 c0       	rjmp	.+204    	; 0x173e <nwkDataReqTaskHandler+0xf0>
    1672:	85 c0       	rjmp	.+266    	; 0x177e <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    1674:	9a d0       	rcall	.+308    	; 0x17aa <nwkFrameAlloc>
    1676:	8c 01       	movw	r16, r24
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	21 f4       	brne	.+8      	; 0x1684 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	83 c0       	rjmp	.+262    	; 0x178a <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    1684:	9b 83       	std	Y+3, r25	; 0x03
    1686:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    168c:	f8 01       	movw	r30, r16
    168e:	e9 57       	subi	r30, 0x79	; 121
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	9a e0       	ldi	r25, 0x0A	; 10
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    169a:	31 97       	sbiw	r30, 0x01	; 1
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	82 fb       	bst	r24, 2
    16a0:	88 27       	eor	r24, r24
    16a2:	80 f9       	bld	r24, 0
    16a4:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    16a6:	99 85       	ldd	r25, Y+9	; 0x09
    16a8:	d8 01       	movw	r26, r16
    16aa:	1b 96       	adiw	r26, 0x0b	; 11
    16ac:	8c 91       	ld	r24, X
    16ae:	1b 97       	sbiw	r26, 0x0b	; 11
    16b0:	90 fb       	bst	r25, 0
    16b2:	80 f9       	bld	r24, 0
    16b4:	1b 96       	adiw	r26, 0x0b	; 11
    16b6:	8c 93       	st	X, r24
    16b8:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    16ba:	99 85       	ldd	r25, Y+9	; 0x09
    16bc:	93 fb       	bst	r25, 3
    16be:	99 27       	eor	r25, r25
    16c0:	90 f9       	bld	r25, 0
    16c2:	90 fb       	bst	r25, 0
    16c4:	82 f9       	bld	r24, 2
    16c6:	1b 96       	adiw	r26, 0x0b	; 11
    16c8:	8c 93       	st	X, r24
    16ca:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    16cc:	e6 e3       	ldi	r30, 0x36	; 54
    16ce:	fb e0       	ldi	r31, 0x0B	; 11
    16d0:	84 81       	ldd	r24, Z+4	; 0x04
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	84 83       	std	Z+4, r24	; 0x04
    16d6:	1c 96       	adiw	r26, 0x0c	; 12
    16d8:	8c 93       	st	X, r24
    16da:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	1e 96       	adiw	r26, 0x0e	; 14
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
    16e6:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	50 96       	adiw	r26, 0x10	; 16
    16ee:	9c 93       	st	X, r25
    16f0:	8e 93       	st	-X, r24
    16f2:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    16f4:	88 85       	ldd	r24, Y+8	; 0x08
    16f6:	98 2f       	mov	r25, r24
    16f8:	9f 70       	andi	r25, 0x0F	; 15
    16fa:	51 96       	adiw	r26, 0x11	; 17
    16fc:	8c 91       	ld	r24, X
    16fe:	51 97       	sbiw	r26, 0x11	; 17
    1700:	80 7f       	andi	r24, 0xF0	; 240
    1702:	89 2b       	or	r24, r25
    1704:	51 96       	adiw	r26, 0x11	; 17
    1706:	8c 93       	st	X, r24
    1708:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    170a:	9f 81       	ldd	r25, Y+7	; 0x07
    170c:	92 95       	swap	r25
    170e:	90 7f       	andi	r25, 0xF0	; 240
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	89 2b       	or	r24, r25
    1714:	51 96       	adiw	r26, 0x11	; 17
    1716:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    1718:	f8 01       	movw	r30, r16
    171a:	ef 57       	subi	r30, 0x7F	; 127
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	6a 85       	ldd	r22, Y+10	; 0x0a
    1724:	7b 85       	ldd	r23, Y+11	; 0x0b
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	0e 94 94 1b 	call	0x3728	; 0x3728 <memcpy>
  frame->size += req->size;
    172e:	f8 01       	movw	r30, r16
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	8c 85       	ldd	r24, Y+12	; 0x0c
    1734:	89 0f       	add	r24, r25
    1736:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    1738:	c8 01       	movw	r24, r16
    173a:	81 d5       	rcall	.+2818   	; 0x223e <nwkTxFrame>
    173c:	26 c0       	rjmp	.+76     	; 0x178a <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    173e:	ec 17       	cp	r30, r28
    1740:	fd 07       	cpc	r31, r29
    1742:	41 f4       	brne	.+16     	; 0x1754 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <nwkDataReqQueue+0x1>
    174c:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <nwkDataReqQueue>
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    1752:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	8c 17       	cp	r24, r28
    175a:	9d 07       	cpc	r25, r29
    175c:	d1 f7       	brne	.-12     	; 0x1752 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    175e:	88 81       	ld	r24, Y
    1760:	99 81       	ldd	r25, Y+1	; 0x01
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    1766:	e6 e3       	ldi	r30, 0x36	; 54
    1768:	fb e0       	ldi	r31, 0x0B	; 11
    176a:	86 a1       	ldd	r24, Z+38	; 0x26
    176c:	97 a1       	ldd	r25, Z+39	; 0x27
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	97 a3       	std	Z+39, r25	; 0x27
    1772:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    1774:	ed 85       	ldd	r30, Y+13	; 0x0d
    1776:	fe 85       	ldd	r31, Y+14	; 0x0e
    1778:	ce 01       	movw	r24, r28
    177a:	09 95       	icall
    177c:	06 c0       	rjmp	.+12     	; 0x178a <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    177e:	09 90       	ld	r0, Y+
    1780:	d8 81       	ld	r29, Y
    1782:	c0 2d       	mov	r28, r0
    1784:	20 97       	sbiw	r28, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <nwkDataReqTaskHandler+0x13c>
    1788:	6e cf       	rjmp	.-292    	; 0x1666 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1794:	ef e3       	ldi	r30, 0x3F	; 63
    1796:	f2 e0       	ldi	r31, 0x02	; 2
    1798:	89 e9       	ldi	r24, 0x99	; 153
    179a:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    179c:	10 82       	st	Z, r1
    179e:	e7 57       	subi	r30, 0x77	; 119
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    17a2:	e8 17       	cp	r30, r24
    17a4:	f9 07       	cpc	r31, r25
    17a6:	d1 f7       	brne	.-12     	; 0x179c <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    17a8:	08 95       	ret

000017aa <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    17aa:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <nwkFrameFrames>
    17ae:	88 23       	and	r24, r24
    17b0:	49 f0       	breq	.+18     	; 0x17c4 <nwkFrameAlloc+0x1a>
    17b2:	e8 ec       	ldi	r30, 0xC8	; 200
    17b4:	f2 e0       	ldi	r31, 0x02	; 2
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	ac 01       	movw	r20, r24
    17bc:	20 81       	ld	r18, Z
    17be:	21 11       	cpse	r18, r1
    17c0:	22 c0       	rjmp	.+68     	; 0x1806 <nwkFrameAlloc+0x5c>
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <nwkFrameAlloc+0x1e>
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    17c8:	69 e8       	ldi	r22, 0x89	; 137
    17ca:	64 9f       	mul	r22, r20
    17cc:	90 01       	movw	r18, r0
    17ce:	65 9f       	mul	r22, r21
    17d0:	30 0d       	add	r19, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	c9 01       	movw	r24, r18
    17d6:	81 5c       	subi	r24, 0xC1	; 193
    17d8:	9d 4f       	sbci	r25, 0xFD	; 253
    17da:	fc 01       	movw	r30, r24
    17dc:	11 92       	st	Z+, r1
    17de:	6a 95       	dec	r22
    17e0:	e9 f7       	brne	.-6      	; 0x17dc <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    17e2:	40 e1       	ldi	r20, 0x10	; 16
    17e4:	fc 01       	movw	r30, r24
    17e6:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    17e8:	ef 57       	subi	r30, 0x7F	; 127
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	2f 5a       	subi	r18, 0xAF	; 175
    17ee:	3d 4f       	sbci	r19, 0xFD	; 253
    17f0:	31 83       	std	Z+1, r19	; 0x01
    17f2:	20 83       	st	Z, r18
      nwkIb.lock++;
    17f4:	e6 e3       	ldi	r30, 0x36	; 54
    17f6:	fb e0       	ldi	r31, 0x0B	; 11
    17f8:	26 a1       	ldd	r18, Z+38	; 0x26
    17fa:	37 a1       	ldd	r19, Z+39	; 0x27
    17fc:	2f 5f       	subi	r18, 0xFF	; 255
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	37 a3       	std	Z+39, r19	; 0x27
    1802:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    1804:	08 95       	ret
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	e7 57       	subi	r30, 0x77	; 119
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    180c:	8a 30       	cpi	r24, 0x0A	; 10
    180e:	91 05       	cpc	r25, r1
    1810:	a1 f6       	brne	.-88     	; 0x17ba <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
}
    1816:	08 95       	ret

00001818 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    1818:	fc 01       	movw	r30, r24
    181a:	10 82       	st	Z, r1
  nwkIb.lock--;
    181c:	e6 e3       	ldi	r30, 0x36	; 54
    181e:	fb e0       	ldi	r31, 0x0B	; 11
    1820:	86 a1       	ldd	r24, Z+38	; 0x26
    1822:	97 a1       	ldd	r25, Z+39	; 0x27
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	97 a3       	std	Z+39, r25	; 0x27
    1828:	86 a3       	std	Z+38, r24	; 0x26
    182a:	08 95       	ret

0000182c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	41 f0       	breq	.+16     	; 0x1840 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1830:	fc 01       	movw	r30, r24
    1832:	e7 57       	subi	r30, 0x77	; 119
    1834:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1836:	87 e0       	ldi	r24, 0x07	; 7
    1838:	e9 39       	cpi	r30, 0x99	; 153
    183a:	f8 07       	cpc	r31, r24
    183c:	18 f0       	brcs	.+6      	; 0x1844 <nwkFrameNext+0x18>
    183e:	12 c0       	rjmp	.+36     	; 0x1864 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1840:	ef e3       	ldi	r30, 0x3F	; 63
    1842:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1844:	80 81       	ld	r24, Z
    1846:	88 23       	and	r24, r24
    1848:	21 f0       	breq	.+8      	; 0x1852 <nwkFrameNext+0x26>
    184a:	0f c0       	rjmp	.+30     	; 0x186a <nwkFrameNext+0x3e>
    184c:	80 81       	ld	r24, Z
    184e:	81 11       	cpse	r24, r1
    1850:	0f c0       	rjmp	.+30     	; 0x1870 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1852:	e7 57       	subi	r30, 0x77	; 119
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	87 e0       	ldi	r24, 0x07	; 7
    1858:	e9 39       	cpi	r30, 0x99	; 153
    185a:	f8 07       	cpc	r31, r24
    185c:	b8 f3       	brcs	.-18     	; 0x184c <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	08 95       	ret
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    186a:	8e 2f       	mov	r24, r30
    186c:	9f 2f       	mov	r25, r31
    186e:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1870:	8e 2f       	mov	r24, r30
    1872:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    1874:	08 95       	ret

00001876 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1876:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    1878:	dc 01       	movw	r26, r24
    187a:	ad 57       	subi	r26, 0x7D	; 125
    187c:	bf 4f       	sbci	r27, 0xFF	; 255
    187e:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1880:	a6 e3       	ldi	r26, 0x36	; 54
    1882:	bb e0       	ldi	r27, 0x0B	; 11
    1884:	14 96       	adiw	r26, 0x04	; 4
    1886:	9c 91       	ld	r25, X
    1888:	14 97       	sbiw	r26, 0x04	; 4
    188a:	9f 5f       	subi	r25, 0xFF	; 255
    188c:	14 96       	adiw	r26, 0x04	; 4
    188e:	9c 93       	st	X, r25
    1890:	14 97       	sbiw	r26, 0x04	; 4
    1892:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1894:	8d 91       	ld	r24, X+
    1896:	9c 91       	ld	r25, X
    1898:	96 87       	std	Z+14, r25	; 0x0e
    189a:	85 87       	std	Z+13, r24	; 0x0d
    189c:	08 95       	ret

0000189e <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    189e:	aa e9       	ldi	r26, 0x9A	; 154
    18a0:	b7 e0       	ldi	r27, 0x07	; 7
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	4f ef       	ldi	r20, 0xFF	; 255
    18a8:	5f ef       	ldi	r21, 0xFF	; 255
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	5c 93       	st	X, r21
    18ae:	4e 93       	st	-X, r20
    18b0:	fc 01       	movw	r30, r24
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	e8 1b       	sub	r30, r24
    18c0:	f9 0b       	sbc	r31, r25
    18c2:	e7 56       	subi	r30, 0x67	; 103
    18c4:	f8 4f       	sbci	r31, 0xF8	; 248
    18c6:	20 81       	ld	r18, Z
    18c8:	2e 7f       	andi	r18, 0xFE	; 254
    18ca:	20 83       	st	Z, r18
    18cc:	14 96       	adiw	r26, 0x04	; 4
    18ce:	1c 92       	st	X, r1
    18d0:	14 97       	sbiw	r26, 0x04	; 4
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	17 96       	adiw	r26, 0x07	; 7
    18d6:	84 36       	cpi	r24, 0x64	; 100
    18d8:	91 05       	cpc	r25, r1
    18da:	39 f7       	brne	.-50     	; 0x18aa <nwkRouteInit+0xc>
    18dc:	08 95       	ret

000018de <NWK_RouteFindEntry>:
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ea e9       	ldi	r30, 0x9A	; 154
    18e8:	f7 e0       	ldi	r31, 0x07	; 7
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	06 2f       	mov	r16, r22
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	40 81       	ld	r20, Z
    18f4:	51 81       	ldd	r21, Z+1	; 0x01
    18f6:	48 17       	cp	r20, r24
    18f8:	59 07       	cpc	r21, r25
    18fa:	b1 f4       	brne	.+44     	; 0x1928 <NWK_RouteFindEntry+0x4a>
    18fc:	d9 01       	movw	r26, r18
    18fe:	aa 0f       	add	r26, r26
    1900:	bb 1f       	adc	r27, r27
    1902:	aa 0f       	add	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	aa 0f       	add	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	a2 1b       	sub	r26, r18
    190c:	b3 0b       	sbc	r27, r19
    190e:	a7 56       	subi	r26, 0x67	; 103
    1910:	b8 4f       	sbci	r27, 0xF8	; 248
    1912:	4c 91       	ld	r20, X
    1914:	46 95       	lsr	r20
    1916:	41 70       	andi	r20, 0x01	; 1
    1918:	c4 2f       	mov	r28, r20
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	d4 2f       	mov	r29, r20
    191e:	c0 17       	cp	r28, r16
    1920:	d1 07       	cpc	r29, r17
    1922:	11 f4       	brne	.+4      	; 0x1928 <NWK_RouteFindEntry+0x4a>
    1924:	cd 01       	movw	r24, r26
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <NWK_RouteFindEntry+0x5a>
    1928:	2f 5f       	subi	r18, 0xFF	; 255
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	37 96       	adiw	r30, 0x07	; 7
    192e:	24 36       	cpi	r18, 0x64	; 100
    1930:	31 05       	cpc	r19, r1
    1932:	f9 f6       	brne	.-66     	; 0x18f2 <NWK_RouteFindEntry+0x14>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	08 95       	ret

00001942 <NWK_RouteNewEntry>:
    1942:	a0 e0       	ldi	r26, 0x00	; 0
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e9 e9       	ldi	r30, 0x99	; 153
    1948:	f7 e0       	ldi	r31, 0x07	; 7
    194a:	80 81       	ld	r24, Z
    194c:	80 fd       	sbrc	r24, 0
    194e:	0d c0       	rjmp	.+26     	; 0x196a <NWK_RouteNewEntry+0x28>
    1950:	85 81       	ldd	r24, Z+5	; 0x05
    1952:	88 23       	and	r24, r24
    1954:	81 f0       	breq	.+32     	; 0x1976 <NWK_RouteNewEntry+0x34>
    1956:	10 97       	sbiw	r26, 0x00	; 0
    1958:	39 f0       	breq	.+14     	; 0x1968 <NWK_RouteNewEntry+0x26>
    195a:	15 96       	adiw	r26, 0x05	; 5
    195c:	9c 91       	ld	r25, X
    195e:	15 97       	sbiw	r26, 0x05	; 5
    1960:	89 17       	cp	r24, r25
    1962:	18 f4       	brcc	.+6      	; 0x196a <NWK_RouteNewEntry+0x28>
    1964:	df 01       	movw	r26, r30
    1966:	01 c0       	rjmp	.+2      	; 0x196a <NWK_RouteNewEntry+0x28>
    1968:	df 01       	movw	r26, r30
    196a:	37 96       	adiw	r30, 0x07	; 7
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	e5 35       	cpi	r30, 0x55	; 85
    1970:	f8 07       	cpc	r31, r24
    1972:	59 f7       	brne	.-42     	; 0x194a <NWK_RouteNewEntry+0x8>
    1974:	fd 01       	movw	r30, r26
    1976:	80 81       	ld	r24, Z
    1978:	8d 70       	andi	r24, 0x0D	; 13
    197a:	80 63       	ori	r24, 0x30	; 48
    197c:	80 83       	st	Z, r24
    197e:	80 e8       	ldi	r24, 0x80	; 128
    1980:	85 83       	std	Z+5, r24	; 0x05
    1982:	cf 01       	movw	r24, r30
    1984:	08 95       	ret

00001986 <NWK_RouteFreeEntry>:
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	80 fd       	sbrc	r24, 0
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <NWK_RouteFreeEntry+0x12>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	92 83       	std	Z+2, r25	; 0x02
    1994:	81 83       	std	Z+1, r24	; 0x01
    1996:	15 82       	std	Z+5, r1	; 0x05
    1998:	08 95       	ret

0000199a <NWK_RouteNextHop>:
    199a:	a1 df       	rcall	.-190    	; 0x18de <NWK_RouteFindEntry>
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	21 f0       	breq	.+8      	; 0x19a8 <NWK_RouteNextHop+0xe>
    19a0:	fc 01       	movw	r30, r24
    19a2:	83 81       	ldd	r24, Z+3	; 0x03
    19a4:	94 81       	ldd	r25, Z+4	; 0x04
    19a6:	08 95       	ret
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	08 95       	ret

000019ae <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    19ae:	97 df       	rcall	.-210    	; 0x18de <NWK_RouteFindEntry>
  if (entry)
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <nwkRouteRemove+0x8>
    19b4:	e8 cf       	rjmp	.-48     	; 0x1986 <NWK_RouteFreeEntry>
    19b6:	08 95       	ret

000019b8 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    19c2:	01 85       	ldd	r16, Z+9	; 0x09
    19c4:	12 85       	ldd	r17, Z+10	; 0x0a
    19c6:	11 23       	and	r17, r17
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <nwkRouteFrameReceived+0x1c>
    19ca:	85 85       	ldd	r24, Z+13	; 0x0d
    19cc:	96 85       	ldd	r25, Z+14	; 0x0e
    19ce:	08 17       	cp	r16, r24
    19d0:	19 07       	cpc	r17, r25
    19d2:	e1 f5       	brne	.+120    	; 0x1a4c <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    19d4:	85 81       	ldd	r24, Z+5	; 0x05
    19d6:	96 81       	ldd	r25, Z+6	; 0x06
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	c1 f1       	breq	.+112    	; 0x1a4c <nwkRouteFrameReceived+0x94>
    19dc:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	85 85       	ldd	r24, Z+13	; 0x0d
    19e2:	96 85       	ldd	r25, Z+14	; 0x0e
    19e4:	7c df       	rcall	.-264    	; 0x18de <NWK_RouteFindEntry>
    19e6:	fc 01       	movw	r30, r24

  if (entry)
    19e8:	89 2b       	or	r24, r25
    19ea:	a1 f0       	breq	.+40     	; 0x1a14 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    19ec:	8f 81       	ldd	r24, Y+7	; 0x07
    19ee:	98 85       	ldd	r25, Y+8	; 0x08
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	f9 f4       	brne	.+62     	; 0x1a32 <nwkRouteFrameReceived+0x7a>
    19f4:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <nwkIb>
    19f8:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <nwkIb+0x1>
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	98 89       	ldd	r25, Y+16	; 0x10
    1a00:	28 17       	cp	r18, r24
    1a02:	39 07       	cpc	r19, r25
    1a04:	b1 f4       	brne	.+44     	; 0x1a32 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    1a06:	14 83       	std	Z+4, r17	; 0x04
    1a08:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8f 70       	andi	r24, 0x0F	; 15
    1a0e:	80 63       	ori	r24, 0x30	; 48
    1a10:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <nwkRouteFrameReceived+0x70>
    1a14:	96 df       	rcall	.-212    	; 0x1942 <NWK_RouteNewEntry>
    1a16:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	92 83       	std	Z+2, r25	; 0x02
    1a1e:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	94 83       	std	Z+4, r25	; 0x04
    1a26:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1a28:	cd 57       	subi	r28, 0x7D	; 125
    1a2a:	df 4f       	sbci	r29, 0xFF	; 255
    1a2c:	88 81       	ld	r24, Y
    1a2e:	86 83       	std	Z+6, r24	; 0x06
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    1a32:	83 81       	ldd	r24, Z+3	; 0x03
    1a34:	94 81       	ldd	r25, Z+4	; 0x04
    1a36:	08 17       	cp	r16, r24
    1a38:	19 07       	cpc	r17, r25
    1a3a:	b1 f3       	breq	.-20     	; 0x1a28 <nwkRouteFrameReceived+0x70>
    1a3c:	96 81       	ldd	r25, Z+6	; 0x06
    1a3e:	de 01       	movw	r26, r28
    1a40:	ad 57       	subi	r26, 0x7D	; 125
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	8c 91       	ld	r24, X
    1a46:	98 17       	cp	r25, r24
    1a48:	f0 f2       	brcs	.-68     	; 0x1a06 <nwkRouteFrameReceived+0x4e>
    1a4a:	ee cf       	rjmp	.-36     	; 0x1a28 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    1a5c:	87 85       	ldd	r24, Z+15	; 0x0f
    1a5e:	90 89       	ldd	r25, Z+16	; 0x10
    1a60:	8f 3f       	cpi	r24, 0xFF	; 255
    1a62:	2f ef       	ldi	r18, 0xFF	; 255
    1a64:	92 07       	cpc	r25, r18
    1a66:	d9 f1       	breq	.+118    	; 0x1ade <nwkRouteFrameSent+0x88>
    1a68:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    1a6a:	63 85       	ldd	r22, Z+11	; 0x0b
    1a6c:	63 fb       	bst	r22, 3
    1a6e:	66 27       	eor	r22, r22
    1a70:	60 f9       	bld	r22, 0
    1a72:	35 df       	rcall	.-406    	; 0x18de <NWK_RouteFindEntry>
    1a74:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    1a76:	89 2b       	or	r24, r25
    1a78:	91 f1       	breq	.+100    	; 0x1ade <nwkRouteFrameSent+0x88>
    1a7a:	8c 91       	ld	r24, X
    1a7c:	80 fd       	sbrc	r24, 0
    1a7e:	2f c0       	rjmp	.+94     	; 0x1ade <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    1a80:	fe 01       	movw	r30, r28
    1a82:	ed 57       	subi	r30, 0x7D	; 125
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	81 11       	cpse	r24, r1
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1a8c:	8c 91       	ld	r24, X
    1a8e:	8f 70       	andi	r24, 0x0F	; 15
    1a90:	80 63       	ori	r24, 0x30	; 48
    1a92:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    1a94:	15 96       	adiw	r26, 0x05	; 5
    1a96:	8c 91       	ld	r24, X
    1a98:	15 97       	sbiw	r26, 0x05	; 5
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	15 96       	adiw	r26, 0x05	; 5
    1a9e:	8c 93       	st	X, r24
    1aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa2:	e9 f4       	brne	.+58     	; 0x1ade <nwkRouteFrameSent+0x88>
    1aa4:	ee e9       	ldi	r30, 0x9E	; 158
    1aa6:	f7 e0       	ldi	r31, 0x07	; 7
    1aa8:	2a e5       	ldi	r18, 0x5A	; 90
    1aaa:	3a e0       	ldi	r19, 0x0A	; 10
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1aac:	80 81       	ld	r24, Z
    1aae:	86 95       	lsr	r24
    1ab0:	8f 5f       	subi	r24, 0xFF	; 255
    1ab2:	80 83       	st	Z, r24
    1ab4:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1ab6:	e2 17       	cp	r30, r18
    1ab8:	f3 07       	cpc	r31, r19
    1aba:	c1 f7       	brne	.-16     	; 0x1aac <nwkRouteFrameSent+0x56>
    1abc:	10 c0       	rjmp	.+32     	; 0x1ade <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1abe:	9c 91       	ld	r25, X
    1ac0:	89 2f       	mov	r24, r25
    1ac2:	82 95       	swap	r24
    1ac4:	8f 70       	andi	r24, 0x0F	; 15
    1ac6:	81 5f       	subi	r24, 0xF1	; 241
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	28 2f       	mov	r18, r24
    1acc:	22 95       	swap	r18
    1ace:	20 7f       	andi	r18, 0xF0	; 240
    1ad0:	9f 70       	andi	r25, 0x0F	; 15
    1ad2:	92 2b       	or	r25, r18
    1ad4:	9c 93       	st	X, r25
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1ada:	cd 01       	movw	r24, r26
    1adc:	54 df       	rcall	.-344    	; 0x1986 <NWK_RouteFreeEntry>
  }
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1aea:	87 85       	ldd	r24, Z+15	; 0x0f
    1aec:	90 89       	ldd	r25, Z+16	; 0x10
    1aee:	8f 3f       	cpi	r24, 0xFF	; 255
    1af0:	2f ef       	ldi	r18, 0xFF	; 255
    1af2:	92 07       	cpc	r25, r18
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
    1afa:	90 87       	std	Z+8, r25	; 0x08
    1afc:	87 83       	std	Z+7, r24	; 0x07
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    1b00:	23 85       	ldd	r18, Z+11	; 0x0b
    1b02:	22 ff       	sbrs	r18, 2
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1b06:	90 87       	std	Z+8, r25	; 0x08
    1b08:	87 83       	std	Z+7, r24	; 0x07
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <nwkRoutePrepareTx+0x38>
    1b0c:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1b0e:	63 85       	ldd	r22, Z+11	; 0x0b
    1b10:	63 fb       	bst	r22, 3
    1b12:	66 27       	eor	r22, r22
    1b14:	60 f9       	bld	r22, 0
    1b16:	41 df       	rcall	.-382    	; 0x199a <NWK_RouteNextHop>
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1b22:	af 92       	push	r10
    1b24:	bf 92       	push	r11
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    1b36:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b38:	13 fb       	bst	r17, 3
    1b3a:	11 27       	eor	r17, r17
    1b3c:	10 f9       	bld	r17, 0
    1b3e:	cf 84       	ldd	r12, Y+15	; 0x0f
    1b40:	d8 88       	ldd	r13, Y+16	; 0x10
    1b42:	61 2f       	mov	r22, r17
    1b44:	c6 01       	movw	r24, r12
    1b46:	29 df       	rcall	.-430    	; 0x199a <NWK_RouteNextHop>
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	59 f0       	breq	.+22     	; 0x1b62 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e9 57       	subi	r30, 0x79	; 121
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	11 82       	std	Z+1, r1	; 0x01
    1b54:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1b56:	31 97       	sbiw	r30, 0x01	; 1
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	6f d3       	rcall	.+1758   	; 0x223e <nwkTxFrame>
    1b60:	22 c0       	rjmp	.+68     	; 0x1ba6 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    1b62:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    1b64:	be 84       	ldd	r11, Y+14	; 0x0e
    1b66:	21 de       	rcall	.-958    	; 0x17aa <nwkFrameAlloc>
    1b68:	7c 01       	movw	r14, r24
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
    1b6c:	d1 f0       	breq	.+52     	; 0x1ba2 <nwkRouteFrame+0x80>
    1b6e:	83 de       	rcall	.-762    	; 0x1876 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    1b70:	f7 01       	movw	r30, r14
    1b72:	81 81       	ldd	r24, Z+1	; 0x01
    1b74:	8a 5f       	subi	r24, 0xFA	; 250
    1b76:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    1b78:	e9 57       	subi	r30, 0x79	; 121
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	11 82       	std	Z+1, r1	; 0x01
    1b7e:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    1b80:	f7 01       	movw	r30, r14
    1b82:	b0 8a       	std	Z+16, r11	; 0x10
    1b84:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    1b86:	ef 57       	subi	r30, 0x7F	; 127
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	01 90       	ld	r0, Z+
    1b8c:	f0 81       	ld	r31, Z
    1b8e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
  command->srcAddr = src;
    1b94:	b2 82       	std	Z+2, r11	; 0x02
    1b96:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1b98:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
    1b9a:	c3 82       	std	Z+3, r12	; 0x03
    1b9c:	15 83       	std	Z+5, r17	; 0x05
    1b9e:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    1ba0:	4e d3       	rcall	.+1692   	; 0x223e <nwkTxFrame>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	39 de       	rcall	.-910    	; 0x1818 <nwkFrameFree>
  }
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	08 95       	ret

00001bba <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    1bba:	fc 01       	movw	r30, r24
    1bbc:	21 85       	ldd	r18, Z+9	; 0x09
    1bbe:	26 30       	cpi	r18, 0x06	; 6
    1bc0:	49 f4       	brne	.+18     	; 0x1bd4 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1bc2:	07 80       	ldd	r0, Z+7	; 0x07
    1bc4:	f0 85       	ldd	r31, Z+8	; 0x08
    1bc6:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1bc8:	65 81       	ldd	r22, Z+5	; 0x05
    1bca:	83 81       	ldd	r24, Z+3	; 0x03
    1bcc:	94 81       	ldd	r25, Z+4	; 0x04
    1bce:	ef de       	rcall	.-546    	; 0x19ae <nwkRouteRemove>

  return true;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1bd4:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1bd6:	08 95       	ret

00001bd8 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1bd8:	dc 01       	movw	r26, r24
    1bda:	19 96       	adiw	r26, 0x09	; 9
    1bdc:	2c 91       	ld	r18, X
    1bde:	19 97       	sbiw	r26, 0x09	; 9
    1be0:	22 23       	and	r18, r18
    1be2:	71 f0       	breq	.+28     	; 0x1c00 <nwkRxServiceDataInd+0x28>
    1be4:	17 96       	adiw	r26, 0x07	; 7
    1be6:	ed 91       	ld	r30, X+
    1be8:	fc 91       	ld	r31, X
    1bea:	18 97       	sbiw	r26, 0x08	; 8
    1bec:	20 81       	ld	r18, Z
    1bee:	22 23       	and	r18, r18
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <nwkRxServiceDataInd+0x20>
    1bf2:	21 30       	cpi	r18, 0x01	; 1
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <nwkRxServiceDataInd+0x24>
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <nwkRxServiceDataInd+0x2c>
    1bf8:	b6 c3       	rjmp	.+1900   	; 0x2366 <nwkTxAckReceived>
    1bfa:	08 95       	ret
    1bfc:	de cf       	rjmp	.-68     	; 0x1bba <nwkRouteErrorReceived>
    1bfe:	08 95       	ret
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	08 95       	ret
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	08 95       	ret

00001c08 <nwkRxDuplicateRejectionTimerHandler>:
    1c08:	bc 01       	movw	r22, r24
    1c0a:	e7 e6       	ldi	r30, 0x67	; 103
    1c0c:	fa e0       	ldi	r31, 0x0A	; 10
    1c0e:	29 e9       	ldi	r18, 0x99	; 153
    1c10:	3a e0       	ldi	r19, 0x0A	; 10
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	51 e0       	ldi	r21, 0x01	; 1
    1c16:	90 81       	ld	r25, Z
    1c18:	99 23       	and	r25, r25
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1c1c:	91 50       	subi	r25, 0x01	; 1
    1c1e:	90 83       	st	Z, r25
    1c20:	45 2f       	mov	r20, r21
    1c22:	35 96       	adiw	r30, 0x05	; 5
    1c24:	e2 17       	cp	r30, r18
    1c26:	f3 07       	cpc	r31, r19
    1c28:	b1 f7       	brne	.-20     	; 0x1c16 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1c2a:	44 23       	and	r20, r20
    1c2c:	11 f0       	breq	.+4      	; 0x1c32 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1c2e:	cb 01       	movw	r24, r22
    1c30:	10 c6       	rjmp	.+3104   	; 0x2852 <SYS_TimerStart>
    1c32:	08 95       	ret

00001c34 <nwkRxInit>:
    1c34:	e7 e6       	ldi	r30, 0x67	; 103
    1c36:	fa e0       	ldi	r31, 0x0A	; 10
    1c38:	89 e9       	ldi	r24, 0x99	; 153
    1c3a:	9a e0       	ldi	r25, 0x0A	; 10
    1c3c:	10 82       	st	Z, r1
    1c3e:	35 96       	adiw	r30, 0x05	; 5
    1c40:	e8 17       	cp	r30, r24
    1c42:	f9 07       	cpc	r31, r25
    1c44:	d9 f7       	brne	.-10     	; 0x1c3c <nwkRxInit+0x8>
    1c46:	e5 e5       	ldi	r30, 0x55	; 85
    1c48:	fa e0       	ldi	r31, 0x0A	; 10
    1c4a:	84 e6       	ldi	r24, 0x64	; 100
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	86 83       	std	Z+6, r24	; 0x06
    1c54:	97 83       	std	Z+7, r25	; 0x07
    1c56:	a0 87       	std	Z+8, r26	; 0x08
    1c58:	b1 87       	std	Z+9, r27	; 0x09
    1c5a:	12 86       	std	Z+10, r1	; 0x0a
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	9e e0       	ldi	r25, 0x0E	; 14
    1c60:	94 87       	std	Z+12, r25	; 0x0c
    1c62:	83 87       	std	Z+11, r24	; 0x0b
    1c64:	6c ee       	ldi	r22, 0xEC	; 236
    1c66:	7d e0       	ldi	r23, 0x0D	; 13
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	bc cc       	rjmp	.-1672   	; 0x15e4 <NWK_OpenEndpoint>
    1c6c:	08 95       	ret

00001c6e <PHY_DataInd>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	dc 01       	movw	r26, r24
    1c74:	ed 91       	ld	r30, X+
    1c76:	fc 91       	ld	r31, X
    1c78:	11 97       	sbiw	r26, 0x01	; 1
    1c7a:	21 81       	ldd	r18, Z+1	; 0x01
    1c7c:	28 38       	cpi	r18, 0x88	; 136
    1c7e:	f9 f4       	brne	.+62     	; 0x1cbe <PHY_DataInd+0x50>
    1c80:	20 81       	ld	r18, Z
    1c82:	2f 7d       	andi	r18, 0xDF	; 223
    1c84:	21 34       	cpi	r18, 0x41	; 65
    1c86:	d9 f4       	brne	.+54     	; 0x1cbe <PHY_DataInd+0x50>
    1c88:	12 96       	adiw	r26, 0x02	; 2
    1c8a:	2c 91       	ld	r18, X
    1c8c:	20 31       	cpi	r18, 0x10	; 16
    1c8e:	b8 f0       	brcs	.+46     	; 0x1cbe <PHY_DataInd+0x50>
    1c90:	ec 01       	movw	r28, r24
    1c92:	8b dd       	rcall	.-1258   	; 0x17aa <nwkFrameAlloc>
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	99 f0       	breq	.+38     	; 0x1cbe <PHY_DataInd+0x50>
    1c98:	20 e2       	ldi	r18, 0x20	; 32
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	20 83       	st	Z, r18
    1c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca0:	21 83       	std	Z+1, r18	; 0x01
    1ca2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca4:	ed 57       	subi	r30, 0x7D	; 125
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	20 83       	st	Z, r18
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	31 96       	adiw	r30, 0x01	; 1
    1cae:	20 83       	st	Z, r18
    1cb0:	4a 81       	ldd	r20, Y+2	; 0x02
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	68 81       	ld	r22, Y
    1cb6:	79 81       	ldd	r23, Y+1	; 0x01
    1cb8:	02 96       	adiw	r24, 0x02	; 2
    1cba:	0e 94 94 1b 	call	0x3728	; 0x3728 <memcpy>
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1cc4:	2f 92       	push	r2
    1cc6:	3f 92       	push	r3
    1cc8:	4f 92       	push	r4
    1cca:	5f 92       	push	r5
    1ccc:	6f 92       	push	r6
    1cce:	7f 92       	push	r7
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	cf 92       	push	r12
    1cda:	df 92       	push	r13
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	2c 97       	sbiw	r28, 0x0c	; 12
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1cf8:	00 e0       	ldi	r16, 0x00	; 0
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1cfc:	0f 2e       	mov	r0, r31
    1cfe:	f4 e2       	ldi	r31, 0x24	; 36
    1d00:	bf 2e       	mov	r11, r31
    1d02:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1d04:	0f 2e       	mov	r0, r31
    1d06:	f6 e3       	ldi	r31, 0x36	; 54
    1d08:	ef 2e       	mov	r14, r31
    1d0a:	fb e0       	ldi	r31, 0x0B	; 11
    1d0c:	ff 2e       	mov	r15, r31
    1d0e:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1d10:	55 24       	eor	r5, r5
    1d12:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1d14:	68 94       	set
    1d16:	aa 24       	eor	r10, r10
    1d18:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1d1a:	68 94       	set
    1d1c:	77 24       	eor	r7, r7
    1d1e:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1d20:	68 94       	set
    1d22:	66 24       	eor	r6, r6
    1d24:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1d26:	31 2c       	mov	r3, r1
    1d28:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1d2a:	0f 2e       	mov	r0, r31
    1d2c:	ff e1       	ldi	r31, 0x1F	; 31
    1d2e:	4f 2e       	mov	r4, r31
    1d30:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1d32:	cc 24       	eor	r12, r12
    1d34:	c3 94       	inc	r12
    1d36:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1d38:	da c1       	rjmp	.+948    	; 0x20ee <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	8c 91       	ld	r24, X
    1d3e:	82 32       	cpi	r24, 0x22	; 34
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <nwkRxTaskHandler+0x80>
    1d42:	05 c1       	rjmp	.+522    	; 0x1f4e <nwkRxTaskHandler+0x28a>
    1d44:	18 f4       	brcc	.+6      	; 0x1d4c <nwkRxTaskHandler+0x88>
    1d46:	80 32       	cpi	r24, 0x20	; 32
    1d48:	41 f0       	breq	.+16     	; 0x1d5a <nwkRxTaskHandler+0x96>
    1d4a:	d1 c1       	rjmp	.+930    	; 0x20ee <nwkRxTaskHandler+0x42a>
    1d4c:	83 32       	cpi	r24, 0x23	; 35
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <nwkRxTaskHandler+0x8e>
    1d50:	c9 c1       	rjmp	.+914    	; 0x20e4 <nwkRxTaskHandler+0x420>
    1d52:	84 32       	cpi	r24, 0x24	; 36
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <nwkRxTaskHandler+0x94>
    1d56:	c9 c1       	rjmp	.+914    	; 0x20ea <nwkRxTaskHandler+0x426>
    1d58:	ca c1       	rjmp	.+916    	; 0x20ee <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    1d5e:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1d60:	98 2f       	mov	r25, r24
    1d62:	9a 70       	andi	r25, 0x0A	; 10
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <nwkRxTaskHandler+0xa4>
    1d66:	c3 c1       	rjmp	.+902    	; 0x20ee <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1d68:	25 81       	ldd	r18, Z+5	; 0x05
    1d6a:	36 81       	ldd	r19, Z+6	; 0x06
    1d6c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	91 f4       	brne	.+36     	; 0x1d96 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1d72:	d8 01       	movw	r26, r16
    1d74:	1f 96       	adiw	r26, 0x0f	; 15
    1d76:	8d 91       	ld	r24, X+
    1d78:	9c 91       	ld	r25, X
    1d7a:	50 97       	sbiw	r26, 0x10	; 16
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	20 81       	ld	r18, Z
    1d80:	31 81       	ldd	r19, Z+1	; 0x01
    1d82:	28 17       	cp	r18, r24
    1d84:	39 07       	cpc	r19, r25
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <nwkRxTaskHandler+0xca>
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <nwkRxTaskHandler+0xca>
    1d8c:	b0 c1       	rjmp	.+864    	; 0x20ee <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1d8e:	e2 e2       	ldi	r30, 0x22	; 34
    1d90:	d8 01       	movw	r26, r16
    1d92:	ec 93       	st	X, r30
    1d94:	ac c1       	rjmp	.+856    	; 0x20ee <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1d96:	d8 01       	movw	r26, r16
    1d98:	1f 96       	adiw	r26, 0x0f	; 15
    1d9a:	2d 91       	ld	r18, X+
    1d9c:	3c 91       	ld	r19, X
    1d9e:	50 97       	sbiw	r26, 0x10	; 16
    1da0:	2f 3f       	cpi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	11 f4       	brne	.+4      	; 0x1daa <nwkRxTaskHandler+0xe6>
    1da6:	80 fd       	sbrc	r24, 0
    1da8:	a2 c1       	rjmp	.+836    	; 0x20ee <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1daa:	f7 01       	movw	r30, r14
    1dac:	20 81       	ld	r18, Z
    1dae:	31 81       	ldd	r19, Z+1	; 0x01
    1db0:	d8 01       	movw	r26, r16
    1db2:	1d 96       	adiw	r26, 0x0d	; 13
    1db4:	8d 91       	ld	r24, X+
    1db6:	9c 91       	ld	r25, X
    1db8:	1e 97       	sbiw	r26, 0x0e	; 14
    1dba:	28 17       	cp	r18, r24
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <nwkRxTaskHandler+0xfe>
    1dc0:	96 c1       	rjmp	.+812    	; 0x20ee <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	f9 dd       	rcall	.-1038   	; 0x19b8 <nwkRouteFrameReceived>
    1dc6:	e3 e6       	ldi	r30, 0x63	; 99
    1dc8:	fa e0       	ldi	r31, 0x0A	; 10
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1dce:	83 2c       	mov	r8, r3
    1dd0:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1dd2:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1dd4:	44 81       	ldd	r20, Z+4	; 0x04
    1dd6:	44 23       	and	r20, r20
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <nwkRxTaskHandler+0x118>
    1dda:	74 c0       	rjmp	.+232    	; 0x1ec4 <nwkRxTaskHandler+0x200>
    1ddc:	d8 01       	movw	r26, r16
    1dde:	1d 96       	adiw	r26, 0x0d	; 13
    1de0:	6d 91       	ld	r22, X+
    1de2:	7c 91       	ld	r23, X
    1de4:	1e 97       	sbiw	r26, 0x0e	; 14
    1de6:	40 81       	ld	r20, Z
    1de8:	51 81       	ldd	r21, Z+1	; 0x01
    1dea:	64 17       	cp	r22, r20
    1dec:	75 07       	cpc	r23, r21
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <nwkRxTaskHandler+0x12e>
    1df0:	6a c0       	rjmp	.+212    	; 0x1ec6 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1df2:	1c 96       	adiw	r26, 0x0c	; 12
    1df4:	8c 91       	ld	r24, X
    1df6:	1c 97       	sbiw	r26, 0x0c	; 12
    1df8:	f9 01       	movw	r30, r18
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	ee 0f       	add	r30, r30
    1e00:	ff 1f       	adc	r31, r31
    1e02:	e2 0f       	add	r30, r18
    1e04:	f3 1f       	adc	r31, r19
    1e06:	ed 59       	subi	r30, 0x9D	; 157
    1e08:	f5 4f       	sbci	r31, 0xF5	; 245
    1e0a:	92 81       	ldd	r25, Z+2	; 0x02
    1e0c:	98 1b       	sub	r25, r24

      if (diff < 8)
    1e0e:	98 30       	cpi	r25, 0x08	; 8
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <nwkRxTaskHandler+0x150>
    1e12:	3e c0       	rjmp	.+124    	; 0x1e90 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
    1e14:	f9 01       	movw	r30, r18
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	ed 59       	subi	r30, 0x9D	; 157
    1e24:	f5 4f       	sbci	r31, 0xF5	; 245
    1e26:	83 81       	ldd	r24, Z+3	; 0x03
    1e28:	48 2f       	mov	r20, r24
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	09 2e       	mov	r0, r25
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <nwkRxTaskHandler+0x170>
    1e30:	55 95       	asr	r21
    1e32:	47 95       	ror	r20
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <nwkRxTaskHandler+0x16c>
    1e38:	40 ff       	sbrs	r20, 0
    1e3a:	17 c0       	rjmp	.+46     	; 0x1e6a <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1e3c:	f7 01       	movw	r30, r14
    1e3e:	20 81       	ld	r18, Z
    1e40:	31 81       	ldd	r19, Z+1	; 0x01
    1e42:	17 96       	adiw	r26, 0x07	; 7
    1e44:	8d 91       	ld	r24, X+
    1e46:	9c 91       	ld	r25, X
    1e48:	18 97       	sbiw	r26, 0x08	; 8
    1e4a:	28 17       	cp	r18, r24
    1e4c:	39 07       	cpc	r19, r25
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <nwkRxTaskHandler+0x18e>
    1e50:	4e c1       	rjmp	.+668    	; 0x20ee <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1e52:	1b 96       	adiw	r26, 0x0b	; 11
    1e54:	6c 91       	ld	r22, X
    1e56:	1b 97       	sbiw	r26, 0x0b	; 11
    1e58:	63 fb       	bst	r22, 3
    1e5a:	66 27       	eor	r22, r22
    1e5c:	60 f9       	bld	r22, 0
    1e5e:	1f 96       	adiw	r26, 0x0f	; 15
    1e60:	8d 91       	ld	r24, X+
    1e62:	9c 91       	ld	r25, X
    1e64:	50 97       	sbiw	r26, 0x10	; 16
    1e66:	a3 dd       	rcall	.-1210   	; 0x19ae <nwkRouteRemove>
    1e68:	42 c1       	rjmp	.+644    	; 0x20ee <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	ee 0f       	add	r30, r30
    1e72:	ff 1f       	adc	r31, r31
    1e74:	2e 0f       	add	r18, r30
    1e76:	3f 1f       	adc	r19, r31
    1e78:	f9 01       	movw	r30, r18
    1e7a:	ed 59       	subi	r30, 0x9D	; 157
    1e7c:	f5 4f       	sbci	r31, 0xF5	; 245
    1e7e:	96 01       	movw	r18, r12
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <nwkRxTaskHandler+0x1c2>
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	9a 95       	dec	r25
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <nwkRxTaskHandler+0x1be>
    1e8a:	82 2b       	or	r24, r18
    1e8c:	83 83       	std	Z+3, r24	; 0x03
    1e8e:	36 c1       	rjmp	.+620    	; 0x20fc <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1e90:	f9 01       	movw	r30, r18
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	2e 0f       	add	r18, r30
    1e9c:	3f 1f       	adc	r19, r31
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	ed 59       	subi	r30, 0x9D	; 157
    1ea2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ea4:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	91 95       	neg	r25
    1eae:	a9 01       	movw	r20, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <nwkRxTaskHandler+0x1f2>
    1eb2:	44 0f       	add	r20, r20
    1eb4:	55 1f       	adc	r21, r21
    1eb6:	9a 95       	dec	r25
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <nwkRxTaskHandler+0x1ee>
    1eba:	ca 01       	movw	r24, r20
    1ebc:	81 60       	ori	r24, 0x01	; 1
    1ebe:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1ec0:	44 82       	std	Z+4, r4	; 0x04
    1ec2:	1c c1       	rjmp	.+568    	; 0x20fc <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1ec4:	4f 01       	movw	r8, r30
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1eca:	8a 30       	cpi	r24, 0x0A	; 10
    1ecc:	91 05       	cpc	r25, r1
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <nwkRxTaskHandler+0x20e>
    1ed0:	80 cf       	rjmp	.-256    	; 0x1dd2 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1ed2:	81 14       	cp	r8, r1
    1ed4:	91 04       	cpc	r9, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <nwkRxTaskHandler+0x216>
    1ed8:	0a c1       	rjmp	.+532    	; 0x20ee <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1eda:	d8 01       	movw	r26, r16
    1edc:	1d 96       	adiw	r26, 0x0d	; 13
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9c 91       	ld	r25, X
    1ee2:	1e 97       	sbiw	r26, 0x0e	; 14
    1ee4:	f4 01       	movw	r30, r8
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1eea:	1c 96       	adiw	r26, 0x0c	; 12
    1eec:	8c 91       	ld	r24, X
    1eee:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1ef0:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1ef2:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1ef4:	85 e5       	ldi	r24, 0x55	; 85
    1ef6:	9a e0       	ldi	r25, 0x0A	; 10
    1ef8:	ac d4       	rcall	.+2392   	; 0x2852 <SYS_TimerStart>
    1efa:	00 c1       	rjmp	.+512    	; 0x20fc <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1efc:	d7 01       	movw	r26, r14
    1efe:	2d 91       	ld	r18, X+
    1f00:	3c 91       	ld	r19, X
    1f02:	f8 01       	movw	r30, r16
    1f04:	87 85       	ldd	r24, Z+15	; 0x0f
    1f06:	90 89       	ldd	r25, Z+16	; 0x10
    1f08:	28 17       	cp	r18, r24
    1f0a:	39 07       	cpc	r19, r25
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <nwkRxTaskHandler+0x26a>
    1f0e:	43 85       	ldd	r20, Z+11	; 0x0b
    1f10:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1f12:	0b c0       	rjmp	.+22     	; 0x1f2a <nwkRxTaskHandler+0x266>
    1f14:	c8 01       	movw	r24, r16
    1f16:	e2 d1       	rcall	.+964    	; 0x22dc <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1f18:	d7 01       	movw	r26, r14
    1f1a:	2d 91       	ld	r18, X+
    1f1c:	3c 91       	ld	r19, X
    1f1e:	f8 01       	movw	r30, r16
    1f20:	87 85       	ldd	r24, Z+15	; 0x0f
    1f22:	90 89       	ldd	r25, Z+16	; 0x10
    1f24:	28 17       	cp	r18, r24
    1f26:	39 07       	cpc	r19, r25
    1f28:	11 f0       	breq	.+4      	; 0x1f2e <nwkRxTaskHandler+0x26a>
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1f2e:	e2 e2       	ldi	r30, 0x22	; 34
    1f30:	d8 01       	movw	r26, r16
    1f32:	ec 93       	st	X, r30
    1f34:	dc c0       	rjmp	.+440    	; 0x20ee <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1f36:	d8 01       	movw	r26, r16
    1f38:	17 96       	adiw	r26, 0x07	; 7
    1f3a:	8d 91       	ld	r24, X+
    1f3c:	9c 91       	ld	r25, X
    1f3e:	18 97       	sbiw	r26, 0x08	; 8
    1f40:	82 17       	cp	r24, r18
    1f42:	93 07       	cpc	r25, r19
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <nwkRxTaskHandler+0x284>
    1f46:	d3 c0       	rjmp	.+422    	; 0x20ee <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1f48:	e3 e2       	ldi	r30, 0x23	; 35
    1f4a:	ec 93       	st	X, r30
    1f4c:	d0 c0       	rjmp	.+416    	; 0x20ee <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1f4e:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1f52:	d8 01       	movw	r26, r16
    1f54:	51 96       	adiw	r26, 0x11	; 17
    1f56:	8c 91       	ld	r24, X
    1f58:	51 97       	sbiw	r26, 0x11	; 17
    1f5a:	82 95       	swap	r24
    1f5c:	8f 70       	andi	r24, 0x0F	; 15
    1f5e:	e8 2f       	mov	r30, r24
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	e4 5c       	subi	r30, 0xC4	; 196
    1f68:	f4 4f       	sbci	r31, 0xF4	; 244
    1f6a:	01 90       	ld	r0, Z+
    1f6c:	f0 81       	ld	r31, Z
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <nwkRxTaskHandler+0x2b2>
    1f74:	60 c0       	rjmp	.+192    	; 0x2036 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1f76:	1d 96       	adiw	r26, 0x0d	; 13
    1f78:	2d 91       	ld	r18, X+
    1f7a:	3c 91       	ld	r19, X
    1f7c:	1e 97       	sbiw	r26, 0x0e	; 14
    1f7e:	3a 83       	std	Y+2, r19	; 0x02
    1f80:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1f82:	1f 96       	adiw	r26, 0x0f	; 15
    1f84:	4d 91       	ld	r20, X+
    1f86:	5c 91       	ld	r21, X
    1f88:	50 97       	sbiw	r26, 0x10	; 16
    1f8a:	5c 83       	std	Y+4, r21	; 0x04
    1f8c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1f8e:	51 96       	adiw	r26, 0x11	; 17
    1f90:	9c 91       	ld	r25, X
    1f92:	51 97       	sbiw	r26, 0x11	; 17
    1f94:	9f 70       	andi	r25, 0x0F	; 15
    1f96:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1f98:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    1f9a:	af 57       	subi	r26, 0x7F	; 127
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	8d 91       	ld	r24, X+
    1fa0:	9c 91       	ld	r25, X
    1fa2:	99 87       	std	Y+9, r25	; 0x09
    1fa4:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1fa6:	b8 01       	movw	r22, r16
    1fa8:	6e 5f       	subi	r22, 0xFE	; 254
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1fac:	86 1b       	sub	r24, r22
    1fae:	97 0b       	sbc	r25, r23
    1fb0:	d8 01       	movw	r26, r16
    1fb2:	11 96       	adiw	r26, 0x01	; 1
    1fb4:	9c 91       	ld	r25, X
    1fb6:	11 97       	sbiw	r26, 0x01	; 1
    1fb8:	98 1b       	sub	r25, r24
    1fba:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1fbc:	ad 57       	subi	r26, 0x7D	; 125
    1fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc0:	8c 91       	ld	r24, X
    1fc2:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	8c 91       	ld	r24, X
    1fc8:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1fca:	d8 01       	movw	r26, r16
    1fcc:	1b 96       	adiw	r26, 0x0b	; 11
    1fce:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1fd0:	69 2f       	mov	r22, r25
    1fd2:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1fd4:	92 fd       	sbrc	r25, 2
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <nwkRxTaskHandler+0x318>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <nwkRxTaskHandler+0x31a>
    1fdc:	80 e2       	ldi	r24, 0x20	; 32
    1fde:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1fe0:	93 fd       	sbrc	r25, 3
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <nwkRxTaskHandler+0x324>
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <nwkRxTaskHandler+0x326>
    1fe8:	90 e4       	ldi	r25, 0x40	; 64
    1fea:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1fec:	4f 3f       	cpi	r20, 0xFF	; 255
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff0:	11 f0       	breq	.+4      	; 0x1ff6 <nwkRxTaskHandler+0x332>
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <nwkRxTaskHandler+0x334>
    1ff6:	96 2d       	mov	r25, r6
    1ff8:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1ffa:	d8 01       	movw	r26, r16
    1ffc:	19 96       	adiw	r26, 0x09	; 9
    1ffe:	4d 91       	ld	r20, X+
    2000:	5c 91       	ld	r21, X
    2002:	1a 97       	sbiw	r26, 0x0a	; 10
    2004:	24 17       	cp	r18, r20
    2006:	35 07       	cpc	r19, r21
    2008:	11 f0       	breq	.+4      	; 0x200e <nwkRxTaskHandler+0x34a>
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <nwkRxTaskHandler+0x34c>
    200e:	97 2d       	mov	r25, r7
    2010:	89 2b       	or	r24, r25
    2012:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2014:	d8 01       	movw	r26, r16
    2016:	15 96       	adiw	r26, 0x05	; 5
    2018:	2d 91       	ld	r18, X+
    201a:	3c 91       	ld	r19, X
    201c:	16 97       	sbiw	r26, 0x06	; 6
    201e:	2f 3f       	cpi	r18, 0xFF	; 255
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    2022:	11 f0       	breq	.+4      	; 0x2028 <nwkRxTaskHandler+0x364>
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	01 c0       	rjmp	.+2      	; 0x202a <nwkRxTaskHandler+0x366>
    2028:	9a 2d       	mov	r25, r10
    202a:	89 2b       	or	r24, r25
    202c:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    202e:	ce 01       	movw	r24, r28
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	09 95       	icall
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    2036:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    2038:	f8 01       	movw	r30, r16
    203a:	93 85       	ldd	r25, Z+11	; 0x0b
    203c:	90 ff       	sbrs	r25, 0
    ack = false;
    203e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2040:	d8 01       	movw	r26, r16
    2042:	17 96       	adiw	r26, 0x07	; 7
    2044:	2d 91       	ld	r18, X+
    2046:	3c 91       	ld	r19, X
    2048:	18 97       	sbiw	r26, 0x08	; 8
    204a:	2f 3f       	cpi	r18, 0xFF	; 255
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	69 f4       	brne	.+26     	; 0x206a <nwkRxTaskHandler+0x3a6>
    2050:	f7 01       	movw	r30, r14
    2052:	40 81       	ld	r20, Z
    2054:	51 81       	ldd	r21, Z+1	; 0x01
    2056:	d8 01       	movw	r26, r16
    2058:	1f 96       	adiw	r26, 0x0f	; 15
    205a:	2d 91       	ld	r18, X+
    205c:	3c 91       	ld	r19, X
    205e:	50 97       	sbiw	r26, 0x10	; 16
    2060:	42 17       	cp	r20, r18
    2062:	53 07       	cpc	r21, r19
    2064:	11 f4       	brne	.+4      	; 0x206a <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    2066:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    2068:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    206a:	f8 01       	movw	r30, r16
    206c:	25 81       	ldd	r18, Z+5	; 0x05
    206e:	36 81       	ldd	r19, Z+6	; 0x06
    2070:	2f 3f       	cpi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	a1 f1       	breq	.+104    	; 0x20de <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    2076:	d7 01       	movw	r26, r14
    2078:	2d 91       	ld	r18, X+
    207a:	3c 91       	ld	r19, X
    207c:	2f 3f       	cpi	r18, 0xFF	; 255
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    2080:	71 f1       	breq	.+92     	; 0x20de <nwkRxTaskHandler+0x41a>
    2082:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    2084:	61 f1       	breq	.+88     	; 0x20de <nwkRxTaskHandler+0x41a>
    2086:	91 db       	rcall	.-2270   	; 0x17aa <nwkFrameAlloc>
    2088:	4c 01       	movw	r8, r24
    208a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    208c:	41 f1       	breq	.+80     	; 0x20de <nwkRxTaskHandler+0x41a>
    208e:	f3 db       	rcall	.-2074   	; 0x1876 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    2090:	f4 01       	movw	r30, r8
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	8d 5f       	subi	r24, 0xFD	; 253
    2096:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    2098:	e9 57       	subi	r30, 0x79	; 121
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	11 82       	std	Z+1, r1	; 0x01
    209e:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    20a0:	d8 01       	movw	r26, r16
    20a2:	1b 96       	adiw	r26, 0x0b	; 11
    20a4:	8c 91       	ld	r24, X
    20a6:	1b 97       	sbiw	r26, 0x0b	; 11
    20a8:	86 95       	lsr	r24
    20aa:	81 70       	andi	r24, 0x01	; 1
    20ac:	f4 01       	movw	r30, r8
    20ae:	93 85       	ldd	r25, Z+11	; 0x0b
    20b0:	80 fb       	bst	r24, 0
    20b2:	91 f9       	bld	r25, 1
    20b4:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    20b6:	1d 96       	adiw	r26, 0x0d	; 13
    20b8:	8d 91       	ld	r24, X+
    20ba:	9c 91       	ld	r25, X
    20bc:	1e 97       	sbiw	r26, 0x0e	; 14
    20be:	90 8b       	std	Z+16, r25	; 0x10
    20c0:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    20c2:	ef 57       	subi	r30, 0x7F	; 127
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	01 90       	ld	r0, Z+
    20c8:	f0 81       	ld	r31, Z
    20ca:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    20cc:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    20ce:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    20d2:	82 83       	std	Z+2, r24	; 0x02
    20d4:	1c 96       	adiw	r26, 0x0c	; 12
    20d6:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    20d8:	81 83       	std	Z+1, r24	; 0x01
    20da:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    20dc:	b0 d0       	rcall	.+352    	; 0x223e <nwkTxFrame>
    20de:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    20e0:	bc 92       	st	X, r11
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <nwkRxTaskHandler+0x42a>
    20e4:	c8 01       	movw	r24, r16
      } break;
    20e6:	1d dd       	rcall	.-1478   	; 0x1b22 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <nwkRxTaskHandler+0x42a>
    20ea:	c8 01       	movw	r24, r16
    20ec:	95 db       	rcall	.-2262   	; 0x1818 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    20ee:	c8 01       	movw	r24, r16
    20f0:	9d db       	rcall	.-2246   	; 0x182c <nwkFrameNext>
    20f2:	8c 01       	movw	r16, r24
    20f4:	89 2b       	or	r24, r25
    20f6:	09 f0       	breq	.+2      	; 0x20fa <nwkRxTaskHandler+0x436>
    20f8:	20 ce       	rjmp	.-960    	; 0x1d3a <nwkRxTaskHandler+0x76>
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <nwkRxTaskHandler+0x446>
    20fc:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    20fe:	87 81       	ldd	r24, Z+7	; 0x07
    2100:	90 85       	ldd	r25, Z+8	; 0x08
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	09 f0       	breq	.+2      	; 0x2108 <nwkRxTaskHandler+0x444>
    2106:	08 cf       	rjmp	.-496    	; 0x1f18 <nwkRxTaskHandler+0x254>
    2108:	f9 ce       	rjmp	.-526    	; 0x1efc <nwkRxTaskHandler+0x238>
    210a:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	7f 90       	pop	r7
    2130:	6f 90       	pop	r6
    2132:	5f 90       	pop	r5
    2134:	4f 90       	pop	r4
    2136:	3f 90       	pop	r3
    2138:	2f 90       	pop	r2
    213a:	08 95       	ret

0000213c <nwkTxDelayTimerHandler>:
    213c:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	7c 01       	movw	r14, r24
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	01 e0       	ldi	r16, 0x01	; 1
    2150:	c3 e1       	ldi	r28, 0x13	; 19
    2152:	13 c0       	rjmp	.+38     	; 0x217a <nwkTxDelayTimerHandler+0x3e>
    2154:	fc 01       	movw	r30, r24
    2156:	20 81       	ld	r18, Z
    2158:	21 31       	cpi	r18, 0x11	; 17
    215a:	79 f4       	brne	.+30     	; 0x217a <nwkTxDelayTimerHandler+0x3e>
    215c:	ec 57       	subi	r30, 0x7C	; 124
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	20 81       	ld	r18, Z
    2162:	31 81       	ldd	r19, Z+1	; 0x01
    2164:	21 50       	subi	r18, 0x01	; 1
    2166:	31 09       	sbc	r19, r1
    2168:	31 83       	std	Z+1, r19	; 0x01
    216a:	20 83       	st	Z, r18
    216c:	23 2b       	or	r18, r19
    216e:	21 f4       	brne	.+8      	; 0x2178 <nwkTxDelayTimerHandler+0x3c>
    2170:	fc 01       	movw	r30, r24
    2172:	c0 83       	st	Z, r28
    2174:	10 2f       	mov	r17, r16
    2176:	01 c0       	rjmp	.+2      	; 0x217a <nwkTxDelayTimerHandler+0x3e>
    2178:	10 2f       	mov	r17, r16
    217a:	58 db       	rcall	.-2384   	; 0x182c <nwkFrameNext>
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	51 f7       	brne	.-44     	; 0x2154 <nwkTxDelayTimerHandler+0x18>
    2180:	11 23       	and	r17, r17
    2182:	11 f0       	breq	.+4      	; 0x2188 <nwkTxDelayTimerHandler+0x4c>
    2184:	c7 01       	movw	r24, r14
    2186:	65 d3       	rcall	.+1738   	; 0x2852 <SYS_TimerStart>
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	08 95       	ret

00002194 <nwkTxAckWaitTimerHandler>:
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	7c 01       	movw	r14, r24
    21a2:	10 e0       	ldi	r17, 0x00	; 0
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	01 e0       	ldi	r16, 0x01	; 1
    21aa:	d7 e1       	ldi	r29, 0x17	; 23
    21ac:	c0 e1       	ldi	r28, 0x10	; 16
    21ae:	16 c0       	rjmp	.+44     	; 0x21dc <nwkTxAckWaitTimerHandler+0x48>
    21b0:	fc 01       	movw	r30, r24
    21b2:	20 81       	ld	r18, Z
    21b4:	26 31       	cpi	r18, 0x16	; 22
    21b6:	91 f4       	brne	.+36     	; 0x21dc <nwkTxAckWaitTimerHandler+0x48>
    21b8:	ec 57       	subi	r30, 0x7C	; 124
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	20 81       	ld	r18, Z
    21be:	31 81       	ldd	r19, Z+1	; 0x01
    21c0:	21 50       	subi	r18, 0x01	; 1
    21c2:	31 09       	sbc	r19, r1
    21c4:	31 83       	std	Z+1, r19	; 0x01
    21c6:	20 83       	st	Z, r18
    21c8:	23 2b       	or	r18, r19
    21ca:	39 f4       	brne	.+14     	; 0x21da <nwkTxAckWaitTimerHandler+0x46>
    21cc:	fc 01       	movw	r30, r24
    21ce:	d0 83       	st	Z, r29
    21d0:	ed 57       	subi	r30, 0x7D	; 125
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	c0 83       	st	Z, r28
    21d6:	10 2f       	mov	r17, r16
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <nwkTxAckWaitTimerHandler+0x48>
    21da:	10 2f       	mov	r17, r16
    21dc:	27 db       	rcall	.-2482   	; 0x182c <nwkFrameNext>
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	39 f7       	brne	.-50     	; 0x21b0 <nwkTxAckWaitTimerHandler+0x1c>
    21e2:	11 23       	and	r17, r17
    21e4:	11 f0       	breq	.+4      	; 0x21ea <nwkTxAckWaitTimerHandler+0x56>
    21e6:	c7 01       	movw	r24, r14
    21e8:	34 d3       	rcall	.+1640   	; 0x2852 <SYS_TimerStart>
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	08 95       	ret

000021f8 <nwkTxInit>:
    21f8:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <nwkTxPhyActiveFrame+0x1>
    21fc:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <nwkTxPhyActiveFrame>
    2200:	e2 ea       	ldi	r30, 0xA2	; 162
    2202:	fa e0       	ldi	r31, 0x0A	; 10
    2204:	82 e3       	ldi	r24, 0x32	; 50
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e0       	ldi	r26, 0x00	; 0
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	86 83       	std	Z+6, r24	; 0x06
    220e:	97 83       	std	Z+7, r25	; 0x07
    2210:	a0 87       	std	Z+8, r26	; 0x08
    2212:	b1 87       	std	Z+9, r27	; 0x09
    2214:	12 86       	std	Z+10, r1	; 0x0a
    2216:	8a ec       	ldi	r24, 0xCA	; 202
    2218:	90 e1       	ldi	r25, 0x10	; 16
    221a:	94 87       	std	Z+12, r25	; 0x0c
    221c:	83 87       	std	Z+11, r24	; 0x0b
    221e:	e5 e9       	ldi	r30, 0x95	; 149
    2220:	fa e0       	ldi	r31, 0x0A	; 10
    2222:	8a e0       	ldi	r24, 0x0A	; 10
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e0       	ldi	r26, 0x00	; 0
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	86 83       	std	Z+6, r24	; 0x06
    222c:	97 83       	std	Z+7, r25	; 0x07
    222e:	a0 87       	std	Z+8, r26	; 0x08
    2230:	b1 87       	std	Z+9, r27	; 0x09
    2232:	12 86       	std	Z+10, r1	; 0x0a
    2234:	8e e9       	ldi	r24, 0x9E	; 158
    2236:	90 e1       	ldi	r25, 0x10	; 16
    2238:	94 87       	std	Z+12, r25	; 0x0c
    223a:	83 87       	std	Z+11, r24	; 0x0b
    223c:	08 95       	ret

0000223e <nwkTxFrame>:
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
    2244:	fc 01       	movw	r30, r24
    2246:	ea 57       	subi	r30, 0x7A	; 122
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	81 ff       	sbrs	r24, 1
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <nwkTxFrame+0x18>
    2250:	92 e1       	ldi	r25, 0x12	; 18
    2252:	98 83       	st	Y, r25
    2254:	02 c0       	rjmp	.+4      	; 0x225a <nwkTxFrame+0x1c>
    2256:	92 e1       	ldi	r25, 0x12	; 18
    2258:	98 83       	st	Y, r25
    225a:	fe 01       	movw	r30, r28
    225c:	ed 57       	subi	r30, 0x7D	; 125
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	10 82       	st	Z, r1
    2262:	80 ff       	sbrs	r24, 0
    2264:	05 c0       	rjmp	.+10     	; 0x2270 <nwkTxFrame+0x32>
    2266:	2f ef       	ldi	r18, 0xFF	; 255
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	3e 83       	std	Y+6, r19	; 0x06
    226c:	2d 83       	std	Y+5, r18	; 0x05
    226e:	06 c0       	rjmp	.+12     	; 0x227c <nwkTxFrame+0x3e>
    2270:	20 91 38 0b 	lds	r18, 0x0B38	; 0x800b38 <nwkIb+0x2>
    2274:	30 91 39 0b 	lds	r19, 0x0B39	; 0x800b39 <nwkIb+0x3>
    2278:	3e 83       	std	Y+6, r19	; 0x06
    227a:	2d 83       	std	Y+5, r18	; 0x05
    227c:	85 70       	andi	r24, 0x05	; 5
    227e:	19 f4       	brne	.+6      	; 0x2286 <nwkTxFrame+0x48>
    2280:	ce 01       	movw	r24, r28
    2282:	30 dc       	rcall	.-1952   	; 0x1ae4 <nwkRoutePrepareTx>
    2284:	04 c0       	rjmp	.+8      	; 0x228e <nwkTxFrame+0x50>
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 89       	ldd	r25, Y+16	; 0x10
    228a:	98 87       	std	Y+8, r25	; 0x08
    228c:	8f 83       	std	Y+7, r24	; 0x07
    228e:	e6 e3       	ldi	r30, 0x36	; 54
    2290:	fb e0       	ldi	r31, 0x0B	; 11
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	9a 87       	std	Y+10, r25	; 0x0a
    2298:	89 87       	std	Y+9, r24	; 0x09
    229a:	85 81       	ldd	r24, Z+5	; 0x05
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	85 83       	std	Z+5, r24	; 0x05
    22a0:	8c 83       	std	Y+4, r24	; 0x04
    22a2:	8f 81       	ldd	r24, Y+7	; 0x07
    22a4:	98 85       	ldd	r25, Y+8	; 0x08
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	71 f4       	brne	.+28     	; 0x22c6 <nwkTxFrame+0x88>
    22aa:	81 e4       	ldi	r24, 0x41	; 65
    22ac:	98 e8       	ldi	r25, 0x88	; 136
    22ae:	9b 83       	std	Y+3, r25	; 0x03
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <rand>
    22b6:	cc 57       	subi	r28, 0x7C	; 124
    22b8:	df 4f       	sbci	r29, 0xFF	; 255
    22ba:	87 70       	andi	r24, 0x07	; 7
    22bc:	99 27       	eor	r25, r25
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	99 83       	std	Y+1, r25	; 0x01
    22c2:	88 83       	st	Y, r24
    22c4:	08 c0       	rjmp	.+16     	; 0x22d6 <nwkTxFrame+0x98>
    22c6:	81 e6       	ldi	r24, 0x61	; 97
    22c8:	98 e8       	ldi	r25, 0x88	; 136
    22ca:	9b 83       	std	Y+3, r25	; 0x03
    22cc:	8a 83       	std	Y+2, r24	; 0x02
    22ce:	cc 57       	subi	r28, 0x7C	; 124
    22d0:	df 4f       	sbci	r29, 0xFF	; 255
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	18 82       	st	Y, r1
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <nwkTxBroadcastFrame>:
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	8c 01       	movw	r16, r24
    22e6:	61 da       	rcall	.-2878   	; 0x17aa <nwkFrameAlloc>
    22e8:	ec 01       	movw	r28, r24
    22ea:	89 2b       	or	r24, r25
    22ec:	b9 f1       	breq	.+110    	; 0x235c <nwkTxBroadcastFrame+0x80>
    22ee:	82 e1       	ldi	r24, 0x12	; 18
    22f0:	88 83       	st	Y, r24
    22f2:	f8 01       	movw	r30, r16
    22f4:	81 81       	ldd	r24, Z+1	; 0x01
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	fe 01       	movw	r30, r28
    22fa:	ed 57       	subi	r30, 0x7D	; 125
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	10 82       	st	Z, r1
    2300:	0e 94 a3 1a 	call	0x3546	; 0x3546 <rand>
    2304:	fe 01       	movw	r30, r28
    2306:	ec 57       	subi	r30, 0x7C	; 124
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	87 70       	andi	r24, 0x07	; 7
    230c:	99 27       	eor	r25, r25
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
    2314:	33 96       	adiw	r30, 0x03	; 3
    2316:	11 82       	std	Z+1, r1	; 0x01
    2318:	10 82       	st	Z, r1
    231a:	f8 01       	movw	r30, r16
    231c:	41 81       	ldd	r20, Z+1	; 0x01
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	b8 01       	movw	r22, r16
    2322:	6e 5f       	subi	r22, 0xFE	; 254
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	ce 01       	movw	r24, r28
    2328:	02 96       	adiw	r24, 0x02	; 2
    232a:	0e 94 94 1b 	call	0x3728	; 0x3728 <memcpy>
    232e:	81 e4       	ldi	r24, 0x41	; 65
    2330:	98 e8       	ldi	r25, 0x88	; 136
    2332:	9b 83       	std	Y+3, r25	; 0x03
    2334:	8a 83       	std	Y+2, r24	; 0x02
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	9f ef       	ldi	r25, 0xFF	; 255
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	8f 83       	std	Y+7, r24	; 0x07
    233e:	f8 01       	movw	r30, r16
    2340:	85 81       	ldd	r24, Z+5	; 0x05
    2342:	96 81       	ldd	r25, Z+6	; 0x06
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	e6 e3       	ldi	r30, 0x36	; 54
    234a:	fb e0       	ldi	r31, 0x0B	; 11
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	9a 87       	std	Y+10, r25	; 0x0a
    2352:	89 87       	std	Y+9, r24	; 0x09
    2354:	85 81       	ldd	r24, Z+5	; 0x05
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	85 83       	std	Z+5, r24	; 0x05
    235a:	8c 83       	std	Y+4, r24	; 0x04
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <nwkTxAckReceived>:
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	fc 01       	movw	r30, r24
    236c:	21 85       	ldd	r18, Z+9	; 0x09
    236e:	23 30       	cpi	r18, 0x03	; 3
    2370:	d9 f4       	brne	.+54     	; 0x23a8 <nwkTxAckReceived+0x42>
    2372:	10 c0       	rjmp	.+32     	; 0x2394 <nwkTxAckReceived+0x2e>
    2374:	fc 01       	movw	r30, r24
    2376:	20 81       	ld	r18, Z
    2378:	26 31       	cpi	r18, 0x16	; 22
    237a:	89 f4       	brne	.+34     	; 0x239e <nwkTxAckReceived+0x38>
    237c:	34 85       	ldd	r19, Z+12	; 0x0c
    237e:	29 81       	ldd	r18, Y+1	; 0x01
    2380:	32 13       	cpse	r19, r18
    2382:	0d c0       	rjmp	.+26     	; 0x239e <nwkTxAckReceived+0x38>
    2384:	27 e1       	ldi	r18, 0x17	; 23
    2386:	20 83       	st	Z, r18
    2388:	2a 81       	ldd	r18, Y+2	; 0x02
    238a:	ea 57       	subi	r30, 0x7A	; 122
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	20 83       	st	Z, r18
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <nwkTxAckReceived+0x44>
    2394:	fc 01       	movw	r30, r24
    2396:	c7 81       	ldd	r28, Z+7	; 0x07
    2398:	d0 85       	ldd	r29, Z+8	; 0x08
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	46 da       	rcall	.-2932   	; 0x182c <nwkFrameNext>
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	41 f7       	brne	.-48     	; 0x2374 <nwkTxAckReceived+0xe>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <nwkTxAckReceived+0x44>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    23b0:	e0 91 af 0a 	lds	r30, 0x0AAF	; 0x800aaf <nwkTxPhyActiveFrame>
    23b4:	f0 91 b0 0a 	lds	r31, 0x0AB0	; 0x800ab0 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <PHY_DataConf+0x14>
    23bc:	48 f0       	brcs	.+18     	; 0x23d0 <PHY_DataConf+0x20>
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <PHY_DataConf+0x18>
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    23c4:	80 e2       	ldi	r24, 0x20	; 32
    23c6:	05 c0       	rjmp	.+10     	; 0x23d2 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    23c8:	81 e2       	ldi	r24, 0x21	; 33
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    23d0:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    23d2:	df 01       	movw	r26, r30
    23d4:	ad 57       	subi	r26, 0x7D	; 125
    23d6:	bf 4f       	sbci	r27, 0xFF	; 255
    23d8:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    23da:	85 e1       	ldi	r24, 0x15	; 21
    23dc:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    23de:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <nwkTxPhyActiveFrame+0x1>
    23e2:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    23e6:	e6 e3       	ldi	r30, 0x36	; 54
    23e8:	fb e0       	ldi	r31, 0x0B	; 11
    23ea:	86 a1       	ldd	r24, Z+38	; 0x26
    23ec:	97 a1       	ldd	r25, Z+39	; 0x27
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	97 a3       	std	Z+39, r25	; 0x27
    23f2:	86 a3       	std	Z+38, r24	; 0x26
    23f4:	08 95       	ret

000023f6 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    23f6:	9f 92       	push	r9
    23f8:	af 92       	push	r10
    23fa:	bf 92       	push	r11
    23fc:	cf 92       	push	r12
    23fe:	df 92       	push	r13
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    240c:	c0 e0       	ldi	r28, 0x00	; 0
    240e:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2410:	0f 2e       	mov	r0, r31
    2412:	f4 e1       	ldi	r31, 0x14	; 20
    2414:	af 2e       	mov	r10, r31
    2416:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    2418:	06 e3       	ldi	r16, 0x36	; 54
    241a:	1b e0       	ldi	r17, 0x0B	; 11
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    241c:	0f 2e       	mov	r0, r31
    241e:	f7 e1       	ldi	r31, 0x17	; 23
    2420:	df 2e       	mov	r13, r31
    2422:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    2424:	0f 2e       	mov	r0, r31
    2426:	f6 e1       	ldi	r31, 0x16	; 22
    2428:	9f 2e       	mov	r9, r31
    242a:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    242c:	0f 2e       	mov	r0, r31
    242e:	f5 e1       	ldi	r31, 0x15	; 21
    2430:	ef 2e       	mov	r14, r31
    2432:	f1 2c       	mov	r15, r1
    2434:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    2436:	0f 2e       	mov	r0, r31
    2438:	f3 e1       	ldi	r31, 0x13	; 19
    243a:	cf 2e       	mov	r12, r31
    243c:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    243e:	0f 2e       	mov	r0, r31
    2440:	f1 e1       	ldi	r31, 0x11	; 17
    2442:	bf 2e       	mov	r11, r31
    2444:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2446:	60 c0       	rjmp	.+192    	; 0x2508 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    2448:	88 81       	ld	r24, Y
    244a:	83 31       	cpi	r24, 0x13	; 19
    244c:	c1 f0       	breq	.+48     	; 0x247e <nwkTxTaskHandler+0x88>
    244e:	18 f4       	brcc	.+6      	; 0x2456 <nwkTxTaskHandler+0x60>
    2450:	82 31       	cpi	r24, 0x12	; 18
    2452:	39 f0       	breq	.+14     	; 0x2462 <nwkTxTaskHandler+0x6c>
    2454:	59 c0       	rjmp	.+178    	; 0x2508 <nwkTxTaskHandler+0x112>
    2456:	85 31       	cpi	r24, 0x15	; 21
    2458:	49 f1       	breq	.+82     	; 0x24ac <nwkTxTaskHandler+0xb6>
    245a:	87 31       	cpi	r24, 0x17	; 23
    245c:	09 f4       	brne	.+2      	; 0x2460 <nwkTxTaskHandler+0x6a>
    245e:	45 c0       	rjmp	.+138    	; 0x24ea <nwkTxTaskHandler+0xf4>
    2460:	53 c0       	rjmp	.+166    	; 0x2508 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    2462:	fe 01       	movw	r30, r28
    2464:	ec 57       	subi	r30, 0x7C	; 124
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	89 2b       	or	r24, r25
    246e:	29 f0       	breq	.+10     	; 0x247a <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    2470:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    2472:	85 e9       	ldi	r24, 0x95	; 149
    2474:	9a e0       	ldi	r25, 0x0A	; 10
    2476:	ed d1       	rcall	.+986    	; 0x2852 <SYS_TimerStart>
    2478:	47 c0       	rjmp	.+142    	; 0x2508 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    247a:	c8 82       	st	Y, r12
    247c:	45 c0       	rjmp	.+138    	; 0x2508 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    247e:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <nwkTxPhyActiveFrame>
    2482:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <nwkTxPhyActiveFrame+0x1>
    2486:	89 2b       	or	r24, r25
    2488:	09 f0       	breq	.+2      	; 0x248c <nwkTxTaskHandler+0x96>
    248a:	3e c0       	rjmp	.+124    	; 0x2508 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    248c:	d0 93 b0 0a 	sts	0x0AB0, r29	; 0x800ab0 <nwkTxPhyActiveFrame+0x1>
    2490:	c0 93 af 0a 	sts	0x0AAF, r28	; 0x800aaf <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    2494:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    2496:	69 81       	ldd	r22, Y+1	; 0x01
    2498:	ce 01       	movw	r24, r28
    249a:	02 96       	adiw	r24, 0x02	; 2
    249c:	65 d0       	rcall	.+202    	; 0x2568 <PHY_DataReq>
          nwkIb.lock++;
    249e:	f8 01       	movw	r30, r16
    24a0:	86 a1       	ldd	r24, Z+38	; 0x26
    24a2:	97 a1       	ldd	r25, Z+39	; 0x27
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	97 a3       	std	Z+39, r25	; 0x27
    24a8:	86 a3       	std	Z+38, r24	; 0x26
    24aa:	2e c0       	rjmp	.+92     	; 0x2508 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    24ac:	fe 01       	movw	r30, r28
    24ae:	ed 57       	subi	r30, 0x7D	; 125
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	81 11       	cpse	r24, r1
    24b6:	17 c0       	rjmp	.+46     	; 0x24e6 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    24b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    24ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    24bc:	f8 01       	movw	r30, r16
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	69 f4       	brne	.+26     	; 0x24e2 <nwkTxTaskHandler+0xec>
    24c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ca:	80 ff       	sbrs	r24, 0
    24cc:	0a c0       	rjmp	.+20     	; 0x24e2 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    24ce:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    24d0:	fe 01       	movw	r30, r28
    24d2:	ec 57       	subi	r30, 0x7C	; 124
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	f1 82       	std	Z+1, r15	; 0x01
    24d8:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    24da:	82 ea       	ldi	r24, 0xA2	; 162
    24dc:	9a e0       	ldi	r25, 0x0A	; 10
    24de:	b9 d1       	rcall	.+882    	; 0x2852 <SYS_TimerStart>
    24e0:	13 c0       	rjmp	.+38     	; 0x2508 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    24e2:	d8 82       	st	Y, r13
    24e4:	11 c0       	rjmp	.+34     	; 0x2508 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    24e6:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <nwkTxTaskHandler+0x112>
    24ea:	ce 01       	movw	r24, r28
    24ec:	b4 da       	rcall	.-2712   	; 0x1a56 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    24ee:	fe 01       	movw	r30, r28
    24f0:	e9 57       	subi	r30, 0x79	; 121
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	01 90       	ld	r0, Z+
    24f6:	f0 81       	ld	r31, Z
    24f8:	e0 2d       	mov	r30, r0
    24fa:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    24fc:	19 f4       	brne	.+6      	; 0x2504 <nwkTxTaskHandler+0x10e>
    24fe:	ce 01       	movw	r24, r28
    2500:	8b d9       	rcall	.-3306   	; 0x1818 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <nwkTxTaskHandler+0x112>
    2504:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    2506:	09 95       	icall
    2508:	ce 01       	movw	r24, r28
    250a:	90 d9       	rcall	.-3296   	; 0x182c <nwkFrameNext>
    250c:	ec 01       	movw	r28, r24
    250e:	89 2b       	or	r24, r25
    2510:	09 f0       	breq	.+2      	; 0x2514 <nwkTxTaskHandler+0x11e>
    2512:	9a cf       	rjmp	.-204    	; 0x2448 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	08 95       	ret

0000252c <phyTrxSetState>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    252c:	93 e0       	ldi	r25, 0x03	; 3
    252e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__DATA_REGION_ORIGIN__+0x42>
    2532:	e1 e4       	ldi	r30, 0x41	; 65
    2534:	f1 e0       	ldi	r31, 0x01	; 1
    2536:	90 81       	ld	r25, Z
    2538:	9f 71       	andi	r25, 0x1F	; 31
    253a:	98 30       	cpi	r25, 0x08	; 8
    253c:	e1 f7       	brne	.-8      	; 0x2536 <phyTrxSetState+0xa>
    253e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__DATA_REGION_ORIGIN__+0x42>
    2542:	e1 e4       	ldi	r30, 0x41	; 65
    2544:	f1 e0       	ldi	r31, 0x01	; 1
    2546:	90 81       	ld	r25, Z
    2548:	9f 71       	andi	r25, 0x1F	; 31
    254a:	89 13       	cpse	r24, r25
    254c:	fc cf       	rjmp	.-8      	; 0x2546 <phyTrxSetState+0x1a>
    254e:	08 95       	ret

00002550 <phySetRxState>:
    2550:	88 e0       	ldi	r24, 0x08	; 8
    2552:	ec df       	rcall	.-40     	; 0x252c <phyTrxSetState>
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__DATA_REGION_ORIGIN__+0x4f>
    255a:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <phyRxState>
    255e:	88 23       	and	r24, r24
    2560:	11 f0       	breq	.+4      	; 0x2566 <phySetRxState+0x16>
    2562:	86 e1       	ldi	r24, 0x16	; 22
    2564:	e3 cf       	rjmp	.-58     	; 0x252c <phyTrxSetState>
    2566:	08 95       	ret

00002568 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	18 2f       	mov	r17, r24
    2570:	d9 2f       	mov	r29, r25
    2572:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2574:	89 e1       	ldi	r24, 0x19	; 25
    2576:	da df       	rcall	.-76     	; 0x252c <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__DATA_REGION_ORIGIN__+0x4f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	8c 0f       	add	r24, r28
    2582:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__DATA_REGION_ORIGIN__+0x80>
  for (uint8_t i = 0; i < size; i++)
    2586:	cc 23       	and	r28, r28
    2588:	71 f0       	breq	.+28     	; 0x25a6 <PHY_DataReq+0x3e>
    258a:	a1 2f       	mov	r26, r17
    258c:	bd 2f       	mov	r27, r29
    258e:	c1 50       	subi	r28, 0x01	; 1
    2590:	6c 2f       	mov	r22, r28
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	6e 57       	subi	r22, 0x7E	; 126
    2596:	7e 4f       	sbci	r23, 0xFE	; 254
    2598:	e1 e8       	ldi	r30, 0x81	; 129
    259a:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    259c:	8d 91       	ld	r24, X+
    259e:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    25a0:	e6 17       	cp	r30, r22
    25a2:	f7 07       	cpc	r31, r23
    25a4:	d9 f7       	brne	.-10     	; 0x259c <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	80 93 32 0b 	sts	0x0B32, r24	; 0x800b32 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    25ac:	82 e0       	ldi	r24, 0x02	; 2
    25ae:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__DATA_REGION_ORIGIN__+0x42>
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	08 95       	ret

000025ba <PHY_RandomReq>:

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
  uint16_t rnd = 0;

  phyTrxSetState(TRX_CMD_RX_ON);
    25c6:	86 e0       	ldi	r24, 0x06	; 6
    25c8:	b1 df       	rcall	.-158    	; 0x252c <phyTrxSetState>
    25ca:	c0 e0       	ldi	r28, 0x00	; 0
    25cc:	d0 e0       	ldi	r29, 0x00	; 0
#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
/*************************************************************************//**
*****************************************************************************/
uint16_t PHY_RandomReq(void)
{
  uint16_t rnd = 0;
    25ce:	e1 2c       	mov	r14, r1
    25d0:	f1 2c       	mov	r15, r1
  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    25d2:	06 e4       	ldi	r16, 0x46	; 70
    25d4:	11 e0       	ldi	r17, 0x01	; 1

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	0e 94 0e 0a 	call	0x141c	; 0x141c <HAL_Delay>
    rnd |= PHY_RSSI_REG_s.rndValue << i;
    25dc:	f8 01       	movw	r30, r16
    25de:	80 81       	ld	r24, Z
    25e0:	82 95       	swap	r24
    25e2:	86 95       	lsr	r24
    25e4:	87 70       	andi	r24, 0x07	; 7
    25e6:	83 70       	andi	r24, 0x03	; 3
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0c 2e       	mov	r0, r28
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <PHY_RandomReq+0x38>
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	0a 94       	dec	r0
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <PHY_RandomReq+0x34>
    25f6:	e8 2a       	or	r14, r24
    25f8:	f9 2a       	or	r15, r25
    25fa:	22 96       	adiw	r28, 0x02	; 2
{
  uint16_t rnd = 0;

  phyTrxSetState(TRX_CMD_RX_ON);

  for (uint8_t i = 0; i < 16; i += 2)
    25fc:	c0 31       	cpi	r28, 0x10	; 16
    25fe:	d1 05       	cpc	r29, r1
  {
    HAL_Delay(RANDOM_NUMBER_UPDATE_INTERVAL);
    rnd |= PHY_RSSI_REG_s.rndValue << i;
  }

  phySetRxState();
    2600:	51 f7       	brne	.-44     	; 0x25d6 <PHY_RandomReq+0x1c>
    2602:	a6 df       	rcall	.-180    	; 0x2550 <phySetRxState>

  return rnd;
}
    2604:	c7 01       	movw	r24, r14
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	08 95       	ret

00002614 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    2614:	e9 e3       	ldi	r30, 0x39	; 57
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	80 81       	ld	r24, Z
    261a:	81 60       	ori	r24, 0x01	; 1
    261c:	80 83       	st	Z, r24

  phyRxState = false;
    261e:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <phyRxState>
  phyState = PHY_STATE_IDLE;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	80 93 32 0b 	sts	0x0B32, r24	; 0x800b32 <phyState>

  phyTrxSetState(TRX_CMD_TRX_OFF);
    2628:	88 e0       	ldi	r24, 0x08	; 8
    262a:	80 df       	rcall	.-256    	; 0x252c <phyTrxSetState>

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    262c:	ec e4       	ldi	r30, 0x4C	; 76
    262e:	f1 e0       	ldi	r31, 0x01	; 1
    2630:	80 81       	ld	r24, Z
    2632:	80 68       	ori	r24, 0x80	; 128

#ifdef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = (uint8_t)PHY_RandomReq();
    2634:	80 83       	st	Z, r24
    2636:	c1 df       	rcall	.-126    	; 0x25ba <PHY_RandomReq>
    2638:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__DATA_REGION_ORIGIN__+0x6d>
    263c:	08 95       	ret

0000263e <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	00 d0       	rcall	.+0      	; 0x2646 <PHY_TaskHandler+0x8>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <PHY_TaskHandler+0xa>
    2648:	1f 92       	push	r1
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    264e:	80 91 32 0b 	lds	r24, 0x0B32	; 0x800b32 <phyState>
    2652:	82 30       	cpi	r24, 0x02	; 2
    2654:	09 f4       	brne	.+2      	; 0x2658 <PHY_TaskHandler+0x1a>
    2656:	65 c0       	rjmp	.+202    	; 0x2722 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    2658:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__DATA_REGION_ORIGIN__+0x4f>
    265c:	83 ff       	sbrs	r24, 3
    265e:	3e c0       	rjmp	.+124    	; 0x26dc <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2660:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__DATA_REGION_ORIGIN__+0x7b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2664:	6a 2f       	mov	r22, r26
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	ab 01       	movw	r20, r22
    266a:	4f 5f       	subi	r20, 0xFF	; 255
    266c:	5f 4f       	sbci	r21, 0xFF	; 255
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2674:	fc 01       	movw	r30, r24
    2676:	e0 58       	subi	r30, 0x80	; 128
    2678:	fe 4f       	sbci	r31, 0xFE	; 254
    267a:	30 81       	ld	r19, Z
    267c:	fc 01       	movw	r30, r24
    267e:	ee 54       	subi	r30, 0x4E	; 78
    2680:	f5 4f       	sbci	r31, 0xF5	; 245
    2682:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	82 2f       	mov	r24, r18
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	84 17       	cp	r24, r20
    268c:	95 07       	cpc	r25, r21
    268e:	94 f3       	brlt	.-28     	; 0x2674 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2690:	82 eb       	ldi	r24, 0xB2	; 178
    2692:	9a e0       	ldi	r25, 0x0A	; 10
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    2698:	a2 50       	subi	r26, 0x02	; 2
    269a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    269c:	fb 01       	movw	r30, r22
    269e:	ee 54       	subi	r30, 0x4E	; 78
    26a0:	f5 4f       	sbci	r31, 0xF5	; 245
    26a2:	80 81       	ld	r24, Z
    26a4:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    26a6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__DATA_REGION_ORIGIN__+0x47>
    26aa:	8a 55       	subi	r24, 0x5A	; 90
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	dd da       	rcall	.-2630   	; 0x1c6e <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    26b4:	e1 e4       	ldi	r30, 0x41	; 65
    26b6:	f1 e0       	ldi	r31, 0x01	; 1
    26b8:	80 81       	ld	r24, Z
    26ba:	8f 71       	andi	r24, 0x1F	; 31
    26bc:	86 31       	cpi	r24, 0x16	; 22
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    26c0:	ef e4       	ldi	r30, 0x4F	; 79
    26c2:	f1 e0       	ldi	r31, 0x01	; 1
    26c4:	80 81       	ld	r24, Z
    26c6:	88 60       	ori	r24, 0x08	; 8
    26c8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    26ca:	ec e4       	ldi	r30, 0x4C	; 76
    26cc:	f1 e0       	ldi	r31, 0x01	; 1
    26ce:	80 81       	ld	r24, Z
    26d0:	8f 77       	andi	r24, 0x7F	; 127
    26d2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    26d4:	80 81       	ld	r24, Z
    26d6:	80 68       	ori	r24, 0x80	; 128
    26d8:	80 83       	st	Z, r24
    26da:	23 c0       	rjmp	.+70     	; 0x2722 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    26dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__DATA_REGION_ORIGIN__+0x4f>
    26e0:	86 ff       	sbrs	r24, 6
    26e2:	1f c0       	rjmp	.+62     	; 0x2722 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    26e4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__DATA_REGION_ORIGIN__+0x41>
    26e8:	8f 71       	andi	r24, 0x1F	; 31
    26ea:	89 31       	cpi	r24, 0x19	; 25
    26ec:	a9 f4       	brne	.+42     	; 0x2718 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    26ee:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__DATA_REGION_ORIGIN__+0x42>
    26f2:	12 95       	swap	r17
    26f4:	16 95       	lsr	r17
    26f6:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    26f8:	49 f0       	breq	.+18     	; 0x270c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    26fa:	13 30       	cpi	r17, 0x03	; 3
    26fc:	21 f0       	breq	.+8      	; 0x2706 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    26fe:	15 30       	cpi	r17, 0x05	; 5
    2700:	21 f0       	breq	.+8      	; 0x270a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    2702:	13 e0       	ldi	r17, 0x03	; 3
    2704:	03 c0       	rjmp	.+6      	; 0x270c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2706:	11 e0       	ldi	r17, 0x01	; 1
    2708:	01 c0       	rjmp	.+2      	; 0x270c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    270a:	12 e0       	ldi	r17, 0x02	; 2
    270c:	21 df       	rcall	.-446    	; 0x2550 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 32 0b 	sts	0x0B32, r24	; 0x800b32 <phyState>

      PHY_DataConf(status);
    2714:	81 2f       	mov	r24, r17
    2716:	4c de       	rcall	.-872    	; 0x23b0 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    2718:	ef e4       	ldi	r30, 0x4F	; 79
    271a:	f1 e0       	ldi	r31, 0x01	; 1
    271c:	80 81       	ld	r24, Z
    271e:	80 64       	ori	r24, 0x40	; 64
    2720:	80 83       	st	Z, r24
  }
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	08 95       	ret

00002734 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    2734:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <HAL_Init>
  SYS_TimerInit();
    2738:	6d d0       	rcall	.+218    	; 0x2814 <SYS_TimerInit>
  PHY_Init();
    273a:	6c df       	rcall	.-296    	; 0x2614 <PHY_Init>
    273c:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <NWK_Init>
  NWK_Init();
    2740:	08 95       	ret

00002742 <SYS_TaskHandler>:
    2742:	7d df       	rcall	.-262    	; 0x263e <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    2744:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    2748:	8f c0       	rjmp	.+286    	; 0x2868 <SYS_TimerTaskHandler>
    274a:	08 95       	ret

0000274c <placeTimer>:

      break;
    }
    prev = t;
  }
}
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	ec 01       	movw	r28, r24
    2756:	80 91 33 0b 	lds	r24, 0x0B33	; 0x800b33 <timers>
    275a:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <timers+0x1>
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	09 f4       	brne	.+2      	; 0x2764 <placeTimer+0x18>
    2762:	45 c0       	rjmp	.+138    	; 0x27ee <placeTimer+0xa2>
    2764:	4e 81       	ldd	r20, Y+6	; 0x06
    2766:	5f 81       	ldd	r21, Y+7	; 0x07
    2768:	68 85       	ldd	r22, Y+8	; 0x08
    276a:	79 85       	ldd	r23, Y+9	; 0x09
    276c:	fc 01       	movw	r30, r24
    276e:	02 81       	ldd	r16, Z+2	; 0x02
    2770:	13 81       	ldd	r17, Z+3	; 0x03
    2772:	24 81       	ldd	r18, Z+4	; 0x04
    2774:	35 81       	ldd	r19, Z+5	; 0x05
    2776:	40 17       	cp	r20, r16
    2778:	51 07       	cpc	r21, r17
    277a:	62 07       	cpc	r22, r18
    277c:	73 07       	cpc	r23, r19
    277e:	60 f0       	brcs	.+24     	; 0x2798 <placeTimer+0x4c>
    2780:	dc 01       	movw	r26, r24
    2782:	17 c0       	rjmp	.+46     	; 0x27b2 <placeTimer+0x66>
    2784:	02 81       	ldd	r16, Z+2	; 0x02
    2786:	13 81       	ldd	r17, Z+3	; 0x03
    2788:	24 81       	ldd	r18, Z+4	; 0x04
    278a:	35 81       	ldd	r19, Z+5	; 0x05
    278c:	40 17       	cp	r20, r16
    278e:	51 07       	cpc	r21, r17
    2790:	62 07       	cpc	r22, r18
    2792:	73 07       	cpc	r23, r19
    2794:	68 f4       	brcc	.+26     	; 0x27b0 <placeTimer+0x64>
    2796:	03 c0       	rjmp	.+6      	; 0x279e <placeTimer+0x52>
    2798:	fc 01       	movw	r30, r24
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	04 1b       	sub	r16, r20
    27a0:	15 0b       	sbc	r17, r21
    27a2:	26 0b       	sbc	r18, r22
    27a4:	37 0b       	sbc	r19, r23
    27a6:	02 83       	std	Z+2, r16	; 0x02
    27a8:	13 83       	std	Z+3, r17	; 0x03
    27aa:	24 83       	std	Z+4, r18	; 0x04
    27ac:	35 83       	std	Z+5, r19	; 0x05
    27ae:	0a c0       	rjmp	.+20     	; 0x27c4 <placeTimer+0x78>
    27b0:	df 01       	movw	r26, r30
    27b2:	40 1b       	sub	r20, r16
    27b4:	51 0b       	sbc	r21, r17
    27b6:	62 0b       	sbc	r22, r18
    27b8:	73 0b       	sbc	r23, r19
    27ba:	ed 91       	ld	r30, X+
    27bc:	fc 91       	ld	r31, X
    27be:	11 97       	sbiw	r26, 0x01	; 1
    27c0:	30 97       	sbiw	r30, 0x00	; 0
    27c2:	01 f7       	brne	.-64     	; 0x2784 <placeTimer+0x38>
    27c4:	4a 83       	std	Y+2, r20	; 0x02
    27c6:	5b 83       	std	Y+3, r21	; 0x03
    27c8:	6c 83       	std	Y+4, r22	; 0x04
    27ca:	7d 83       	std	Y+5, r23	; 0x05
    27cc:	10 97       	sbiw	r26, 0x00	; 0
    27ce:	41 f0       	breq	.+16     	; 0x27e0 <placeTimer+0x94>
    27d0:	8d 91       	ld	r24, X+
    27d2:	9c 91       	ld	r25, X
    27d4:	11 97       	sbiw	r26, 0x01	; 1
    27d6:	99 83       	std	Y+1, r25	; 0x01
    27d8:	88 83       	st	Y, r24
    27da:	cd 93       	st	X+, r28
    27dc:	dc 93       	st	X, r29
    27de:	15 c0       	rjmp	.+42     	; 0x280a <placeTimer+0xbe>
    27e0:	99 83       	std	Y+1, r25	; 0x01
    27e2:	88 83       	st	Y, r24
    27e4:	d0 93 34 0b 	sts	0x0B34, r29	; 0x800b34 <timers+0x1>
    27e8:	c0 93 33 0b 	sts	0x0B33, r28	; 0x800b33 <timers>
    27ec:	0e c0       	rjmp	.+28     	; 0x280a <placeTimer+0xbe>
    27ee:	19 82       	std	Y+1, r1	; 0x01
    27f0:	18 82       	st	Y, r1
    27f2:	8e 81       	ldd	r24, Y+6	; 0x06
    27f4:	9f 81       	ldd	r25, Y+7	; 0x07
    27f6:	a8 85       	ldd	r26, Y+8	; 0x08
    27f8:	b9 85       	ldd	r27, Y+9	; 0x09
    27fa:	8a 83       	std	Y+2, r24	; 0x02
    27fc:	9b 83       	std	Y+3, r25	; 0x03
    27fe:	ac 83       	std	Y+4, r26	; 0x04
    2800:	bd 83       	std	Y+5, r27	; 0x05
    2802:	d0 93 34 0b 	sts	0x0B34, r29	; 0x800b34 <timers+0x1>
    2806:	c0 93 33 0b 	sts	0x0B33, r28	; 0x800b33 <timers>
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	08 95       	ret

00002814 <SYS_TimerInit>:
    2814:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <timers+0x1>
    2818:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <timers>
    281c:	08 95       	ret

0000281e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    281e:	e0 91 33 0b 	lds	r30, 0x0B33	; 0x800b33 <timers>
    2822:	f0 91 34 0b 	lds	r31, 0x0B34	; 0x800b34 <timers+0x1>
    2826:	30 97       	sbiw	r30, 0x00	; 0
    2828:	71 f0       	breq	.+28     	; 0x2846 <SYS_TimerStarted+0x28>
    if (t == timer)
    282a:	e8 17       	cp	r30, r24
    282c:	f9 07       	cpc	r31, r25
    282e:	21 f4       	brne	.+8      	; 0x2838 <SYS_TimerStarted+0x1a>
    2830:	0c c0       	rjmp	.+24     	; 0x284a <SYS_TimerStarted+0x2c>
    2832:	8e 17       	cp	r24, r30
    2834:	9f 07       	cpc	r25, r31
    2836:	59 f0       	breq	.+22     	; 0x284e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2838:	01 90       	ld	r0, Z+
    283a:	f0 81       	ld	r31, Z
    283c:	e0 2d       	mov	r30, r0
    283e:	30 97       	sbiw	r30, 0x00	; 0
    2840:	c1 f7       	brne	.-16     	; 0x2832 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	08 95       	ret
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	08 95       	ret
    284e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    2850:	08 95       	ret

00002852 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2858:	e2 df       	rcall	.-60     	; 0x281e <SYS_TimerStarted>
    285a:	81 11       	cpse	r24, r1
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <SYS_TimerStart+0x10>
    placeTimer(timer);
    285e:	ce 01       	movw	r24, r28
    2860:	75 df       	rcall	.-278    	; 0x274c <placeTimer>
}
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2868:	cf 92       	push	r12
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    2874:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <halTimerIrqCount>
    2878:	88 23       	and	r24, r24
    287a:	09 f4       	brne	.+2      	; 0x287e <SYS_TimerTaskHandler+0x16>
    287c:	59 c0       	rjmp	.+178    	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    287e:	8f b7       	in	r24, 0x3f	; 63
    2880:	f8 94       	cli
    cnt = halTimerIrqCount;
    2882:	c0 90 35 0b 	lds	r12, 0x0B35	; 0x800b35 <halTimerIrqCount>
    halTimerIrqCount = 0;
    2886:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    288a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    288c:	d1 2c       	mov	r13, r1
    288e:	e1 2c       	mov	r14, r1
    2890:	f1 2c       	mov	r15, r1
    2892:	cc 0c       	add	r12, r12
    2894:	dd 1c       	adc	r13, r13
    2896:	ee 1c       	adc	r14, r14
    2898:	ff 1c       	adc	r15, r15
    289a:	d7 01       	movw	r26, r14
    289c:	c6 01       	movw	r24, r12
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	aa 1f       	adc	r26, r26
    28ac:	bb 1f       	adc	r27, r27
    28ae:	c8 0e       	add	r12, r24
    28b0:	d9 1e       	adc	r13, r25
    28b2:	ea 1e       	adc	r14, r26
    28b4:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    28b6:	c0 91 33 0b 	lds	r28, 0x0B33	; 0x800b33 <timers>
    28ba:	d0 91 34 0b 	lds	r29, 0x0B34	; 0x800b34 <timers+0x1>
    28be:	20 97       	sbiw	r28, 0x00	; 0
    28c0:	b9 f1       	breq	.+110    	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	ac 81       	ldd	r26, Y+4	; 0x04
    28c8:	bd 81       	ldd	r27, Y+5	; 0x05
    28ca:	c8 16       	cp	r12, r24
    28cc:	d9 06       	cpc	r13, r25
    28ce:	ea 06       	cpc	r14, r26
    28d0:	fb 06       	cpc	r15, r27
    28d2:	10 f1       	brcs	.+68     	; 0x2918 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    28d4:	c8 1a       	sub	r12, r24
    28d6:	d9 0a       	sbc	r13, r25
    28d8:	ea 0a       	sbc	r14, r26
    28da:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    28dc:	88 81       	ld	r24, Y
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	90 93 34 0b 	sts	0x0B34, r25	; 0x800b34 <timers+0x1>
    28e4:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    28e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	11 f4       	brne	.+4      	; 0x28f2 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    28ee:	ce 01       	movw	r24, r28
    28f0:	2d df       	rcall	.-422    	; 0x274c <placeTimer>
    timer->handler(timer);
    28f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    28f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    28f6:	ce 01       	movw	r24, r28
    28f8:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    28fa:	c0 91 33 0b 	lds	r28, 0x0B33	; 0x800b33 <timers>
    28fe:	d0 91 34 0b 	lds	r29, 0x0B34	; 0x800b34 <timers+0x1>
    2902:	20 97       	sbiw	r28, 0x00	; 0
    2904:	a9 f0       	breq	.+42     	; 0x2930 <SYS_TimerTaskHandler+0xc8>
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	9b 81       	ldd	r25, Y+3	; 0x03
    290a:	ac 81       	ldd	r26, Y+4	; 0x04
    290c:	bd 81       	ldd	r27, Y+5	; 0x05
    290e:	c8 16       	cp	r12, r24
    2910:	d9 06       	cpc	r13, r25
    2912:	ea 06       	cpc	r14, r26
    2914:	fb 06       	cpc	r15, r27
    2916:	f0 f6       	brcc	.-68     	; 0x28d4 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	ac 81       	ldd	r26, Y+4	; 0x04
    291e:	bd 81       	ldd	r27, Y+5	; 0x05
    2920:	8c 19       	sub	r24, r12
    2922:	9d 09       	sbc	r25, r13
    2924:	ae 09       	sbc	r26, r14
    2926:	bf 09       	sbc	r27, r15
    2928:	8a 83       	std	Y+2, r24	; 0x02
    292a:	9b 83       	std	Y+3, r25	; 0x03
    292c:	ac 83       	std	Y+4, r26	; 0x04
    292e:	bd 83       	std	Y+5, r27	; 0x05
}
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	ff 90       	pop	r15
    2936:	ef 90       	pop	r14
    2938:	df 90       	pop	r13
    293a:	cf 90       	pop	r12
    293c:	08 95       	ret

0000293e <usb_init>:

   return (!(USB_RXF_PINS & _BV(USB_RXF_PIN))) ? 1 : 0;

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
    293e:	25 98       	cbi	0x04, 5	; 4
    2940:	2d 9a       	sbi	0x05, 5	; 5
    2942:	6a 98       	cbi	0x0d, 2	; 13
    2944:	72 9a       	sbi	0x0e, 2	; 14
    2946:	08 95       	ret

00002948 <read_usb_byte>:
#elif (PLATFORM == DE_RF_NODE)

   uint8_t data = 0;

   /* set Data Directions to input */
   USB_D0_DDR &= ~_BV(USB_D0_PIN);
    2948:	20 98       	cbi	0x04, 0	; 4
   USB_D1_DDR &= ~_BV(USB_D1_PIN);
    294a:	82 98       	cbi	0x10, 2	; 16
   USB_D2_DDR &= ~_BV(USB_D2_PIN);
    294c:	55 98       	cbi	0x0a, 5	; 10
   USB_D3_DDR &= ~_BV(USB_D3_PIN);
    294e:	9a 98       	cbi	0x13, 2	; 19
   USB_D4_DDR &= ~_BV(USB_D4_PIN);
    2950:	6e 98       	cbi	0x0d, 6	; 13
   USB_D5_DDR &= ~_BV(USB_D5_PIN);
    2952:	24 98       	cbi	0x04, 4	; 4
   USB_D6_DDR &= ~_BV(USB_D6_PIN);
    2954:	6f 98       	cbi	0x0d, 7	; 13
   USB_D7_DDR &= ~_BV(USB_D7_PIN);
    2956:	26 98       	cbi	0x04, 6	; 4

   /*
    * RD and WR are low active
    */
   /* make sure WR pin is high, to enable correct latch direction */
   USB_WR_PORT |= _BV(USB_WR_PIN);
    2958:	5b 9a       	sbi	0x0b, 3	; 11
   USB_WR_DDR  |= _BV(USB_WR_PIN);
    295a:	53 9a       	sbi	0x0a, 3	; 10

   /* set RD pin active -> low */
   USB_RD_PORT &= ~_BV(USB_RD_PIN);
    295c:	5a 98       	cbi	0x0b, 2	; 11
   USB_RD_DDR  |=  _BV(USB_RD_PIN);
    295e:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2960:	8d e0       	ldi	r24, 0x0D	; 13
    2962:	8a 95       	dec	r24
    2964:	f1 f7       	brne	.-4      	; 0x2962 <read_usb_byte+0x1a>
    2966:	00 00       	nop

   /* give chip a chance to put out the data */
   _delay_us(5);

   /* read data */
   if(USB_D0_PINS & _BV(USB_D0_PIN)){ data |= _BV(USB_D0_BIT);} else{ data &= ~_BV(USB_D0_BIT);}
    2968:	83 b1       	in	r24, 0x03	; 3
    296a:	81 70       	andi	r24, 0x01	; 1
   if(USB_D1_PINS & _BV(USB_D1_PIN)){ data |= _BV(USB_D1_BIT);} else{ data &= ~_BV(USB_D1_BIT);}
    296c:	7a 9b       	sbis	0x0f, 2	; 15
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <read_usb_byte+0x2c>
    2970:	82 60       	ori	r24, 0x02	; 2
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <read_usb_byte+0x2e>
    2974:	8d 7f       	andi	r24, 0xFD	; 253
   if(USB_D2_PINS & _BV(USB_D2_PIN)){ data |= _BV(USB_D2_BIT);} else{ data &= ~_BV(USB_D2_BIT);}
    2976:	4d 9b       	sbis	0x09, 5	; 9
    2978:	02 c0       	rjmp	.+4      	; 0x297e <read_usb_byte+0x36>
    297a:	84 60       	ori	r24, 0x04	; 4
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <read_usb_byte+0x38>
    297e:	8b 7f       	andi	r24, 0xFB	; 251
   if(USB_D3_PINS & _BV(USB_D3_PIN)){ data |= _BV(USB_D3_BIT);} else{ data &= ~_BV(USB_D3_BIT);}
    2980:	92 9b       	sbis	0x12, 2	; 18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <read_usb_byte+0x40>
    2984:	88 60       	ori	r24, 0x08	; 8
    2986:	01 c0       	rjmp	.+2      	; 0x298a <read_usb_byte+0x42>
    2988:	87 7f       	andi	r24, 0xF7	; 247
   if(USB_D4_PINS & _BV(USB_D4_PIN)){ data |= _BV(USB_D4_BIT);} else{ data &= ~_BV(USB_D4_BIT);}
    298a:	66 9b       	sbis	0x0c, 6	; 12
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <read_usb_byte+0x4a>
    298e:	80 61       	ori	r24, 0x10	; 16
    2990:	01 c0       	rjmp	.+2      	; 0x2994 <read_usb_byte+0x4c>
    2992:	8f 7e       	andi	r24, 0xEF	; 239
   if(USB_D5_PINS & _BV(USB_D5_PIN)){ data |= _BV(USB_D5_BIT);} else{ data &= ~_BV(USB_D5_BIT);}
    2994:	1c 9b       	sbis	0x03, 4	; 3
    2996:	02 c0       	rjmp	.+4      	; 0x299c <read_usb_byte+0x54>
    2998:	80 62       	ori	r24, 0x20	; 32
    299a:	01 c0       	rjmp	.+2      	; 0x299e <read_usb_byte+0x56>
    299c:	8f 7d       	andi	r24, 0xDF	; 223
   if(USB_D6_PINS & _BV(USB_D6_PIN)){ data |= _BV(USB_D6_BIT);} else{ data &= ~_BV(USB_D6_BIT);}
    299e:	67 9b       	sbis	0x0c, 7	; 12
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <read_usb_byte+0x5e>
    29a2:	80 64       	ori	r24, 0x40	; 64
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <read_usb_byte+0x60>
    29a6:	8f 7b       	andi	r24, 0xBF	; 191
   if(USB_D7_PINS & _BV(USB_D7_PIN)){ data |= _BV(USB_D7_BIT);} else{ data &= ~_BV(USB_D7_BIT);}
    29a8:	1e 9b       	sbis	0x03, 6	; 3
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <read_usb_byte+0x68>
    29ac:	80 68       	ori	r24, 0x80	; 128
    29ae:	01 c0       	rjmp	.+2      	; 0x29b2 <read_usb_byte+0x6a>
    29b0:	8f 77       	andi	r24, 0x7F	; 127

   /* set RD pin inactive -> high */
   USB_RD_PORT |= _BV(USB_RD_PIN);
    29b2:	5a 9a       	sbi	0x0b, 2	; 11
   return data;

#endif // defined (PLATFORM == SENS_TERM_BOARD)

   return 0;
}
    29b4:	08 95       	ret

000029b6 <usb_getc_std>:
int usb_getc_std(FILE* dummy_file)
{
#if (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)

   /* wait until new char received */
   while (USB_RXF_PINS & _BV(USB_RXF_PIN)){;}
    29b6:	62 99       	sbic	0x0c, 2	; 12
    29b8:	fe cf       	rjmp	.-4      	; 0x29b6 <usb_getc_std>
   /* return the data */
   return(read_usb_byte());
    29ba:	c6 df       	rcall	.-116    	; 0x2948 <read_usb_byte>

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	08 95       	ret

000029c0 <write_usb_byte>:
#endif

#elif (PLATFORM == DE_RF_NODE)

   /* set data pins, depending on character */
   if(data & _BV(USB_D0_BIT)){ USB_D0_PORT |= _BV(USB_D0_PIN);} else{ USB_D0_PORT &= ~_BV(USB_D0_PIN);}
    29c0:	80 ff       	sbrs	r24, 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <write_usb_byte+0x8>
    29c4:	28 9a       	sbi	0x05, 0	; 5
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <write_usb_byte+0xa>
    29c8:	28 98       	cbi	0x05, 0	; 5
   if(data & _BV(USB_D1_BIT)){ USB_D1_PORT |= _BV(USB_D1_PIN);} else{ USB_D1_PORT &= ~_BV(USB_D1_PIN);}
    29ca:	81 ff       	sbrs	r24, 1
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <write_usb_byte+0x12>
    29ce:	8a 9a       	sbi	0x11, 2	; 17
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <write_usb_byte+0x14>
    29d2:	8a 98       	cbi	0x11, 2	; 17
   if(data & _BV(USB_D2_BIT)){ USB_D2_PORT |= _BV(USB_D2_PIN);} else{ USB_D2_PORT &= ~_BV(USB_D2_PIN);}
    29d4:	82 ff       	sbrs	r24, 2
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <write_usb_byte+0x1c>
    29d8:	5d 9a       	sbi	0x0b, 5	; 11
    29da:	01 c0       	rjmp	.+2      	; 0x29de <write_usb_byte+0x1e>
    29dc:	5d 98       	cbi	0x0b, 5	; 11
   if(data & _BV(USB_D3_BIT)){ USB_D3_PORT |= _BV(USB_D3_PIN);} else{ USB_D3_PORT &= ~_BV(USB_D3_PIN);}
    29de:	83 ff       	sbrs	r24, 3
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <write_usb_byte+0x26>
    29e2:	a2 9a       	sbi	0x14, 2	; 20
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <write_usb_byte+0x28>
    29e6:	a2 98       	cbi	0x14, 2	; 20
   if(data & _BV(USB_D4_BIT)){ USB_D4_PORT |= _BV(USB_D4_PIN);} else{ USB_D4_PORT &= ~_BV(USB_D4_PIN);}
    29e8:	84 ff       	sbrs	r24, 4
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <write_usb_byte+0x30>
    29ec:	76 9a       	sbi	0x0e, 6	; 14
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <write_usb_byte+0x32>
    29f0:	76 98       	cbi	0x0e, 6	; 14
   if(data & _BV(USB_D5_BIT)){ USB_D5_PORT |= _BV(USB_D5_PIN);} else{ USB_D5_PORT &= ~_BV(USB_D5_PIN);}
    29f2:	85 ff       	sbrs	r24, 5
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <write_usb_byte+0x3a>
    29f6:	2c 9a       	sbi	0x05, 4	; 5
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <write_usb_byte+0x3c>
    29fa:	2c 98       	cbi	0x05, 4	; 5
   if(data & _BV(USB_D6_BIT)){ USB_D6_PORT |= _BV(USB_D6_PIN);} else{ USB_D6_PORT &= ~_BV(USB_D6_PIN);}
    29fc:	86 ff       	sbrs	r24, 6
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <write_usb_byte+0x44>
    2a00:	77 9a       	sbi	0x0e, 7	; 14
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <write_usb_byte+0x46>
    2a04:	77 98       	cbi	0x0e, 7	; 14
   if(data & _BV(USB_D7_BIT)){ USB_D7_PORT |= _BV(USB_D7_PIN);} else{ USB_D7_PORT &= ~_BV(USB_D7_PIN);}
    2a06:	88 23       	and	r24, r24
    2a08:	14 f4       	brge	.+4      	; 0x2a0e <write_usb_byte+0x4e>
    2a0a:	2e 9a       	sbi	0x05, 6	; 5
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <write_usb_byte+0x50>
    2a0e:	2e 98       	cbi	0x05, 6	; 5

   /* set Data Directions to output */
   USB_D0_DDR |= _BV(USB_D0_PIN);
    2a10:	20 9a       	sbi	0x04, 0	; 4
   USB_D1_DDR |= _BV(USB_D1_PIN);
    2a12:	82 9a       	sbi	0x10, 2	; 16
   USB_D2_DDR |= _BV(USB_D2_PIN);
    2a14:	55 9a       	sbi	0x0a, 5	; 10
   USB_D3_DDR |= _BV(USB_D3_PIN);
    2a16:	9a 9a       	sbi	0x13, 2	; 19
   USB_D4_DDR |= _BV(USB_D4_PIN);
    2a18:	6e 9a       	sbi	0x0d, 6	; 13
   USB_D5_DDR |= _BV(USB_D5_PIN);
    2a1a:	24 9a       	sbi	0x04, 4	; 4
   USB_D6_DDR |= _BV(USB_D6_PIN);
    2a1c:	6f 9a       	sbi	0x0d, 7	; 13
   USB_D7_DDR |= _BV(USB_D7_PIN);
    2a1e:	26 9a       	sbi	0x04, 6	; 4

   /*
    * RD and WR are low active
    */
   /* make sure RD pin is inactive -> high */
   USB_RD_PORT |= _BV(USB_RD_PIN);
    2a20:	5a 9a       	sbi	0x0b, 2	; 11
   USB_RD_DDR  |= _BV(USB_RD_PIN);
    2a22:	52 9a       	sbi	0x0a, 2	; 10

   /* set WR pin active -> low */
   USB_WR_PORT &= ~_BV(USB_WR_PIN);
    2a24:	5b 98       	cbi	0x0b, 3	; 11
   USB_WR_DDR  |=  _BV(USB_WR_PIN);
    2a26:	53 9a       	sbi	0x0a, 3	; 10

   /* set WR pin inactive -> high */
   USB_WR_PORT |= _BV(USB_WR_PIN);
    2a28:	5b 9a       	sbi	0x0b, 3	; 11
    2a2a:	08 95       	ret

00002a2c <usb_putc_std>:
 *
 * @return    char: character written to USB
 *
 */
int usb_putc_std(char c, FILE* dummy_file)
{
    2a2c:	cf 93       	push	r28
    2a2e:	c8 2f       	mov	r28, r24
#if (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)

   /* Wait for empty transmit buffer */
   while (USB_TXE_PINS & _BV(USB_TXE_PIN)){;}
    2a30:	1d 99       	sbic	0x03, 5	; 3
    2a32:	fe cf       	rjmp	.-4      	; 0x2a30 <usb_putc_std+0x4>
   /* write the byte into the USB FIFO */
   write_usb_byte(c);
    2a34:	8c 2f       	mov	r24, r28
    2a36:	c4 df       	rcall	.-120    	; 0x29c0 <write_usb_byte>
   /* return the char */
   return(c);

#endif // (PLATFORM == SENS_TERM_BOARD) || (PLATFORM == DE_RF_NODE)
   return 0;
}
    2a38:	8c 2f       	mov	r24, r28
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	cf 91       	pop	r28
    2a3e:	08 95       	ret

00002a40 <vfprintf>:
    2a40:	2f 92       	push	r2
    2a42:	3f 92       	push	r3
    2a44:	4f 92       	push	r4
    2a46:	5f 92       	push	r5
    2a48:	6f 92       	push	r6
    2a4a:	7f 92       	push	r7
    2a4c:	8f 92       	push	r8
    2a4e:	9f 92       	push	r9
    2a50:	af 92       	push	r10
    2a52:	bf 92       	push	r11
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	60 97       	sbiw	r28, 0x10	; 16
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	7c 01       	movw	r14, r24
    2a76:	1b 01       	movw	r2, r22
    2a78:	6a 01       	movw	r12, r20
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	17 82       	std	Z+7, r1	; 0x07
    2a7e:	16 82       	std	Z+6, r1	; 0x06
    2a80:	83 81       	ldd	r24, Z+3	; 0x03
    2a82:	81 ff       	sbrs	r24, 1
    2a84:	2a c3       	rjmp	.+1620   	; 0x30da <vfprintf+0x69a>
    2a86:	9e 01       	movw	r18, r28
    2a88:	2f 5f       	subi	r18, 0xFF	; 255
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	39 01       	movw	r6, r18
    2a8e:	f7 01       	movw	r30, r14
    2a90:	93 81       	ldd	r25, Z+3	; 0x03
    2a92:	f1 01       	movw	r30, r2
    2a94:	93 fd       	sbrc	r25, 3
    2a96:	85 91       	lpm	r24, Z+
    2a98:	93 ff       	sbrs	r25, 3
    2a9a:	81 91       	ld	r24, Z+
    2a9c:	1f 01       	movw	r2, r30
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <vfprintf+0x64>
    2aa2:	17 c3       	rjmp	.+1582   	; 0x30d2 <vfprintf+0x692>
    2aa4:	85 32       	cpi	r24, 0x25	; 37
    2aa6:	39 f4       	brne	.+14     	; 0x2ab6 <vfprintf+0x76>
    2aa8:	93 fd       	sbrc	r25, 3
    2aaa:	85 91       	lpm	r24, Z+
    2aac:	93 ff       	sbrs	r25, 3
    2aae:	81 91       	ld	r24, Z+
    2ab0:	1f 01       	movw	r2, r30
    2ab2:	85 32       	cpi	r24, 0x25	; 37
    2ab4:	31 f4       	brne	.+12     	; 0x2ac2 <vfprintf+0x82>
    2ab6:	b7 01       	movw	r22, r14
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	4a d6       	rcall	.+3220   	; 0x3750 <fputc>
    2abc:	56 01       	movw	r10, r12
    2abe:	65 01       	movw	r12, r10
    2ac0:	e6 cf       	rjmp	.-52     	; 0x2a8e <vfprintf+0x4e>
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	51 2c       	mov	r5, r1
    2ac6:	91 2c       	mov	r9, r1
    2ac8:	ff e1       	ldi	r31, 0x1F	; 31
    2aca:	f9 15       	cp	r31, r9
    2acc:	d8 f0       	brcs	.+54     	; 0x2b04 <vfprintf+0xc4>
    2ace:	8b 32       	cpi	r24, 0x2B	; 43
    2ad0:	79 f0       	breq	.+30     	; 0x2af0 <vfprintf+0xb0>
    2ad2:	38 f4       	brcc	.+14     	; 0x2ae2 <vfprintf+0xa2>
    2ad4:	80 32       	cpi	r24, 0x20	; 32
    2ad6:	79 f0       	breq	.+30     	; 0x2af6 <vfprintf+0xb6>
    2ad8:	83 32       	cpi	r24, 0x23	; 35
    2ada:	a1 f4       	brne	.+40     	; 0x2b04 <vfprintf+0xc4>
    2adc:	f9 2d       	mov	r31, r9
    2ade:	f0 61       	ori	r31, 0x10	; 16
    2ae0:	2e c0       	rjmp	.+92     	; 0x2b3e <vfprintf+0xfe>
    2ae2:	8d 32       	cpi	r24, 0x2D	; 45
    2ae4:	61 f0       	breq	.+24     	; 0x2afe <vfprintf+0xbe>
    2ae6:	80 33       	cpi	r24, 0x30	; 48
    2ae8:	69 f4       	brne	.+26     	; 0x2b04 <vfprintf+0xc4>
    2aea:	29 2d       	mov	r18, r9
    2aec:	21 60       	ori	r18, 0x01	; 1
    2aee:	2d c0       	rjmp	.+90     	; 0x2b4a <vfprintf+0x10a>
    2af0:	39 2d       	mov	r19, r9
    2af2:	32 60       	ori	r19, 0x02	; 2
    2af4:	93 2e       	mov	r9, r19
    2af6:	89 2d       	mov	r24, r9
    2af8:	84 60       	ori	r24, 0x04	; 4
    2afa:	98 2e       	mov	r9, r24
    2afc:	2a c0       	rjmp	.+84     	; 0x2b52 <vfprintf+0x112>
    2afe:	e9 2d       	mov	r30, r9
    2b00:	e8 60       	ori	r30, 0x08	; 8
    2b02:	15 c0       	rjmp	.+42     	; 0x2b2e <vfprintf+0xee>
    2b04:	97 fc       	sbrc	r9, 7
    2b06:	2d c0       	rjmp	.+90     	; 0x2b62 <vfprintf+0x122>
    2b08:	20 ed       	ldi	r18, 0xD0	; 208
    2b0a:	28 0f       	add	r18, r24
    2b0c:	2a 30       	cpi	r18, 0x0A	; 10
    2b0e:	88 f4       	brcc	.+34     	; 0x2b32 <vfprintf+0xf2>
    2b10:	96 fe       	sbrs	r9, 6
    2b12:	06 c0       	rjmp	.+12     	; 0x2b20 <vfprintf+0xe0>
    2b14:	3a e0       	ldi	r19, 0x0A	; 10
    2b16:	13 9f       	mul	r17, r19
    2b18:	20 0d       	add	r18, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	12 2f       	mov	r17, r18
    2b1e:	19 c0       	rjmp	.+50     	; 0x2b52 <vfprintf+0x112>
    2b20:	8a e0       	ldi	r24, 0x0A	; 10
    2b22:	58 9e       	mul	r5, r24
    2b24:	20 0d       	add	r18, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	52 2e       	mov	r5, r18
    2b2a:	e9 2d       	mov	r30, r9
    2b2c:	e0 62       	ori	r30, 0x20	; 32
    2b2e:	9e 2e       	mov	r9, r30
    2b30:	10 c0       	rjmp	.+32     	; 0x2b52 <vfprintf+0x112>
    2b32:	8e 32       	cpi	r24, 0x2E	; 46
    2b34:	31 f4       	brne	.+12     	; 0x2b42 <vfprintf+0x102>
    2b36:	96 fc       	sbrc	r9, 6
    2b38:	cc c2       	rjmp	.+1432   	; 0x30d2 <vfprintf+0x692>
    2b3a:	f9 2d       	mov	r31, r9
    2b3c:	f0 64       	ori	r31, 0x40	; 64
    2b3e:	9f 2e       	mov	r9, r31
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <vfprintf+0x112>
    2b42:	8c 36       	cpi	r24, 0x6C	; 108
    2b44:	21 f4       	brne	.+8      	; 0x2b4e <vfprintf+0x10e>
    2b46:	29 2d       	mov	r18, r9
    2b48:	20 68       	ori	r18, 0x80	; 128
    2b4a:	92 2e       	mov	r9, r18
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <vfprintf+0x112>
    2b4e:	88 36       	cpi	r24, 0x68	; 104
    2b50:	41 f4       	brne	.+16     	; 0x2b62 <vfprintf+0x122>
    2b52:	f1 01       	movw	r30, r2
    2b54:	93 fd       	sbrc	r25, 3
    2b56:	85 91       	lpm	r24, Z+
    2b58:	93 ff       	sbrs	r25, 3
    2b5a:	81 91       	ld	r24, Z+
    2b5c:	1f 01       	movw	r2, r30
    2b5e:	81 11       	cpse	r24, r1
    2b60:	b3 cf       	rjmp	.-154    	; 0x2ac8 <vfprintf+0x88>
    2b62:	9b eb       	ldi	r25, 0xBB	; 187
    2b64:	98 0f       	add	r25, r24
    2b66:	93 30       	cpi	r25, 0x03	; 3
    2b68:	20 f4       	brcc	.+8      	; 0x2b72 <vfprintf+0x132>
    2b6a:	99 2d       	mov	r25, r9
    2b6c:	90 61       	ori	r25, 0x10	; 16
    2b6e:	80 5e       	subi	r24, 0xE0	; 224
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <vfprintf+0x140>
    2b72:	9b e9       	ldi	r25, 0x9B	; 155
    2b74:	98 0f       	add	r25, r24
    2b76:	93 30       	cpi	r25, 0x03	; 3
    2b78:	08 f0       	brcs	.+2      	; 0x2b7c <vfprintf+0x13c>
    2b7a:	59 c1       	rjmp	.+690    	; 0x2e2e <vfprintf+0x3ee>
    2b7c:	99 2d       	mov	r25, r9
    2b7e:	9f 7e       	andi	r25, 0xEF	; 239
    2b80:	96 ff       	sbrs	r25, 6
    2b82:	16 e0       	ldi	r17, 0x06	; 6
    2b84:	9f 73       	andi	r25, 0x3F	; 63
    2b86:	99 2e       	mov	r9, r25
    2b88:	85 36       	cpi	r24, 0x65	; 101
    2b8a:	19 f4       	brne	.+6      	; 0x2b92 <vfprintf+0x152>
    2b8c:	90 64       	ori	r25, 0x40	; 64
    2b8e:	99 2e       	mov	r9, r25
    2b90:	08 c0       	rjmp	.+16     	; 0x2ba2 <vfprintf+0x162>
    2b92:	86 36       	cpi	r24, 0x66	; 102
    2b94:	21 f4       	brne	.+8      	; 0x2b9e <vfprintf+0x15e>
    2b96:	39 2f       	mov	r19, r25
    2b98:	30 68       	ori	r19, 0x80	; 128
    2b9a:	93 2e       	mov	r9, r19
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <vfprintf+0x162>
    2b9e:	11 11       	cpse	r17, r1
    2ba0:	11 50       	subi	r17, 0x01	; 1
    2ba2:	97 fe       	sbrs	r9, 7
    2ba4:	07 c0       	rjmp	.+14     	; 0x2bb4 <vfprintf+0x174>
    2ba6:	1c 33       	cpi	r17, 0x3C	; 60
    2ba8:	50 f4       	brcc	.+20     	; 0x2bbe <vfprintf+0x17e>
    2baa:	44 24       	eor	r4, r4
    2bac:	43 94       	inc	r4
    2bae:	41 0e       	add	r4, r17
    2bb0:	27 e0       	ldi	r18, 0x07	; 7
    2bb2:	0b c0       	rjmp	.+22     	; 0x2bca <vfprintf+0x18a>
    2bb4:	18 30       	cpi	r17, 0x08	; 8
    2bb6:	38 f0       	brcs	.+14     	; 0x2bc6 <vfprintf+0x186>
    2bb8:	27 e0       	ldi	r18, 0x07	; 7
    2bba:	17 e0       	ldi	r17, 0x07	; 7
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <vfprintf+0x188>
    2bbe:	27 e0       	ldi	r18, 0x07	; 7
    2bc0:	9c e3       	ldi	r25, 0x3C	; 60
    2bc2:	49 2e       	mov	r4, r25
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <vfprintf+0x18a>
    2bc6:	21 2f       	mov	r18, r17
    2bc8:	41 2c       	mov	r4, r1
    2bca:	56 01       	movw	r10, r12
    2bcc:	84 e0       	ldi	r24, 0x04	; 4
    2bce:	a8 0e       	add	r10, r24
    2bd0:	b1 1c       	adc	r11, r1
    2bd2:	f6 01       	movw	r30, r12
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	04 2d       	mov	r16, r4
    2bde:	a3 01       	movw	r20, r6
    2be0:	c0 d4       	rcall	.+2432   	; 0x3562 <__ftoa_engine>
    2be2:	6c 01       	movw	r12, r24
    2be4:	f9 81       	ldd	r31, Y+1	; 0x01
    2be6:	fc 87       	std	Y+12, r31	; 0x0c
    2be8:	f0 ff       	sbrs	r31, 0
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <vfprintf+0x1b0>
    2bec:	f3 ff       	sbrs	r31, 3
    2bee:	06 c0       	rjmp	.+12     	; 0x2bfc <vfprintf+0x1bc>
    2bf0:	91 fc       	sbrc	r9, 1
    2bf2:	06 c0       	rjmp	.+12     	; 0x2c00 <vfprintf+0x1c0>
    2bf4:	92 fe       	sbrs	r9, 2
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <vfprintf+0x1c4>
    2bf8:	00 e2       	ldi	r16, 0x20	; 32
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <vfprintf+0x1c6>
    2bfc:	0d e2       	ldi	r16, 0x2D	; 45
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <vfprintf+0x1c6>
    2c00:	0b e2       	ldi	r16, 0x2B	; 43
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <vfprintf+0x1c6>
    2c04:	00 e0       	ldi	r16, 0x00	; 0
    2c06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c08:	8c 70       	andi	r24, 0x0C	; 12
    2c0a:	19 f0       	breq	.+6      	; 0x2c12 <vfprintf+0x1d2>
    2c0c:	01 11       	cpse	r16, r1
    2c0e:	43 c2       	rjmp	.+1158   	; 0x3096 <vfprintf+0x656>
    2c10:	80 c2       	rjmp	.+1280   	; 0x3112 <vfprintf+0x6d2>
    2c12:	97 fe       	sbrs	r9, 7
    2c14:	10 c0       	rjmp	.+32     	; 0x2c36 <vfprintf+0x1f6>
    2c16:	4c 0c       	add	r4, r12
    2c18:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c1a:	f4 ff       	sbrs	r31, 4
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <vfprintf+0x1e6>
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	81 33       	cpi	r24, 0x31	; 49
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <vfprintf+0x1e6>
    2c24:	4a 94       	dec	r4
    2c26:	14 14       	cp	r1, r4
    2c28:	74 f5       	brge	.+92     	; 0x2c86 <vfprintf+0x246>
    2c2a:	28 e0       	ldi	r18, 0x08	; 8
    2c2c:	24 15       	cp	r18, r4
    2c2e:	78 f5       	brcc	.+94     	; 0x2c8e <vfprintf+0x24e>
    2c30:	88 e0       	ldi	r24, 0x08	; 8
    2c32:	48 2e       	mov	r4, r24
    2c34:	2c c0       	rjmp	.+88     	; 0x2c8e <vfprintf+0x24e>
    2c36:	96 fc       	sbrc	r9, 6
    2c38:	2a c0       	rjmp	.+84     	; 0x2c8e <vfprintf+0x24e>
    2c3a:	81 2f       	mov	r24, r17
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	8c 15       	cp	r24, r12
    2c40:	9d 05       	cpc	r25, r13
    2c42:	9c f0       	brlt	.+38     	; 0x2c6a <vfprintf+0x22a>
    2c44:	3c ef       	ldi	r19, 0xFC	; 252
    2c46:	c3 16       	cp	r12, r19
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	d3 06       	cpc	r13, r19
    2c4c:	74 f0       	brlt	.+28     	; 0x2c6a <vfprintf+0x22a>
    2c4e:	89 2d       	mov	r24, r9
    2c50:	80 68       	ori	r24, 0x80	; 128
    2c52:	98 2e       	mov	r9, r24
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <vfprintf+0x22a>
    2c56:	e2 e0       	ldi	r30, 0x02	; 2
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	ec 0f       	add	r30, r28
    2c5c:	fd 1f       	adc	r31, r29
    2c5e:	e1 0f       	add	r30, r17
    2c60:	f1 1d       	adc	r31, r1
    2c62:	80 81       	ld	r24, Z
    2c64:	80 33       	cpi	r24, 0x30	; 48
    2c66:	19 f4       	brne	.+6      	; 0x2c6e <vfprintf+0x22e>
    2c68:	11 50       	subi	r17, 0x01	; 1
    2c6a:	11 11       	cpse	r17, r1
    2c6c:	f4 cf       	rjmp	.-24     	; 0x2c56 <vfprintf+0x216>
    2c6e:	97 fe       	sbrs	r9, 7
    2c70:	0e c0       	rjmp	.+28     	; 0x2c8e <vfprintf+0x24e>
    2c72:	44 24       	eor	r4, r4
    2c74:	43 94       	inc	r4
    2c76:	41 0e       	add	r4, r17
    2c78:	81 2f       	mov	r24, r17
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	c8 16       	cp	r12, r24
    2c7e:	d9 06       	cpc	r13, r25
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <vfprintf+0x24c>
    2c82:	1c 19       	sub	r17, r12
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <vfprintf+0x24e>
    2c86:	44 24       	eor	r4, r4
    2c88:	43 94       	inc	r4
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <vfprintf+0x24e>
    2c8c:	10 e0       	ldi	r17, 0x00	; 0
    2c8e:	97 fe       	sbrs	r9, 7
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x25e>
    2c92:	1c 14       	cp	r1, r12
    2c94:	1d 04       	cpc	r1, r13
    2c96:	34 f4       	brge	.+12     	; 0x2ca4 <vfprintf+0x264>
    2c98:	c6 01       	movw	r24, r12
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	05 c0       	rjmp	.+10     	; 0x2ca8 <vfprintf+0x268>
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <vfprintf+0x268>
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	01 11       	cpse	r16, r1
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	11 23       	and	r17, r17
    2cae:	31 f0       	breq	.+12     	; 0x2cbc <vfprintf+0x27c>
    2cb0:	21 2f       	mov	r18, r17
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	2f 5f       	subi	r18, 0xFF	; 255
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	82 0f       	add	r24, r18
    2cba:	93 1f       	adc	r25, r19
    2cbc:	25 2d       	mov	r18, r5
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	82 17       	cp	r24, r18
    2cc2:	93 07       	cpc	r25, r19
    2cc4:	14 f4       	brge	.+4      	; 0x2cca <vfprintf+0x28a>
    2cc6:	58 1a       	sub	r5, r24
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <vfprintf+0x28c>
    2cca:	51 2c       	mov	r5, r1
    2ccc:	89 2d       	mov	r24, r9
    2cce:	89 70       	andi	r24, 0x09	; 9
    2cd0:	41 f4       	brne	.+16     	; 0x2ce2 <vfprintf+0x2a2>
    2cd2:	55 20       	and	r5, r5
    2cd4:	31 f0       	breq	.+12     	; 0x2ce2 <vfprintf+0x2a2>
    2cd6:	b7 01       	movw	r22, r14
    2cd8:	80 e2       	ldi	r24, 0x20	; 32
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	39 d5       	rcall	.+2674   	; 0x3750 <fputc>
    2cde:	5a 94       	dec	r5
    2ce0:	f8 cf       	rjmp	.-16     	; 0x2cd2 <vfprintf+0x292>
    2ce2:	00 23       	and	r16, r16
    2ce4:	21 f0       	breq	.+8      	; 0x2cee <vfprintf+0x2ae>
    2ce6:	b7 01       	movw	r22, r14
    2ce8:	80 2f       	mov	r24, r16
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	31 d5       	rcall	.+2658   	; 0x3750 <fputc>
    2cee:	93 fc       	sbrc	r9, 3
    2cf0:	08 c0       	rjmp	.+16     	; 0x2d02 <vfprintf+0x2c2>
    2cf2:	55 20       	and	r5, r5
    2cf4:	31 f0       	breq	.+12     	; 0x2d02 <vfprintf+0x2c2>
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	80 e3       	ldi	r24, 0x30	; 48
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	29 d5       	rcall	.+2642   	; 0x3750 <fputc>
    2cfe:	5a 94       	dec	r5
    2d00:	f8 cf       	rjmp	.-16     	; 0x2cf2 <vfprintf+0x2b2>
    2d02:	97 fe       	sbrs	r9, 7
    2d04:	4a c0       	rjmp	.+148    	; 0x2d9a <vfprintf+0x35a>
    2d06:	46 01       	movw	r8, r12
    2d08:	d7 fe       	sbrs	r13, 7
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <vfprintf+0x2d0>
    2d0c:	81 2c       	mov	r8, r1
    2d0e:	91 2c       	mov	r9, r1
    2d10:	c6 01       	movw	r24, r12
    2d12:	88 19       	sub	r24, r8
    2d14:	99 09       	sbc	r25, r9
    2d16:	f3 01       	movw	r30, r6
    2d18:	e8 0f       	add	r30, r24
    2d1a:	f9 1f       	adc	r31, r25
    2d1c:	fe 87       	std	Y+14, r31	; 0x0e
    2d1e:	ed 87       	std	Y+13, r30	; 0x0d
    2d20:	96 01       	movw	r18, r12
    2d22:	24 19       	sub	r18, r4
    2d24:	31 09       	sbc	r19, r1
    2d26:	38 8b       	std	Y+16, r19	; 0x10
    2d28:	2f 87       	std	Y+15, r18	; 0x0f
    2d2a:	01 2f       	mov	r16, r17
    2d2c:	10 e0       	ldi	r17, 0x00	; 0
    2d2e:	11 95       	neg	r17
    2d30:	01 95       	neg	r16
    2d32:	11 09       	sbc	r17, r1
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	83 16       	cp	r8, r19
    2d38:	93 06       	cpc	r9, r19
    2d3a:	21 f4       	brne	.+8      	; 0x2d44 <vfprintf+0x304>
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	8e e2       	ldi	r24, 0x2E	; 46
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	06 d5       	rcall	.+2572   	; 0x3750 <fputc>
    2d44:	c8 14       	cp	r12, r8
    2d46:	d9 04       	cpc	r13, r9
    2d48:	4c f0       	brlt	.+18     	; 0x2d5c <vfprintf+0x31c>
    2d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4c:	98 89       	ldd	r25, Y+16	; 0x10
    2d4e:	88 15       	cp	r24, r8
    2d50:	99 05       	cpc	r25, r9
    2d52:	24 f4       	brge	.+8      	; 0x2d5c <vfprintf+0x31c>
    2d54:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d56:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d58:	81 81       	ldd	r24, Z+1	; 0x01
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <vfprintf+0x31e>
    2d5c:	80 e3       	ldi	r24, 0x30	; 48
    2d5e:	f1 e0       	ldi	r31, 0x01	; 1
    2d60:	8f 1a       	sub	r8, r31
    2d62:	91 08       	sbc	r9, r1
    2d64:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d66:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	3e 87       	std	Y+14, r19	; 0x0e
    2d6e:	2d 87       	std	Y+13, r18	; 0x0d
    2d70:	80 16       	cp	r8, r16
    2d72:	91 06       	cpc	r9, r17
    2d74:	24 f0       	brlt	.+8      	; 0x2d7e <vfprintf+0x33e>
    2d76:	b7 01       	movw	r22, r14
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	ea d4       	rcall	.+2516   	; 0x3750 <fputc>
    2d7c:	db cf       	rjmp	.-74     	; 0x2d34 <vfprintf+0x2f4>
    2d7e:	c8 14       	cp	r12, r8
    2d80:	d9 04       	cpc	r13, r9
    2d82:	41 f4       	brne	.+16     	; 0x2d94 <vfprintf+0x354>
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	96 33       	cpi	r25, 0x36	; 54
    2d88:	20 f4       	brcc	.+8      	; 0x2d92 <vfprintf+0x352>
    2d8a:	95 33       	cpi	r25, 0x35	; 53
    2d8c:	19 f4       	brne	.+6      	; 0x2d94 <vfprintf+0x354>
    2d8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d90:	34 ff       	sbrs	r19, 4
    2d92:	81 e3       	ldi	r24, 0x31	; 49
    2d94:	b7 01       	movw	r22, r14
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	48 c0       	rjmp	.+144    	; 0x2e2a <vfprintf+0x3ea>
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	81 33       	cpi	r24, 0x31	; 49
    2d9e:	19 f0       	breq	.+6      	; 0x2da6 <vfprintf+0x366>
    2da0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da2:	9f 7e       	andi	r25, 0xEF	; 239
    2da4:	9c 87       	std	Y+12, r25	; 0x0c
    2da6:	b7 01       	movw	r22, r14
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	d2 d4       	rcall	.+2468   	; 0x3750 <fputc>
    2dac:	11 11       	cpse	r17, r1
    2dae:	05 c0       	rjmp	.+10     	; 0x2dba <vfprintf+0x37a>
    2db0:	94 fc       	sbrc	r9, 4
    2db2:	16 c0       	rjmp	.+44     	; 0x2de0 <vfprintf+0x3a0>
    2db4:	85 e6       	ldi	r24, 0x65	; 101
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	15 c0       	rjmp	.+42     	; 0x2de4 <vfprintf+0x3a4>
    2dba:	b7 01       	movw	r22, r14
    2dbc:	8e e2       	ldi	r24, 0x2E	; 46
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	c7 d4       	rcall	.+2446   	; 0x3750 <fputc>
    2dc2:	1e 5f       	subi	r17, 0xFE	; 254
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	01 e0       	ldi	r16, 0x01	; 1
    2dc8:	08 0f       	add	r16, r24
    2dca:	f3 01       	movw	r30, r6
    2dcc:	e8 0f       	add	r30, r24
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	80 81       	ld	r24, Z
    2dd2:	b7 01       	movw	r22, r14
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	bc d4       	rcall	.+2424   	; 0x3750 <fputc>
    2dd8:	80 2f       	mov	r24, r16
    2dda:	01 13       	cpse	r16, r17
    2ddc:	f4 cf       	rjmp	.-24     	; 0x2dc6 <vfprintf+0x386>
    2dde:	e8 cf       	rjmp	.-48     	; 0x2db0 <vfprintf+0x370>
    2de0:	85 e4       	ldi	r24, 0x45	; 69
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	b7 01       	movw	r22, r14
    2de6:	b4 d4       	rcall	.+2408   	; 0x3750 <fputc>
    2de8:	d7 fc       	sbrc	r13, 7
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <vfprintf+0x3b8>
    2dec:	c1 14       	cp	r12, r1
    2dee:	d1 04       	cpc	r13, r1
    2df0:	41 f4       	brne	.+16     	; 0x2e02 <vfprintf+0x3c2>
    2df2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2df4:	e4 ff       	sbrs	r30, 4
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <vfprintf+0x3c2>
    2df8:	d1 94       	neg	r13
    2dfa:	c1 94       	neg	r12
    2dfc:	d1 08       	sbc	r13, r1
    2dfe:	8d e2       	ldi	r24, 0x2D	; 45
    2e00:	01 c0       	rjmp	.+2      	; 0x2e04 <vfprintf+0x3c4>
    2e02:	8b e2       	ldi	r24, 0x2B	; 43
    2e04:	b7 01       	movw	r22, r14
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a3 d4       	rcall	.+2374   	; 0x3750 <fputc>
    2e0a:	80 e3       	ldi	r24, 0x30	; 48
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	c2 16       	cp	r12, r18
    2e10:	d1 04       	cpc	r13, r1
    2e12:	2c f0       	brlt	.+10     	; 0x2e1e <vfprintf+0x3de>
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	fa e0       	ldi	r31, 0x0A	; 10
    2e18:	cf 1a       	sub	r12, r31
    2e1a:	d1 08       	sbc	r13, r1
    2e1c:	f7 cf       	rjmp	.-18     	; 0x2e0c <vfprintf+0x3cc>
    2e1e:	b7 01       	movw	r22, r14
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	96 d4       	rcall	.+2348   	; 0x3750 <fputc>
    2e24:	b7 01       	movw	r22, r14
    2e26:	c6 01       	movw	r24, r12
    2e28:	c0 96       	adiw	r24, 0x30	; 48
    2e2a:	92 d4       	rcall	.+2340   	; 0x3750 <fputc>
    2e2c:	49 c1       	rjmp	.+658    	; 0x30c0 <vfprintf+0x680>
    2e2e:	83 36       	cpi	r24, 0x63	; 99
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <vfprintf+0x3fe>
    2e32:	83 37       	cpi	r24, 0x73	; 115
    2e34:	79 f0       	breq	.+30     	; 0x2e54 <vfprintf+0x414>
    2e36:	83 35       	cpi	r24, 0x53	; 83
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <vfprintf+0x3fc>
    2e3a:	52 c0       	rjmp	.+164    	; 0x2ee0 <vfprintf+0x4a0>
    2e3c:	1f c0       	rjmp	.+62     	; 0x2e7c <vfprintf+0x43c>
    2e3e:	56 01       	movw	r10, r12
    2e40:	32 e0       	ldi	r19, 0x02	; 2
    2e42:	a3 0e       	add	r10, r19
    2e44:	b1 1c       	adc	r11, r1
    2e46:	f6 01       	movw	r30, r12
    2e48:	80 81       	ld	r24, Z
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	01 e0       	ldi	r16, 0x01	; 1
    2e4e:	10 e0       	ldi	r17, 0x00	; 0
    2e50:	63 01       	movw	r12, r6
    2e52:	11 c0       	rjmp	.+34     	; 0x2e76 <vfprintf+0x436>
    2e54:	56 01       	movw	r10, r12
    2e56:	f2 e0       	ldi	r31, 0x02	; 2
    2e58:	af 0e       	add	r10, r31
    2e5a:	b1 1c       	adc	r11, r1
    2e5c:	f6 01       	movw	r30, r12
    2e5e:	c0 80       	ld	r12, Z
    2e60:	d1 80       	ldd	r13, Z+1	; 0x01
    2e62:	96 fe       	sbrs	r9, 6
    2e64:	03 c0       	rjmp	.+6      	; 0x2e6c <vfprintf+0x42c>
    2e66:	61 2f       	mov	r22, r17
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <vfprintf+0x430>
    2e6c:	6f ef       	ldi	r22, 0xFF	; 255
    2e6e:	7f ef       	ldi	r23, 0xFF	; 255
    2e70:	c6 01       	movw	r24, r12
    2e72:	63 d4       	rcall	.+2246   	; 0x373a <strnlen>
    2e74:	8c 01       	movw	r16, r24
    2e76:	f9 2d       	mov	r31, r9
    2e78:	ff 77       	andi	r31, 0x7F	; 127
    2e7a:	13 c0       	rjmp	.+38     	; 0x2ea2 <vfprintf+0x462>
    2e7c:	56 01       	movw	r10, r12
    2e7e:	22 e0       	ldi	r18, 0x02	; 2
    2e80:	a2 0e       	add	r10, r18
    2e82:	b1 1c       	adc	r11, r1
    2e84:	f6 01       	movw	r30, r12
    2e86:	c0 80       	ld	r12, Z
    2e88:	d1 80       	ldd	r13, Z+1	; 0x01
    2e8a:	96 fe       	sbrs	r9, 6
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <vfprintf+0x454>
    2e8e:	61 2f       	mov	r22, r17
    2e90:	70 e0       	ldi	r23, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <vfprintf+0x458>
    2e94:	6f ef       	ldi	r22, 0xFF	; 255
    2e96:	7f ef       	ldi	r23, 0xFF	; 255
    2e98:	c6 01       	movw	r24, r12
    2e9a:	3b d4       	rcall	.+2166   	; 0x3712 <strnlen_P>
    2e9c:	8c 01       	movw	r16, r24
    2e9e:	f9 2d       	mov	r31, r9
    2ea0:	f0 68       	ori	r31, 0x80	; 128
    2ea2:	9f 2e       	mov	r9, r31
    2ea4:	f3 fd       	sbrc	r31, 3
    2ea6:	18 c0       	rjmp	.+48     	; 0x2ed8 <vfprintf+0x498>
    2ea8:	85 2d       	mov	r24, r5
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	08 17       	cp	r16, r24
    2eae:	19 07       	cpc	r17, r25
    2eb0:	98 f4       	brcc	.+38     	; 0x2ed8 <vfprintf+0x498>
    2eb2:	b7 01       	movw	r22, r14
    2eb4:	80 e2       	ldi	r24, 0x20	; 32
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	4b d4       	rcall	.+2198   	; 0x3750 <fputc>
    2eba:	5a 94       	dec	r5
    2ebc:	f5 cf       	rjmp	.-22     	; 0x2ea8 <vfprintf+0x468>
    2ebe:	f6 01       	movw	r30, r12
    2ec0:	97 fc       	sbrc	r9, 7
    2ec2:	85 91       	lpm	r24, Z+
    2ec4:	97 fe       	sbrs	r9, 7
    2ec6:	81 91       	ld	r24, Z+
    2ec8:	6f 01       	movw	r12, r30
    2eca:	b7 01       	movw	r22, r14
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	40 d4       	rcall	.+2176   	; 0x3750 <fputc>
    2ed0:	51 10       	cpse	r5, r1
    2ed2:	5a 94       	dec	r5
    2ed4:	01 50       	subi	r16, 0x01	; 1
    2ed6:	11 09       	sbc	r17, r1
    2ed8:	01 15       	cp	r16, r1
    2eda:	11 05       	cpc	r17, r1
    2edc:	81 f7       	brne	.-32     	; 0x2ebe <vfprintf+0x47e>
    2ede:	f0 c0       	rjmp	.+480    	; 0x30c0 <vfprintf+0x680>
    2ee0:	84 36       	cpi	r24, 0x64	; 100
    2ee2:	11 f0       	breq	.+4      	; 0x2ee8 <vfprintf+0x4a8>
    2ee4:	89 36       	cpi	r24, 0x69	; 105
    2ee6:	59 f5       	brne	.+86     	; 0x2f3e <vfprintf+0x4fe>
    2ee8:	56 01       	movw	r10, r12
    2eea:	97 fe       	sbrs	r9, 7
    2eec:	09 c0       	rjmp	.+18     	; 0x2f00 <vfprintf+0x4c0>
    2eee:	24 e0       	ldi	r18, 0x04	; 4
    2ef0:	a2 0e       	add	r10, r18
    2ef2:	b1 1c       	adc	r11, r1
    2ef4:	f6 01       	movw	r30, r12
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	93 81       	ldd	r25, Z+3	; 0x03
    2efe:	0a c0       	rjmp	.+20     	; 0x2f14 <vfprintf+0x4d4>
    2f00:	f2 e0       	ldi	r31, 0x02	; 2
    2f02:	af 0e       	add	r10, r31
    2f04:	b1 1c       	adc	r11, r1
    2f06:	f6 01       	movw	r30, r12
    2f08:	60 81       	ld	r22, Z
    2f0a:	71 81       	ldd	r23, Z+1	; 0x01
    2f0c:	07 2e       	mov	r0, r23
    2f0e:	00 0c       	add	r0, r0
    2f10:	88 0b       	sbc	r24, r24
    2f12:	99 0b       	sbc	r25, r25
    2f14:	f9 2d       	mov	r31, r9
    2f16:	ff 76       	andi	r31, 0x6F	; 111
    2f18:	9f 2e       	mov	r9, r31
    2f1a:	97 ff       	sbrs	r25, 7
    2f1c:	09 c0       	rjmp	.+18     	; 0x2f30 <vfprintf+0x4f0>
    2f1e:	90 95       	com	r25
    2f20:	80 95       	com	r24
    2f22:	70 95       	com	r23
    2f24:	61 95       	neg	r22
    2f26:	7f 4f       	sbci	r23, 0xFF	; 255
    2f28:	8f 4f       	sbci	r24, 0xFF	; 255
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	f0 68       	ori	r31, 0x80	; 128
    2f2e:	9f 2e       	mov	r9, r31
    2f30:	2a e0       	ldi	r18, 0x0A	; 10
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	a3 01       	movw	r20, r6
    2f36:	5b d4       	rcall	.+2230   	; 0x37ee <__ultoa_invert>
    2f38:	c8 2e       	mov	r12, r24
    2f3a:	c6 18       	sub	r12, r6
    2f3c:	3e c0       	rjmp	.+124    	; 0x2fba <vfprintf+0x57a>
    2f3e:	09 2d       	mov	r16, r9
    2f40:	85 37       	cpi	r24, 0x75	; 117
    2f42:	21 f4       	brne	.+8      	; 0x2f4c <vfprintf+0x50c>
    2f44:	0f 7e       	andi	r16, 0xEF	; 239
    2f46:	2a e0       	ldi	r18, 0x0A	; 10
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	1d c0       	rjmp	.+58     	; 0x2f86 <vfprintf+0x546>
    2f4c:	09 7f       	andi	r16, 0xF9	; 249
    2f4e:	8f 36       	cpi	r24, 0x6F	; 111
    2f50:	91 f0       	breq	.+36     	; 0x2f76 <vfprintf+0x536>
    2f52:	18 f4       	brcc	.+6      	; 0x2f5a <vfprintf+0x51a>
    2f54:	88 35       	cpi	r24, 0x58	; 88
    2f56:	59 f0       	breq	.+22     	; 0x2f6e <vfprintf+0x52e>
    2f58:	bc c0       	rjmp	.+376    	; 0x30d2 <vfprintf+0x692>
    2f5a:	80 37       	cpi	r24, 0x70	; 112
    2f5c:	19 f0       	breq	.+6      	; 0x2f64 <vfprintf+0x524>
    2f5e:	88 37       	cpi	r24, 0x78	; 120
    2f60:	11 f0       	breq	.+4      	; 0x2f66 <vfprintf+0x526>
    2f62:	b7 c0       	rjmp	.+366    	; 0x30d2 <vfprintf+0x692>
    2f64:	00 61       	ori	r16, 0x10	; 16
    2f66:	04 ff       	sbrs	r16, 4
    2f68:	09 c0       	rjmp	.+18     	; 0x2f7c <vfprintf+0x53c>
    2f6a:	04 60       	ori	r16, 0x04	; 4
    2f6c:	07 c0       	rjmp	.+14     	; 0x2f7c <vfprintf+0x53c>
    2f6e:	94 fe       	sbrs	r9, 4
    2f70:	08 c0       	rjmp	.+16     	; 0x2f82 <vfprintf+0x542>
    2f72:	06 60       	ori	r16, 0x06	; 6
    2f74:	06 c0       	rjmp	.+12     	; 0x2f82 <vfprintf+0x542>
    2f76:	28 e0       	ldi	r18, 0x08	; 8
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	05 c0       	rjmp	.+10     	; 0x2f86 <vfprintf+0x546>
    2f7c:	20 e1       	ldi	r18, 0x10	; 16
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <vfprintf+0x546>
    2f82:	20 e1       	ldi	r18, 0x10	; 16
    2f84:	32 e0       	ldi	r19, 0x02	; 2
    2f86:	56 01       	movw	r10, r12
    2f88:	07 ff       	sbrs	r16, 7
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <vfprintf+0x55e>
    2f8c:	84 e0       	ldi	r24, 0x04	; 4
    2f8e:	a8 0e       	add	r10, r24
    2f90:	b1 1c       	adc	r11, r1
    2f92:	f6 01       	movw	r30, r12
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	93 81       	ldd	r25, Z+3	; 0x03
    2f9c:	08 c0       	rjmp	.+16     	; 0x2fae <vfprintf+0x56e>
    2f9e:	f2 e0       	ldi	r31, 0x02	; 2
    2fa0:	af 0e       	add	r10, r31
    2fa2:	b1 1c       	adc	r11, r1
    2fa4:	f6 01       	movw	r30, r12
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a3 01       	movw	r20, r6
    2fb0:	1e d4       	rcall	.+2108   	; 0x37ee <__ultoa_invert>
    2fb2:	c8 2e       	mov	r12, r24
    2fb4:	c6 18       	sub	r12, r6
    2fb6:	0f 77       	andi	r16, 0x7F	; 127
    2fb8:	90 2e       	mov	r9, r16
    2fba:	96 fe       	sbrs	r9, 6
    2fbc:	0b c0       	rjmp	.+22     	; 0x2fd4 <vfprintf+0x594>
    2fbe:	09 2d       	mov	r16, r9
    2fc0:	0e 7f       	andi	r16, 0xFE	; 254
    2fc2:	c1 16       	cp	r12, r17
    2fc4:	50 f4       	brcc	.+20     	; 0x2fda <vfprintf+0x59a>
    2fc6:	94 fe       	sbrs	r9, 4
    2fc8:	0a c0       	rjmp	.+20     	; 0x2fde <vfprintf+0x59e>
    2fca:	92 fc       	sbrc	r9, 2
    2fcc:	08 c0       	rjmp	.+16     	; 0x2fde <vfprintf+0x59e>
    2fce:	09 2d       	mov	r16, r9
    2fd0:	0e 7e       	andi	r16, 0xEE	; 238
    2fd2:	05 c0       	rjmp	.+10     	; 0x2fde <vfprintf+0x59e>
    2fd4:	dc 2c       	mov	r13, r12
    2fd6:	09 2d       	mov	r16, r9
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <vfprintf+0x5a0>
    2fda:	dc 2c       	mov	r13, r12
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <vfprintf+0x5a0>
    2fde:	d1 2e       	mov	r13, r17
    2fe0:	04 ff       	sbrs	r16, 4
    2fe2:	0d c0       	rjmp	.+26     	; 0x2ffe <vfprintf+0x5be>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ec 0d       	add	r30, r12
    2fe8:	f1 1d       	adc	r31, r1
    2fea:	80 81       	ld	r24, Z
    2fec:	80 33       	cpi	r24, 0x30	; 48
    2fee:	11 f4       	brne	.+4      	; 0x2ff4 <vfprintf+0x5b4>
    2ff0:	09 7e       	andi	r16, 0xE9	; 233
    2ff2:	09 c0       	rjmp	.+18     	; 0x3006 <vfprintf+0x5c6>
    2ff4:	02 ff       	sbrs	r16, 2
    2ff6:	06 c0       	rjmp	.+12     	; 0x3004 <vfprintf+0x5c4>
    2ff8:	d3 94       	inc	r13
    2ffa:	d3 94       	inc	r13
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <vfprintf+0x5c6>
    2ffe:	80 2f       	mov	r24, r16
    3000:	86 78       	andi	r24, 0x86	; 134
    3002:	09 f0       	breq	.+2      	; 0x3006 <vfprintf+0x5c6>
    3004:	d3 94       	inc	r13
    3006:	03 fd       	sbrc	r16, 3
    3008:	10 c0       	rjmp	.+32     	; 0x302a <vfprintf+0x5ea>
    300a:	00 ff       	sbrs	r16, 0
    300c:	06 c0       	rjmp	.+12     	; 0x301a <vfprintf+0x5da>
    300e:	1c 2d       	mov	r17, r12
    3010:	d5 14       	cp	r13, r5
    3012:	78 f4       	brcc	.+30     	; 0x3032 <vfprintf+0x5f2>
    3014:	15 0d       	add	r17, r5
    3016:	1d 19       	sub	r17, r13
    3018:	0c c0       	rjmp	.+24     	; 0x3032 <vfprintf+0x5f2>
    301a:	d5 14       	cp	r13, r5
    301c:	50 f4       	brcc	.+20     	; 0x3032 <vfprintf+0x5f2>
    301e:	b7 01       	movw	r22, r14
    3020:	80 e2       	ldi	r24, 0x20	; 32
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	95 d3       	rcall	.+1834   	; 0x3750 <fputc>
    3026:	d3 94       	inc	r13
    3028:	f8 cf       	rjmp	.-16     	; 0x301a <vfprintf+0x5da>
    302a:	d5 14       	cp	r13, r5
    302c:	10 f4       	brcc	.+4      	; 0x3032 <vfprintf+0x5f2>
    302e:	5d 18       	sub	r5, r13
    3030:	01 c0       	rjmp	.+2      	; 0x3034 <vfprintf+0x5f4>
    3032:	51 2c       	mov	r5, r1
    3034:	04 ff       	sbrs	r16, 4
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <vfprintf+0x616>
    3038:	b7 01       	movw	r22, r14
    303a:	80 e3       	ldi	r24, 0x30	; 48
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	88 d3       	rcall	.+1808   	; 0x3750 <fputc>
    3040:	02 ff       	sbrs	r16, 2
    3042:	16 c0       	rjmp	.+44     	; 0x3070 <vfprintf+0x630>
    3044:	01 fd       	sbrc	r16, 1
    3046:	03 c0       	rjmp	.+6      	; 0x304e <vfprintf+0x60e>
    3048:	88 e7       	ldi	r24, 0x78	; 120
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vfprintf+0x612>
    304e:	88 e5       	ldi	r24, 0x58	; 88
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	b7 01       	movw	r22, r14
    3054:	0c c0       	rjmp	.+24     	; 0x306e <vfprintf+0x62e>
    3056:	80 2f       	mov	r24, r16
    3058:	86 78       	andi	r24, 0x86	; 134
    305a:	51 f0       	breq	.+20     	; 0x3070 <vfprintf+0x630>
    305c:	01 ff       	sbrs	r16, 1
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <vfprintf+0x624>
    3060:	8b e2       	ldi	r24, 0x2B	; 43
    3062:	01 c0       	rjmp	.+2      	; 0x3066 <vfprintf+0x626>
    3064:	80 e2       	ldi	r24, 0x20	; 32
    3066:	07 fd       	sbrc	r16, 7
    3068:	8d e2       	ldi	r24, 0x2D	; 45
    306a:	b7 01       	movw	r22, r14
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	70 d3       	rcall	.+1760   	; 0x3750 <fputc>
    3070:	c1 16       	cp	r12, r17
    3072:	30 f4       	brcc	.+12     	; 0x3080 <vfprintf+0x640>
    3074:	b7 01       	movw	r22, r14
    3076:	80 e3       	ldi	r24, 0x30	; 48
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	6a d3       	rcall	.+1748   	; 0x3750 <fputc>
    307c:	11 50       	subi	r17, 0x01	; 1
    307e:	f8 cf       	rjmp	.-16     	; 0x3070 <vfprintf+0x630>
    3080:	ca 94       	dec	r12
    3082:	f3 01       	movw	r30, r6
    3084:	ec 0d       	add	r30, r12
    3086:	f1 1d       	adc	r31, r1
    3088:	80 81       	ld	r24, Z
    308a:	b7 01       	movw	r22, r14
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	60 d3       	rcall	.+1728   	; 0x3750 <fputc>
    3090:	c1 10       	cpse	r12, r1
    3092:	f6 cf       	rjmp	.-20     	; 0x3080 <vfprintf+0x640>
    3094:	15 c0       	rjmp	.+42     	; 0x30c0 <vfprintf+0x680>
    3096:	f4 e0       	ldi	r31, 0x04	; 4
    3098:	f5 15       	cp	r31, r5
    309a:	50 f5       	brcc	.+84     	; 0x30f0 <vfprintf+0x6b0>
    309c:	84 e0       	ldi	r24, 0x04	; 4
    309e:	58 1a       	sub	r5, r24
    30a0:	93 fe       	sbrs	r9, 3
    30a2:	1e c0       	rjmp	.+60     	; 0x30e0 <vfprintf+0x6a0>
    30a4:	01 11       	cpse	r16, r1
    30a6:	25 c0       	rjmp	.+74     	; 0x30f2 <vfprintf+0x6b2>
    30a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    30aa:	23 ff       	sbrs	r18, 3
    30ac:	27 c0       	rjmp	.+78     	; 0x30fc <vfprintf+0x6bc>
    30ae:	00 e2       	ldi	r16, 0x20	; 32
    30b0:	11 e0       	ldi	r17, 0x01	; 1
    30b2:	39 2d       	mov	r19, r9
    30b4:	30 71       	andi	r19, 0x10	; 16
    30b6:	93 2e       	mov	r9, r19
    30b8:	f8 01       	movw	r30, r16
    30ba:	84 91       	lpm	r24, Z
    30bc:	81 11       	cpse	r24, r1
    30be:	21 c0       	rjmp	.+66     	; 0x3102 <vfprintf+0x6c2>
    30c0:	55 20       	and	r5, r5
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <vfprintf+0x686>
    30c4:	fc cc       	rjmp	.-1544   	; 0x2abe <vfprintf+0x7e>
    30c6:	b7 01       	movw	r22, r14
    30c8:	80 e2       	ldi	r24, 0x20	; 32
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	41 d3       	rcall	.+1666   	; 0x3750 <fputc>
    30ce:	5a 94       	dec	r5
    30d0:	f7 cf       	rjmp	.-18     	; 0x30c0 <vfprintf+0x680>
    30d2:	f7 01       	movw	r30, r14
    30d4:	86 81       	ldd	r24, Z+6	; 0x06
    30d6:	97 81       	ldd	r25, Z+7	; 0x07
    30d8:	23 c0       	rjmp	.+70     	; 0x3120 <vfprintf+0x6e0>
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	9f ef       	ldi	r25, 0xFF	; 255
    30de:	20 c0       	rjmp	.+64     	; 0x3120 <vfprintf+0x6e0>
    30e0:	b7 01       	movw	r22, r14
    30e2:	80 e2       	ldi	r24, 0x20	; 32
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	34 d3       	rcall	.+1640   	; 0x3750 <fputc>
    30e8:	5a 94       	dec	r5
    30ea:	51 10       	cpse	r5, r1
    30ec:	f9 cf       	rjmp	.-14     	; 0x30e0 <vfprintf+0x6a0>
    30ee:	da cf       	rjmp	.-76     	; 0x30a4 <vfprintf+0x664>
    30f0:	51 2c       	mov	r5, r1
    30f2:	b7 01       	movw	r22, r14
    30f4:	80 2f       	mov	r24, r16
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	2b d3       	rcall	.+1622   	; 0x3750 <fputc>
    30fa:	d6 cf       	rjmp	.-84     	; 0x30a8 <vfprintf+0x668>
    30fc:	04 e2       	ldi	r16, 0x24	; 36
    30fe:	11 e0       	ldi	r17, 0x01	; 1
    3100:	d8 cf       	rjmp	.-80     	; 0x30b2 <vfprintf+0x672>
    3102:	91 10       	cpse	r9, r1
    3104:	80 52       	subi	r24, 0x20	; 32
    3106:	b7 01       	movw	r22, r14
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	22 d3       	rcall	.+1604   	; 0x3750 <fputc>
    310c:	0f 5f       	subi	r16, 0xFF	; 255
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	d3 cf       	rjmp	.-90     	; 0x30b8 <vfprintf+0x678>
    3112:	23 e0       	ldi	r18, 0x03	; 3
    3114:	25 15       	cp	r18, r5
    3116:	10 f4       	brcc	.+4      	; 0x311c <vfprintf+0x6dc>
    3118:	83 e0       	ldi	r24, 0x03	; 3
    311a:	c1 cf       	rjmp	.-126    	; 0x309e <vfprintf+0x65e>
    311c:	51 2c       	mov	r5, r1
    311e:	c4 cf       	rjmp	.-120    	; 0x30a8 <vfprintf+0x668>
    3120:	60 96       	adiw	r28, 0x10	; 16
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	9f 90       	pop	r9
    3142:	8f 90       	pop	r8
    3144:	7f 90       	pop	r7
    3146:	6f 90       	pop	r6
    3148:	5f 90       	pop	r5
    314a:	4f 90       	pop	r4
    314c:	3f 90       	pop	r3
    314e:	2f 90       	pop	r2
    3150:	08 95       	ret

00003152 <__udivmodsi4>:
    3152:	a1 e2       	ldi	r26, 0x21	; 33
    3154:	1a 2e       	mov	r1, r26
    3156:	aa 1b       	sub	r26, r26
    3158:	bb 1b       	sub	r27, r27
    315a:	fd 01       	movw	r30, r26
    315c:	0d c0       	rjmp	.+26     	; 0x3178 <__udivmodsi4_ep>

0000315e <__udivmodsi4_loop>:
    315e:	aa 1f       	adc	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	ee 1f       	adc	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	a2 17       	cp	r26, r18
    3168:	b3 07       	cpc	r27, r19
    316a:	e4 07       	cpc	r30, r20
    316c:	f5 07       	cpc	r31, r21
    316e:	20 f0       	brcs	.+8      	; 0x3178 <__udivmodsi4_ep>
    3170:	a2 1b       	sub	r26, r18
    3172:	b3 0b       	sbc	r27, r19
    3174:	e4 0b       	sbc	r30, r20
    3176:	f5 0b       	sbc	r31, r21

00003178 <__udivmodsi4_ep>:
    3178:	66 1f       	adc	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	88 1f       	adc	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	1a 94       	dec	r1
    3182:	69 f7       	brne	.-38     	; 0x315e <__udivmodsi4_loop>
    3184:	60 95       	com	r22
    3186:	70 95       	com	r23
    3188:	80 95       	com	r24
    318a:	90 95       	com	r25
    318c:	9b 01       	movw	r18, r22
    318e:	ac 01       	movw	r20, r24
    3190:	bd 01       	movw	r22, r26
    3192:	cf 01       	movw	r24, r30
    3194:	08 95       	ret

00003196 <__umulhisi3>:
    3196:	a2 9f       	mul	r26, r18
    3198:	b0 01       	movw	r22, r0
    319a:	b3 9f       	mul	r27, r19
    319c:	c0 01       	movw	r24, r0
    319e:	a3 9f       	mul	r26, r19
    31a0:	70 0d       	add	r23, r0
    31a2:	81 1d       	adc	r24, r1
    31a4:	11 24       	eor	r1, r1
    31a6:	91 1d       	adc	r25, r1
    31a8:	b2 9f       	mul	r27, r18
    31aa:	70 0d       	add	r23, r0
    31ac:	81 1d       	adc	r24, r1
    31ae:	11 24       	eor	r1, r1
    31b0:	91 1d       	adc	r25, r1
    31b2:	08 95       	ret

000031b4 <__muldi3>:
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	1f 93       	push	r17
    31ba:	0f 93       	push	r16
    31bc:	9a 9d       	mul	r25, r10
    31be:	f0 2d       	mov	r31, r0
    31c0:	21 9f       	mul	r18, r17
    31c2:	f0 0d       	add	r31, r0
    31c4:	8b 9d       	mul	r24, r11
    31c6:	f0 0d       	add	r31, r0
    31c8:	8a 9d       	mul	r24, r10
    31ca:	e0 2d       	mov	r30, r0
    31cc:	f1 0d       	add	r31, r1
    31ce:	03 9f       	mul	r16, r19
    31d0:	f0 0d       	add	r31, r0
    31d2:	02 9f       	mul	r16, r18
    31d4:	e0 0d       	add	r30, r0
    31d6:	f1 1d       	adc	r31, r1
    31d8:	4e 9d       	mul	r20, r14
    31da:	e0 0d       	add	r30, r0
    31dc:	f1 1d       	adc	r31, r1
    31de:	5e 9d       	mul	r21, r14
    31e0:	f0 0d       	add	r31, r0
    31e2:	4f 9d       	mul	r20, r15
    31e4:	f0 0d       	add	r31, r0
    31e6:	7f 93       	push	r23
    31e8:	6f 93       	push	r22
    31ea:	bf 92       	push	r11
    31ec:	af 92       	push	r10
    31ee:	5f 93       	push	r21
    31f0:	4f 93       	push	r20
    31f2:	d5 01       	movw	r26, r10
    31f4:	d0 df       	rcall	.-96     	; 0x3196 <__umulhisi3>
    31f6:	8b 01       	movw	r16, r22
    31f8:	ac 01       	movw	r20, r24
    31fa:	d7 01       	movw	r26, r14
    31fc:	cc df       	rcall	.-104    	; 0x3196 <__umulhisi3>
    31fe:	eb 01       	movw	r28, r22
    3200:	e8 0f       	add	r30, r24
    3202:	f9 1f       	adc	r31, r25
    3204:	d6 01       	movw	r26, r12
    3206:	1f d0       	rcall	.+62     	; 0x3246 <__muldi3_6>
    3208:	2f 91       	pop	r18
    320a:	3f 91       	pop	r19
    320c:	d6 01       	movw	r26, r12
    320e:	c3 df       	rcall	.-122    	; 0x3196 <__umulhisi3>
    3210:	c6 0f       	add	r28, r22
    3212:	d7 1f       	adc	r29, r23
    3214:	e8 1f       	adc	r30, r24
    3216:	f9 1f       	adc	r31, r25
    3218:	af 91       	pop	r26
    321a:	bf 91       	pop	r27
    321c:	14 d0       	rcall	.+40     	; 0x3246 <__muldi3_6>
    321e:	2f 91       	pop	r18
    3220:	3f 91       	pop	r19
    3222:	b9 df       	rcall	.-142    	; 0x3196 <__umulhisi3>
    3224:	c6 0f       	add	r28, r22
    3226:	d7 1f       	adc	r29, r23
    3228:	e8 1f       	adc	r30, r24
    322a:	f9 1f       	adc	r31, r25
    322c:	d6 01       	movw	r26, r12
    322e:	b3 df       	rcall	.-154    	; 0x3196 <__umulhisi3>
    3230:	e6 0f       	add	r30, r22
    3232:	f7 1f       	adc	r31, r23
    3234:	98 01       	movw	r18, r16
    3236:	be 01       	movw	r22, r28
    3238:	cf 01       	movw	r24, r30
    323a:	11 24       	eor	r1, r1
    323c:	0f 91       	pop	r16
    323e:	1f 91       	pop	r17
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <__muldi3_6>:
    3246:	a7 df       	rcall	.-178    	; 0x3196 <__umulhisi3>
    3248:	46 0f       	add	r20, r22
    324a:	57 1f       	adc	r21, r23
    324c:	c8 1f       	adc	r28, r24
    324e:	d9 1f       	adc	r29, r25
    3250:	08 f4       	brcc	.+2      	; 0x3254 <__muldi3_6+0xe>
    3252:	31 96       	adiw	r30, 0x01	; 1
    3254:	08 95       	ret

00003256 <__moddi3>:
    3256:	68 94       	set
    3258:	01 c0       	rjmp	.+2      	; 0x325c <__divdi3_moddi3>

0000325a <__divdi3>:
    325a:	e8 94       	clt

0000325c <__divdi3_moddi3>:
    325c:	f9 2f       	mov	r31, r25
    325e:	f1 2b       	or	r31, r17
    3260:	0a f0       	brmi	.+2      	; 0x3264 <__divdi3_moddi3+0x8>
    3262:	27 c0       	rjmp	.+78     	; 0x32b2 <__udivdi3_umoddi3>
    3264:	a0 e0       	ldi	r26, 0x00	; 0
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e7 e3       	ldi	r30, 0x37	; 55
    326a:	f9 e1       	ldi	r31, 0x19	; 25
    326c:	93 c0       	rjmp	.+294    	; 0x3394 <__prologue_saves__+0xc>
    326e:	09 2e       	mov	r0, r25
    3270:	05 94       	asr	r0
    3272:	1a f4       	brpl	.+6      	; 0x327a <__divdi3_moddi3+0x1e>
    3274:	79 d0       	rcall	.+242    	; 0x3368 <__negdi2>
    3276:	11 23       	and	r17, r17
    3278:	92 f4       	brpl	.+36     	; 0x329e <__divdi3_moddi3+0x42>
    327a:	f0 e8       	ldi	r31, 0x80	; 128
    327c:	0f 26       	eor	r0, r31
    327e:	ff ef       	ldi	r31, 0xFF	; 255
    3280:	e0 94       	com	r14
    3282:	f0 94       	com	r15
    3284:	00 95       	com	r16
    3286:	10 95       	com	r17
    3288:	b0 94       	com	r11
    328a:	c0 94       	com	r12
    328c:	d0 94       	com	r13
    328e:	a1 94       	neg	r10
    3290:	bf 0a       	sbc	r11, r31
    3292:	cf 0a       	sbc	r12, r31
    3294:	df 0a       	sbc	r13, r31
    3296:	ef 0a       	sbc	r14, r31
    3298:	ff 0a       	sbc	r15, r31
    329a:	0f 0b       	sbc	r16, r31
    329c:	1f 0b       	sbc	r17, r31
    329e:	13 d0       	rcall	.+38     	; 0x32c6 <__udivmod64>
    32a0:	07 fc       	sbrc	r0, 7
    32a2:	62 d0       	rcall	.+196    	; 0x3368 <__negdi2>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	ec e0       	ldi	r30, 0x0C	; 12
    32aa:	90 c0       	rjmp	.+288    	; 0x33cc <__epilogue_restores__+0xc>

000032ac <__umoddi3>:
    32ac:	68 94       	set
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <__udivdi3_umoddi3>

000032b0 <__udivdi3>:
    32b0:	e8 94       	clt

000032b2 <__udivdi3_umoddi3>:
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	05 d0       	rcall	.+10     	; 0x32c6 <__udivmod64>
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	9f 90       	pop	r9
    32c2:	8f 90       	pop	r8
    32c4:	08 95       	ret

000032c6 <__udivmod64>:
    32c6:	88 24       	eor	r8, r8
    32c8:	99 24       	eor	r9, r9
    32ca:	f4 01       	movw	r30, r8
    32cc:	e4 01       	movw	r28, r8
    32ce:	b0 e4       	ldi	r27, 0x40	; 64
    32d0:	9f 93       	push	r25
    32d2:	aa 27       	eor	r26, r26
    32d4:	9a 15       	cp	r25, r10
    32d6:	8b 04       	cpc	r8, r11
    32d8:	9c 04       	cpc	r9, r12
    32da:	ed 05       	cpc	r30, r13
    32dc:	fe 05       	cpc	r31, r14
    32de:	cf 05       	cpc	r28, r15
    32e0:	d0 07       	cpc	r29, r16
    32e2:	a1 07       	cpc	r26, r17
    32e4:	98 f4       	brcc	.+38     	; 0x330c <__udivmod64+0x46>
    32e6:	ad 2f       	mov	r26, r29
    32e8:	dc 2f       	mov	r29, r28
    32ea:	cf 2f       	mov	r28, r31
    32ec:	fe 2f       	mov	r31, r30
    32ee:	e9 2d       	mov	r30, r9
    32f0:	98 2c       	mov	r9, r8
    32f2:	89 2e       	mov	r8, r25
    32f4:	98 2f       	mov	r25, r24
    32f6:	87 2f       	mov	r24, r23
    32f8:	76 2f       	mov	r23, r22
    32fa:	65 2f       	mov	r22, r21
    32fc:	54 2f       	mov	r21, r20
    32fe:	43 2f       	mov	r20, r19
    3300:	32 2f       	mov	r19, r18
    3302:	22 27       	eor	r18, r18
    3304:	b8 50       	subi	r27, 0x08	; 8
    3306:	31 f7       	brne	.-52     	; 0x32d4 <__udivmod64+0xe>
    3308:	bf 91       	pop	r27
    330a:	27 c0       	rjmp	.+78     	; 0x335a <__udivmod64+0x94>
    330c:	1b 2e       	mov	r1, r27
    330e:	bf 91       	pop	r27
    3310:	bb 27       	eor	r27, r27
    3312:	22 0f       	add	r18, r18
    3314:	33 1f       	adc	r19, r19
    3316:	44 1f       	adc	r20, r20
    3318:	55 1f       	adc	r21, r21
    331a:	66 1f       	adc	r22, r22
    331c:	77 1f       	adc	r23, r23
    331e:	88 1f       	adc	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	88 1c       	adc	r8, r8
    3324:	99 1c       	adc	r9, r9
    3326:	ee 1f       	adc	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	cc 1f       	adc	r28, r28
    332c:	dd 1f       	adc	r29, r29
    332e:	aa 1f       	adc	r26, r26
    3330:	bb 1f       	adc	r27, r27
    3332:	8a 14       	cp	r8, r10
    3334:	9b 04       	cpc	r9, r11
    3336:	ec 05       	cpc	r30, r12
    3338:	fd 05       	cpc	r31, r13
    333a:	ce 05       	cpc	r28, r14
    333c:	df 05       	cpc	r29, r15
    333e:	a0 07       	cpc	r26, r16
    3340:	b1 07       	cpc	r27, r17
    3342:	48 f0       	brcs	.+18     	; 0x3356 <__udivmod64+0x90>
    3344:	8a 18       	sub	r8, r10
    3346:	9b 08       	sbc	r9, r11
    3348:	ec 09       	sbc	r30, r12
    334a:	fd 09       	sbc	r31, r13
    334c:	ce 09       	sbc	r28, r14
    334e:	df 09       	sbc	r29, r15
    3350:	a0 0b       	sbc	r26, r16
    3352:	b1 0b       	sbc	r27, r17
    3354:	21 60       	ori	r18, 0x01	; 1
    3356:	1a 94       	dec	r1
    3358:	e1 f6       	brne	.-72     	; 0x3312 <__udivmod64+0x4c>
    335a:	2e f4       	brtc	.+10     	; 0x3366 <__udivmod64+0xa0>
    335c:	94 01       	movw	r18, r8
    335e:	af 01       	movw	r20, r30
    3360:	be 01       	movw	r22, r28
    3362:	cd 01       	movw	r24, r26
    3364:	00 0c       	add	r0, r0
    3366:	08 95       	ret

00003368 <__negdi2>:
    3368:	60 95       	com	r22
    336a:	70 95       	com	r23
    336c:	80 95       	com	r24
    336e:	90 95       	com	r25
    3370:	30 95       	com	r19
    3372:	40 95       	com	r20
    3374:	50 95       	com	r21
    3376:	21 95       	neg	r18
    3378:	3f 4f       	sbci	r19, 0xFF	; 255
    337a:	4f 4f       	sbci	r20, 0xFF	; 255
    337c:	5f 4f       	sbci	r21, 0xFF	; 255
    337e:	6f 4f       	sbci	r22, 0xFF	; 255
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	8f 4f       	sbci	r24, 0xFF	; 255
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	08 95       	ret

00003388 <__prologue_saves__>:
    3388:	2f 92       	push	r2
    338a:	3f 92       	push	r3
    338c:	4f 92       	push	r4
    338e:	5f 92       	push	r5
    3390:	6f 92       	push	r6
    3392:	7f 92       	push	r7
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	ca 1b       	sub	r28, r26
    33b2:	db 0b       	sbc	r29, r27
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	09 94       	ijmp

000033c0 <__epilogue_restores__>:
    33c0:	2a 88       	ldd	r2, Y+18	; 0x12
    33c2:	39 88       	ldd	r3, Y+17	; 0x11
    33c4:	48 88       	ldd	r4, Y+16	; 0x10
    33c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    33c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    33ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    33cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    33d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    33d2:	b9 84       	ldd	r11, Y+9	; 0x09
    33d4:	c8 84       	ldd	r12, Y+8	; 0x08
    33d6:	df 80       	ldd	r13, Y+7	; 0x07
    33d8:	ee 80       	ldd	r14, Y+6	; 0x06
    33da:	fd 80       	ldd	r15, Y+5	; 0x05
    33dc:	0c 81       	ldd	r16, Y+4	; 0x04
    33de:	1b 81       	ldd	r17, Y+3	; 0x03
    33e0:	aa 81       	ldd	r26, Y+2	; 0x02
    33e2:	b9 81       	ldd	r27, Y+1	; 0x01
    33e4:	ce 0f       	add	r28, r30
    33e6:	d1 1d       	adc	r29, r1
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	ed 01       	movw	r28, r26
    33f4:	08 95       	ret

000033f6 <__ashldi3>:
    33f6:	0f 93       	push	r16
    33f8:	08 30       	cpi	r16, 0x08	; 8
    33fa:	90 f0       	brcs	.+36     	; 0x3420 <__ashldi3+0x2a>
    33fc:	98 2f       	mov	r25, r24
    33fe:	87 2f       	mov	r24, r23
    3400:	76 2f       	mov	r23, r22
    3402:	65 2f       	mov	r22, r21
    3404:	54 2f       	mov	r21, r20
    3406:	43 2f       	mov	r20, r19
    3408:	32 2f       	mov	r19, r18
    340a:	22 27       	eor	r18, r18
    340c:	08 50       	subi	r16, 0x08	; 8
    340e:	f4 cf       	rjmp	.-24     	; 0x33f8 <__ashldi3+0x2>
    3410:	22 0f       	add	r18, r18
    3412:	33 1f       	adc	r19, r19
    3414:	44 1f       	adc	r20, r20
    3416:	55 1f       	adc	r21, r21
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	0a 95       	dec	r16
    3422:	b2 f7       	brpl	.-20     	; 0x3410 <__ashldi3+0x1a>
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <__ashrdi3>:
    3428:	97 fb       	bst	r25, 7
    342a:	10 f8       	bld	r1, 0

0000342c <__lshrdi3>:
    342c:	16 94       	lsr	r1
    342e:	00 08       	sbc	r0, r0
    3430:	0f 93       	push	r16
    3432:	08 30       	cpi	r16, 0x08	; 8
    3434:	98 f0       	brcs	.+38     	; 0x345c <__lshrdi3+0x30>
    3436:	08 50       	subi	r16, 0x08	; 8
    3438:	23 2f       	mov	r18, r19
    343a:	34 2f       	mov	r19, r20
    343c:	45 2f       	mov	r20, r21
    343e:	56 2f       	mov	r21, r22
    3440:	67 2f       	mov	r22, r23
    3442:	78 2f       	mov	r23, r24
    3444:	89 2f       	mov	r24, r25
    3446:	90 2d       	mov	r25, r0
    3448:	f4 cf       	rjmp	.-24     	; 0x3432 <__lshrdi3+0x6>
    344a:	05 94       	asr	r0
    344c:	97 95       	ror	r25
    344e:	87 95       	ror	r24
    3450:	77 95       	ror	r23
    3452:	67 95       	ror	r22
    3454:	57 95       	ror	r21
    3456:	47 95       	ror	r20
    3458:	37 95       	ror	r19
    345a:	27 95       	ror	r18
    345c:	0a 95       	dec	r16
    345e:	aa f7       	brpl	.-22     	; 0x344a <__lshrdi3+0x1e>
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <__adddi3>:
    3464:	2a 0d       	add	r18, r10
    3466:	3b 1d       	adc	r19, r11
    3468:	4c 1d       	adc	r20, r12
    346a:	5d 1d       	adc	r21, r13
    346c:	6e 1d       	adc	r22, r14
    346e:	7f 1d       	adc	r23, r15
    3470:	80 1f       	adc	r24, r16
    3472:	91 1f       	adc	r25, r17
    3474:	08 95       	ret

00003476 <__adddi3_s8>:
    3476:	00 24       	eor	r0, r0
    3478:	a7 fd       	sbrc	r26, 7
    347a:	00 94       	com	r0
    347c:	2a 0f       	add	r18, r26
    347e:	30 1d       	adc	r19, r0
    3480:	40 1d       	adc	r20, r0
    3482:	50 1d       	adc	r21, r0
    3484:	60 1d       	adc	r22, r0
    3486:	70 1d       	adc	r23, r0
    3488:	80 1d       	adc	r24, r0
    348a:	90 1d       	adc	r25, r0
    348c:	08 95       	ret

0000348e <__cmpdi2>:
    348e:	2a 15       	cp	r18, r10
    3490:	3b 05       	cpc	r19, r11
    3492:	4c 05       	cpc	r20, r12
    3494:	5d 05       	cpc	r21, r13
    3496:	6e 05       	cpc	r22, r14
    3498:	7f 05       	cpc	r23, r15
    349a:	80 07       	cpc	r24, r16
    349c:	91 07       	cpc	r25, r17
    349e:	08 95       	ret

000034a0 <__cmpdi2_s8>:
    34a0:	00 24       	eor	r0, r0
    34a2:	a7 fd       	sbrc	r26, 7
    34a4:	00 94       	com	r0
    34a6:	2a 17       	cp	r18, r26
    34a8:	30 05       	cpc	r19, r0
    34aa:	40 05       	cpc	r20, r0
    34ac:	50 05       	cpc	r21, r0
    34ae:	60 05       	cpc	r22, r0
    34b0:	70 05       	cpc	r23, r0
    34b2:	80 05       	cpc	r24, r0
    34b4:	90 05       	cpc	r25, r0
    34b6:	08 95       	ret

000034b8 <do_rand>:
    34b8:	8f 92       	push	r8
    34ba:	9f 92       	push	r9
    34bc:	af 92       	push	r10
    34be:	bf 92       	push	r11
    34c0:	cf 92       	push	r12
    34c2:	df 92       	push	r13
    34c4:	ef 92       	push	r14
    34c6:	ff 92       	push	r15
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	ec 01       	movw	r28, r24
    34ce:	68 81       	ld	r22, Y
    34d0:	79 81       	ldd	r23, Y+1	; 0x01
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	9b 81       	ldd	r25, Y+3	; 0x03
    34d6:	61 15       	cp	r22, r1
    34d8:	71 05       	cpc	r23, r1
    34da:	81 05       	cpc	r24, r1
    34dc:	91 05       	cpc	r25, r1
    34de:	21 f4       	brne	.+8      	; 0x34e8 <do_rand+0x30>
    34e0:	64 e2       	ldi	r22, 0x24	; 36
    34e2:	79 ed       	ldi	r23, 0xD9	; 217
    34e4:	8b e5       	ldi	r24, 0x5B	; 91
    34e6:	97 e0       	ldi	r25, 0x07	; 7
    34e8:	2d e1       	ldi	r18, 0x1D	; 29
    34ea:	33 ef       	ldi	r19, 0xF3	; 243
    34ec:	41 e0       	ldi	r20, 0x01	; 1
    34ee:	50 e0       	ldi	r21, 0x00	; 0
    34f0:	dc d1       	rcall	.+952    	; 0x38aa <__divmodsi4>
    34f2:	49 01       	movw	r8, r18
    34f4:	5a 01       	movw	r10, r20
    34f6:	9b 01       	movw	r18, r22
    34f8:	ac 01       	movw	r20, r24
    34fa:	a7 ea       	ldi	r26, 0xA7	; 167
    34fc:	b1 e4       	ldi	r27, 0x41	; 65
    34fe:	f1 d1       	rcall	.+994    	; 0x38e2 <__muluhisi3>
    3500:	6b 01       	movw	r12, r22
    3502:	7c 01       	movw	r14, r24
    3504:	ac ee       	ldi	r26, 0xEC	; 236
    3506:	b4 ef       	ldi	r27, 0xF4	; 244
    3508:	a5 01       	movw	r20, r10
    350a:	94 01       	movw	r18, r8
    350c:	f6 d1       	rcall	.+1004   	; 0x38fa <__mulohisi3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	8c 0d       	add	r24, r12
    3514:	9d 1d       	adc	r25, r13
    3516:	ae 1d       	adc	r26, r14
    3518:	bf 1d       	adc	r27, r15
    351a:	b7 ff       	sbrs	r27, 7
    351c:	03 c0       	rjmp	.+6      	; 0x3524 <do_rand+0x6c>
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	a1 09       	sbc	r26, r1
    3522:	b0 48       	sbci	r27, 0x80	; 128
    3524:	88 83       	st	Y, r24
    3526:	99 83       	std	Y+1, r25	; 0x01
    3528:	aa 83       	std	Y+2, r26	; 0x02
    352a:	bb 83       	std	Y+3, r27	; 0x03
    352c:	9f 77       	andi	r25, 0x7F	; 127
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	ff 90       	pop	r15
    3534:	ef 90       	pop	r14
    3536:	df 90       	pop	r13
    3538:	cf 90       	pop	r12
    353a:	bf 90       	pop	r11
    353c:	af 90       	pop	r10
    353e:	9f 90       	pop	r9
    3540:	8f 90       	pop	r8
    3542:	08 95       	ret

00003544 <rand_r>:
    3544:	b9 cf       	rjmp	.-142    	; 0x34b8 <do_rand>

00003546 <rand>:
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	92 e0       	ldi	r25, 0x02	; 2
    354a:	b6 cf       	rjmp	.-148    	; 0x34b8 <do_rand>

0000354c <srand>:
    354c:	a0 e0       	ldi	r26, 0x00	; 0
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    3554:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    3558:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    355c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    3560:	08 95       	ret

00003562 <__ftoa_engine>:
    3562:	28 30       	cpi	r18, 0x08	; 8
    3564:	08 f0       	brcs	.+2      	; 0x3568 <__ftoa_engine+0x6>
    3566:	27 e0       	ldi	r18, 0x07	; 7
    3568:	33 27       	eor	r19, r19
    356a:	da 01       	movw	r26, r20
    356c:	99 0f       	add	r25, r25
    356e:	31 1d       	adc	r19, r1
    3570:	87 fd       	sbrc	r24, 7
    3572:	91 60       	ori	r25, 0x01	; 1
    3574:	00 96       	adiw	r24, 0x00	; 0
    3576:	61 05       	cpc	r22, r1
    3578:	71 05       	cpc	r23, r1
    357a:	39 f4       	brne	.+14     	; 0x358a <__ftoa_engine+0x28>
    357c:	32 60       	ori	r19, 0x02	; 2
    357e:	2e 5f       	subi	r18, 0xFE	; 254
    3580:	3d 93       	st	X+, r19
    3582:	30 e3       	ldi	r19, 0x30	; 48
    3584:	2a 95       	dec	r18
    3586:	e1 f7       	brne	.-8      	; 0x3580 <__ftoa_engine+0x1e>
    3588:	08 95       	ret
    358a:	9f 3f       	cpi	r25, 0xFF	; 255
    358c:	30 f0       	brcs	.+12     	; 0x359a <__ftoa_engine+0x38>
    358e:	80 38       	cpi	r24, 0x80	; 128
    3590:	71 05       	cpc	r23, r1
    3592:	61 05       	cpc	r22, r1
    3594:	09 f0       	breq	.+2      	; 0x3598 <__ftoa_engine+0x36>
    3596:	3c 5f       	subi	r19, 0xFC	; 252
    3598:	3c 5f       	subi	r19, 0xFC	; 252
    359a:	3d 93       	st	X+, r19
    359c:	91 30       	cpi	r25, 0x01	; 1
    359e:	08 f0       	brcs	.+2      	; 0x35a2 <__ftoa_engine+0x40>
    35a0:	80 68       	ori	r24, 0x80	; 128
    35a2:	91 1d       	adc	r25, r1
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	1f 93       	push	r17
    35aa:	0f 93       	push	r16
    35ac:	ff 92       	push	r15
    35ae:	ef 92       	push	r14
    35b0:	19 2f       	mov	r17, r25
    35b2:	98 7f       	andi	r25, 0xF8	; 248
    35b4:	96 95       	lsr	r25
    35b6:	e9 2f       	mov	r30, r25
    35b8:	96 95       	lsr	r25
    35ba:	96 95       	lsr	r25
    35bc:	e9 0f       	add	r30, r25
    35be:	ff 27       	eor	r31, r31
    35c0:	ee 57       	subi	r30, 0x7E	; 126
    35c2:	fe 4f       	sbci	r31, 0xFE	; 254
    35c4:	99 27       	eor	r25, r25
    35c6:	33 27       	eor	r19, r19
    35c8:	ee 24       	eor	r14, r14
    35ca:	ff 24       	eor	r15, r15
    35cc:	a7 01       	movw	r20, r14
    35ce:	e7 01       	movw	r28, r14
    35d0:	05 90       	lpm	r0, Z+
    35d2:	08 94       	sec
    35d4:	07 94       	ror	r0
    35d6:	28 f4       	brcc	.+10     	; 0x35e2 <__ftoa_engine+0x80>
    35d8:	36 0f       	add	r19, r22
    35da:	e7 1e       	adc	r14, r23
    35dc:	f8 1e       	adc	r15, r24
    35de:	49 1f       	adc	r20, r25
    35e0:	51 1d       	adc	r21, r1
    35e2:	66 0f       	add	r22, r22
    35e4:	77 1f       	adc	r23, r23
    35e6:	88 1f       	adc	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	06 94       	lsr	r0
    35ec:	a1 f7       	brne	.-24     	; 0x35d6 <__ftoa_engine+0x74>
    35ee:	05 90       	lpm	r0, Z+
    35f0:	07 94       	ror	r0
    35f2:	28 f4       	brcc	.+10     	; 0x35fe <__ftoa_engine+0x9c>
    35f4:	e7 0e       	add	r14, r23
    35f6:	f8 1e       	adc	r15, r24
    35f8:	49 1f       	adc	r20, r25
    35fa:	56 1f       	adc	r21, r22
    35fc:	c1 1d       	adc	r28, r1
    35fe:	77 0f       	add	r23, r23
    3600:	88 1f       	adc	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	66 1f       	adc	r22, r22
    3606:	06 94       	lsr	r0
    3608:	a1 f7       	brne	.-24     	; 0x35f2 <__ftoa_engine+0x90>
    360a:	05 90       	lpm	r0, Z+
    360c:	07 94       	ror	r0
    360e:	28 f4       	brcc	.+10     	; 0x361a <__ftoa_engine+0xb8>
    3610:	f8 0e       	add	r15, r24
    3612:	49 1f       	adc	r20, r25
    3614:	56 1f       	adc	r21, r22
    3616:	c7 1f       	adc	r28, r23
    3618:	d1 1d       	adc	r29, r1
    361a:	88 0f       	add	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	66 1f       	adc	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	06 94       	lsr	r0
    3624:	a1 f7       	brne	.-24     	; 0x360e <__ftoa_engine+0xac>
    3626:	05 90       	lpm	r0, Z+
    3628:	07 94       	ror	r0
    362a:	20 f4       	brcc	.+8      	; 0x3634 <__ftoa_engine+0xd2>
    362c:	49 0f       	add	r20, r25
    362e:	56 1f       	adc	r21, r22
    3630:	c7 1f       	adc	r28, r23
    3632:	d8 1f       	adc	r29, r24
    3634:	99 0f       	add	r25, r25
    3636:	66 1f       	adc	r22, r22
    3638:	77 1f       	adc	r23, r23
    363a:	88 1f       	adc	r24, r24
    363c:	06 94       	lsr	r0
    363e:	a9 f7       	brne	.-22     	; 0x362a <__ftoa_engine+0xc8>
    3640:	84 91       	lpm	r24, Z
    3642:	10 95       	com	r17
    3644:	17 70       	andi	r17, 0x07	; 7
    3646:	41 f0       	breq	.+16     	; 0x3658 <__ftoa_engine+0xf6>
    3648:	d6 95       	lsr	r29
    364a:	c7 95       	ror	r28
    364c:	57 95       	ror	r21
    364e:	47 95       	ror	r20
    3650:	f7 94       	ror	r15
    3652:	e7 94       	ror	r14
    3654:	1a 95       	dec	r17
    3656:	c1 f7       	brne	.-16     	; 0x3648 <__ftoa_engine+0xe6>
    3658:	e8 e2       	ldi	r30, 0x28	; 40
    365a:	f1 e0       	ldi	r31, 0x01	; 1
    365c:	68 94       	set
    365e:	15 90       	lpm	r1, Z+
    3660:	15 91       	lpm	r17, Z+
    3662:	35 91       	lpm	r19, Z+
    3664:	65 91       	lpm	r22, Z+
    3666:	95 91       	lpm	r25, Z+
    3668:	05 90       	lpm	r0, Z+
    366a:	7f e2       	ldi	r23, 0x2F	; 47
    366c:	73 95       	inc	r23
    366e:	e1 18       	sub	r14, r1
    3670:	f1 0a       	sbc	r15, r17
    3672:	43 0b       	sbc	r20, r19
    3674:	56 0b       	sbc	r21, r22
    3676:	c9 0b       	sbc	r28, r25
    3678:	d0 09       	sbc	r29, r0
    367a:	c0 f7       	brcc	.-16     	; 0x366c <__ftoa_engine+0x10a>
    367c:	e1 0c       	add	r14, r1
    367e:	f1 1e       	adc	r15, r17
    3680:	43 1f       	adc	r20, r19
    3682:	56 1f       	adc	r21, r22
    3684:	c9 1f       	adc	r28, r25
    3686:	d0 1d       	adc	r29, r0
    3688:	7e f4       	brtc	.+30     	; 0x36a8 <__ftoa_engine+0x146>
    368a:	70 33       	cpi	r23, 0x30	; 48
    368c:	11 f4       	brne	.+4      	; 0x3692 <__ftoa_engine+0x130>
    368e:	8a 95       	dec	r24
    3690:	e6 cf       	rjmp	.-52     	; 0x365e <__ftoa_engine+0xfc>
    3692:	e8 94       	clt
    3694:	01 50       	subi	r16, 0x01	; 1
    3696:	30 f0       	brcs	.+12     	; 0x36a4 <__ftoa_engine+0x142>
    3698:	08 0f       	add	r16, r24
    369a:	0a f4       	brpl	.+2      	; 0x369e <__ftoa_engine+0x13c>
    369c:	00 27       	eor	r16, r16
    369e:	02 17       	cp	r16, r18
    36a0:	08 f4       	brcc	.+2      	; 0x36a4 <__ftoa_engine+0x142>
    36a2:	20 2f       	mov	r18, r16
    36a4:	23 95       	inc	r18
    36a6:	02 2f       	mov	r16, r18
    36a8:	7a 33       	cpi	r23, 0x3A	; 58
    36aa:	28 f0       	brcs	.+10     	; 0x36b6 <__ftoa_engine+0x154>
    36ac:	79 e3       	ldi	r23, 0x39	; 57
    36ae:	7d 93       	st	X+, r23
    36b0:	2a 95       	dec	r18
    36b2:	e9 f7       	brne	.-6      	; 0x36ae <__ftoa_engine+0x14c>
    36b4:	10 c0       	rjmp	.+32     	; 0x36d6 <__ftoa_engine+0x174>
    36b6:	7d 93       	st	X+, r23
    36b8:	2a 95       	dec	r18
    36ba:	89 f6       	brne	.-94     	; 0x365e <__ftoa_engine+0xfc>
    36bc:	06 94       	lsr	r0
    36be:	97 95       	ror	r25
    36c0:	67 95       	ror	r22
    36c2:	37 95       	ror	r19
    36c4:	17 95       	ror	r17
    36c6:	17 94       	ror	r1
    36c8:	e1 18       	sub	r14, r1
    36ca:	f1 0a       	sbc	r15, r17
    36cc:	43 0b       	sbc	r20, r19
    36ce:	56 0b       	sbc	r21, r22
    36d0:	c9 0b       	sbc	r28, r25
    36d2:	d0 09       	sbc	r29, r0
    36d4:	98 f0       	brcs	.+38     	; 0x36fc <__ftoa_engine+0x19a>
    36d6:	23 95       	inc	r18
    36d8:	7e 91       	ld	r23, -X
    36da:	73 95       	inc	r23
    36dc:	7a 33       	cpi	r23, 0x3A	; 58
    36de:	08 f0       	brcs	.+2      	; 0x36e2 <__ftoa_engine+0x180>
    36e0:	70 e3       	ldi	r23, 0x30	; 48
    36e2:	7c 93       	st	X, r23
    36e4:	20 13       	cpse	r18, r16
    36e6:	b8 f7       	brcc	.-18     	; 0x36d6 <__ftoa_engine+0x174>
    36e8:	7e 91       	ld	r23, -X
    36ea:	70 61       	ori	r23, 0x10	; 16
    36ec:	7d 93       	st	X+, r23
    36ee:	30 f0       	brcs	.+12     	; 0x36fc <__ftoa_engine+0x19a>
    36f0:	83 95       	inc	r24
    36f2:	71 e3       	ldi	r23, 0x31	; 49
    36f4:	7d 93       	st	X+, r23
    36f6:	70 e3       	ldi	r23, 0x30	; 48
    36f8:	2a 95       	dec	r18
    36fa:	e1 f7       	brne	.-8      	; 0x36f4 <__ftoa_engine+0x192>
    36fc:	11 24       	eor	r1, r1
    36fe:	ef 90       	pop	r14
    3700:	ff 90       	pop	r15
    3702:	0f 91       	pop	r16
    3704:	1f 91       	pop	r17
    3706:	cf 91       	pop	r28
    3708:	df 91       	pop	r29
    370a:	99 27       	eor	r25, r25
    370c:	87 fd       	sbrc	r24, 7
    370e:	90 95       	com	r25
    3710:	08 95       	ret

00003712 <strnlen_P>:
    3712:	fc 01       	movw	r30, r24
    3714:	05 90       	lpm	r0, Z+
    3716:	61 50       	subi	r22, 0x01	; 1
    3718:	70 40       	sbci	r23, 0x00	; 0
    371a:	01 10       	cpse	r0, r1
    371c:	d8 f7       	brcc	.-10     	; 0x3714 <strnlen_P+0x2>
    371e:	80 95       	com	r24
    3720:	90 95       	com	r25
    3722:	8e 0f       	add	r24, r30
    3724:	9f 1f       	adc	r25, r31
    3726:	08 95       	ret

00003728 <memcpy>:
    3728:	fb 01       	movw	r30, r22
    372a:	dc 01       	movw	r26, r24
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <memcpy+0xa>
    372e:	01 90       	ld	r0, Z+
    3730:	0d 92       	st	X+, r0
    3732:	41 50       	subi	r20, 0x01	; 1
    3734:	50 40       	sbci	r21, 0x00	; 0
    3736:	d8 f7       	brcc	.-10     	; 0x372e <memcpy+0x6>
    3738:	08 95       	ret

0000373a <strnlen>:
    373a:	fc 01       	movw	r30, r24
    373c:	61 50       	subi	r22, 0x01	; 1
    373e:	70 40       	sbci	r23, 0x00	; 0
    3740:	01 90       	ld	r0, Z+
    3742:	01 10       	cpse	r0, r1
    3744:	d8 f7       	brcc	.-10     	; 0x373c <strnlen+0x2>
    3746:	80 95       	com	r24
    3748:	90 95       	com	r25
    374a:	8e 0f       	add	r24, r30
    374c:	9f 1f       	adc	r25, r31
    374e:	08 95       	ret

00003750 <fputc>:
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	fb 01       	movw	r30, r22
    375a:	23 81       	ldd	r18, Z+3	; 0x03
    375c:	21 fd       	sbrc	r18, 1
    375e:	03 c0       	rjmp	.+6      	; 0x3766 <fputc+0x16>
    3760:	8f ef       	ldi	r24, 0xFF	; 255
    3762:	9f ef       	ldi	r25, 0xFF	; 255
    3764:	2c c0       	rjmp	.+88     	; 0x37be <fputc+0x6e>
    3766:	22 ff       	sbrs	r18, 2
    3768:	16 c0       	rjmp	.+44     	; 0x3796 <fputc+0x46>
    376a:	46 81       	ldd	r20, Z+6	; 0x06
    376c:	57 81       	ldd	r21, Z+7	; 0x07
    376e:	24 81       	ldd	r18, Z+4	; 0x04
    3770:	35 81       	ldd	r19, Z+5	; 0x05
    3772:	42 17       	cp	r20, r18
    3774:	53 07       	cpc	r21, r19
    3776:	44 f4       	brge	.+16     	; 0x3788 <fputc+0x38>
    3778:	a0 81       	ld	r26, Z
    377a:	b1 81       	ldd	r27, Z+1	; 0x01
    377c:	9d 01       	movw	r18, r26
    377e:	2f 5f       	subi	r18, 0xFF	; 255
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	31 83       	std	Z+1, r19	; 0x01
    3784:	20 83       	st	Z, r18
    3786:	8c 93       	st	X, r24
    3788:	26 81       	ldd	r18, Z+6	; 0x06
    378a:	37 81       	ldd	r19, Z+7	; 0x07
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	37 83       	std	Z+7, r19	; 0x07
    3792:	26 83       	std	Z+6, r18	; 0x06
    3794:	14 c0       	rjmp	.+40     	; 0x37be <fputc+0x6e>
    3796:	8b 01       	movw	r16, r22
    3798:	ec 01       	movw	r28, r24
    379a:	fb 01       	movw	r30, r22
    379c:	00 84       	ldd	r0, Z+8	; 0x08
    379e:	f1 85       	ldd	r31, Z+9	; 0x09
    37a0:	e0 2d       	mov	r30, r0
    37a2:	09 95       	icall
    37a4:	89 2b       	or	r24, r25
    37a6:	e1 f6       	brne	.-72     	; 0x3760 <fputc+0x10>
    37a8:	d8 01       	movw	r26, r16
    37aa:	16 96       	adiw	r26, 0x06	; 6
    37ac:	8d 91       	ld	r24, X+
    37ae:	9c 91       	ld	r25, X
    37b0:	17 97       	sbiw	r26, 0x07	; 7
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	17 96       	adiw	r26, 0x07	; 7
    37b6:	9c 93       	st	X, r25
    37b8:	8e 93       	st	-X, r24
    37ba:	16 97       	sbiw	r26, 0x06	; 6
    37bc:	ce 01       	movw	r24, r28
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	08 95       	ret

000037c8 <printf>:
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	ae 01       	movw	r20, r28
    37d2:	4b 5f       	subi	r20, 0xFB	; 251
    37d4:	5f 4f       	sbci	r21, 0xFF	; 255
    37d6:	fa 01       	movw	r30, r20
    37d8:	61 91       	ld	r22, Z+
    37da:	71 91       	ld	r23, Z+
    37dc:	af 01       	movw	r20, r30
    37de:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <__iob+0x2>
    37e2:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <__iob+0x3>
    37e6:	2c d9       	rcall	.-3496   	; 0x2a40 <vfprintf>
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	08 95       	ret

000037ee <__ultoa_invert>:
    37ee:	fa 01       	movw	r30, r20
    37f0:	aa 27       	eor	r26, r26
    37f2:	28 30       	cpi	r18, 0x08	; 8
    37f4:	51 f1       	breq	.+84     	; 0x384a <__ultoa_invert+0x5c>
    37f6:	20 31       	cpi	r18, 0x10	; 16
    37f8:	81 f1       	breq	.+96     	; 0x385a <__ultoa_invert+0x6c>
    37fa:	e8 94       	clt
    37fc:	6f 93       	push	r22
    37fe:	6e 7f       	andi	r22, 0xFE	; 254
    3800:	6e 5f       	subi	r22, 0xFE	; 254
    3802:	7f 4f       	sbci	r23, 0xFF	; 255
    3804:	8f 4f       	sbci	r24, 0xFF	; 255
    3806:	9f 4f       	sbci	r25, 0xFF	; 255
    3808:	af 4f       	sbci	r26, 0xFF	; 255
    380a:	b1 e0       	ldi	r27, 0x01	; 1
    380c:	3e d0       	rcall	.+124    	; 0x388a <__ultoa_invert+0x9c>
    380e:	b4 e0       	ldi	r27, 0x04	; 4
    3810:	3c d0       	rcall	.+120    	; 0x388a <__ultoa_invert+0x9c>
    3812:	67 0f       	add	r22, r23
    3814:	78 1f       	adc	r23, r24
    3816:	89 1f       	adc	r24, r25
    3818:	9a 1f       	adc	r25, r26
    381a:	a1 1d       	adc	r26, r1
    381c:	68 0f       	add	r22, r24
    381e:	79 1f       	adc	r23, r25
    3820:	8a 1f       	adc	r24, r26
    3822:	91 1d       	adc	r25, r1
    3824:	a1 1d       	adc	r26, r1
    3826:	6a 0f       	add	r22, r26
    3828:	71 1d       	adc	r23, r1
    382a:	81 1d       	adc	r24, r1
    382c:	91 1d       	adc	r25, r1
    382e:	a1 1d       	adc	r26, r1
    3830:	20 d0       	rcall	.+64     	; 0x3872 <__ultoa_invert+0x84>
    3832:	09 f4       	brne	.+2      	; 0x3836 <__ultoa_invert+0x48>
    3834:	68 94       	set
    3836:	3f 91       	pop	r19
    3838:	2a e0       	ldi	r18, 0x0A	; 10
    383a:	26 9f       	mul	r18, r22
    383c:	11 24       	eor	r1, r1
    383e:	30 19       	sub	r19, r0
    3840:	30 5d       	subi	r19, 0xD0	; 208
    3842:	31 93       	st	Z+, r19
    3844:	de f6       	brtc	.-74     	; 0x37fc <__ultoa_invert+0xe>
    3846:	cf 01       	movw	r24, r30
    3848:	08 95       	ret
    384a:	46 2f       	mov	r20, r22
    384c:	47 70       	andi	r20, 0x07	; 7
    384e:	40 5d       	subi	r20, 0xD0	; 208
    3850:	41 93       	st	Z+, r20
    3852:	b3 e0       	ldi	r27, 0x03	; 3
    3854:	0f d0       	rcall	.+30     	; 0x3874 <__ultoa_invert+0x86>
    3856:	c9 f7       	brne	.-14     	; 0x384a <__ultoa_invert+0x5c>
    3858:	f6 cf       	rjmp	.-20     	; 0x3846 <__ultoa_invert+0x58>
    385a:	46 2f       	mov	r20, r22
    385c:	4f 70       	andi	r20, 0x0F	; 15
    385e:	40 5d       	subi	r20, 0xD0	; 208
    3860:	4a 33       	cpi	r20, 0x3A	; 58
    3862:	18 f0       	brcs	.+6      	; 0x386a <__ultoa_invert+0x7c>
    3864:	49 5d       	subi	r20, 0xD9	; 217
    3866:	31 fd       	sbrc	r19, 1
    3868:	40 52       	subi	r20, 0x20	; 32
    386a:	41 93       	st	Z+, r20
    386c:	02 d0       	rcall	.+4      	; 0x3872 <__ultoa_invert+0x84>
    386e:	a9 f7       	brne	.-22     	; 0x385a <__ultoa_invert+0x6c>
    3870:	ea cf       	rjmp	.-44     	; 0x3846 <__ultoa_invert+0x58>
    3872:	b4 e0       	ldi	r27, 0x04	; 4
    3874:	a6 95       	lsr	r26
    3876:	97 95       	ror	r25
    3878:	87 95       	ror	r24
    387a:	77 95       	ror	r23
    387c:	67 95       	ror	r22
    387e:	ba 95       	dec	r27
    3880:	c9 f7       	brne	.-14     	; 0x3874 <__ultoa_invert+0x86>
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	61 05       	cpc	r22, r1
    3886:	71 05       	cpc	r23, r1
    3888:	08 95       	ret
    388a:	9b 01       	movw	r18, r22
    388c:	ac 01       	movw	r20, r24
    388e:	0a 2e       	mov	r0, r26
    3890:	06 94       	lsr	r0
    3892:	57 95       	ror	r21
    3894:	47 95       	ror	r20
    3896:	37 95       	ror	r19
    3898:	27 95       	ror	r18
    389a:	ba 95       	dec	r27
    389c:	c9 f7       	brne	.-14     	; 0x3890 <__ultoa_invert+0xa2>
    389e:	62 0f       	add	r22, r18
    38a0:	73 1f       	adc	r23, r19
    38a2:	84 1f       	adc	r24, r20
    38a4:	95 1f       	adc	r25, r21
    38a6:	a0 1d       	adc	r26, r0
    38a8:	08 95       	ret

000038aa <__divmodsi4>:
    38aa:	05 2e       	mov	r0, r21
    38ac:	97 fb       	bst	r25, 7
    38ae:	16 f4       	brtc	.+4      	; 0x38b4 <__divmodsi4+0xa>
    38b0:	00 94       	com	r0
    38b2:	0f d0       	rcall	.+30     	; 0x38d2 <__negsi2>
    38b4:	57 fd       	sbrc	r21, 7
    38b6:	05 d0       	rcall	.+10     	; 0x38c2 <__divmodsi4_neg2>
    38b8:	4c dc       	rcall	.-1896   	; 0x3152 <__udivmodsi4>
    38ba:	07 fc       	sbrc	r0, 7
    38bc:	02 d0       	rcall	.+4      	; 0x38c2 <__divmodsi4_neg2>
    38be:	46 f4       	brtc	.+16     	; 0x38d0 <__divmodsi4_exit>
    38c0:	08 c0       	rjmp	.+16     	; 0x38d2 <__negsi2>

000038c2 <__divmodsi4_neg2>:
    38c2:	50 95       	com	r21
    38c4:	40 95       	com	r20
    38c6:	30 95       	com	r19
    38c8:	21 95       	neg	r18
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	4f 4f       	sbci	r20, 0xFF	; 255
    38ce:	5f 4f       	sbci	r21, 0xFF	; 255

000038d0 <__divmodsi4_exit>:
    38d0:	08 95       	ret

000038d2 <__negsi2>:
    38d2:	90 95       	com	r25
    38d4:	80 95       	com	r24
    38d6:	70 95       	com	r23
    38d8:	61 95       	neg	r22
    38da:	7f 4f       	sbci	r23, 0xFF	; 255
    38dc:	8f 4f       	sbci	r24, 0xFF	; 255
    38de:	9f 4f       	sbci	r25, 0xFF	; 255
    38e0:	08 95       	ret

000038e2 <__muluhisi3>:
    38e2:	59 dc       	rcall	.-1870   	; 0x3196 <__umulhisi3>
    38e4:	a5 9f       	mul	r26, r21
    38e6:	90 0d       	add	r25, r0
    38e8:	b4 9f       	mul	r27, r20
    38ea:	90 0d       	add	r25, r0
    38ec:	a4 9f       	mul	r26, r20
    38ee:	80 0d       	add	r24, r0
    38f0:	91 1d       	adc	r25, r1
    38f2:	11 24       	eor	r1, r1
    38f4:	08 95       	ret

000038f6 <__mulshisi3>:
    38f6:	b7 ff       	sbrs	r27, 7
    38f8:	f4 cf       	rjmp	.-24     	; 0x38e2 <__muluhisi3>

000038fa <__mulohisi3>:
    38fa:	f3 df       	rcall	.-26     	; 0x38e2 <__muluhisi3>
    38fc:	82 1b       	sub	r24, r18
    38fe:	93 0b       	sbc	r25, r19
    3900:	08 95       	ret

00003902 <_exit>:
    3902:	f8 94       	cli

00003904 <__stop_program>:
    3904:	ff cf       	rjmp	.-2      	; 0x3904 <__stop_program>
